
IAP_STM32F7-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb4  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08005db0  08005db0  00015db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006208  08006208  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006210  08006210  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006214  08006214  00016214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200001e0  080063f8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  080063f8  00020724  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca70  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000243e  00000000  00000000  0002cc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000998  00000000  00000000  0002f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002fa58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002667d  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009fe7  00000000  00000000  00056945  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed752  00000000  00000000  0006092c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e07e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b4c  00000000  00000000  0014e0fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001e0 	.word	0x200001e0
 8000214:	00000000 	.word	0x00000000
 8000218:	08005d94 	.word	0x08005d94

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001e4 	.word	0x200001e4
 8000234:	08005d94 	.word	0x08005d94

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b972 	b.w	8000544 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	4688      	mov	r8, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14b      	bne.n	800031e <__udivmoddi4+0xa6>
 8000286:	428a      	cmp	r2, r1
 8000288:	4615      	mov	r5, r2
 800028a:	d967      	bls.n	800035c <__udivmoddi4+0xe4>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0720 	rsb	r7, r2, #32
 8000296:	fa01 f302 	lsl.w	r3, r1, r2
 800029a:	fa20 f707 	lsr.w	r7, r0, r7
 800029e:	4095      	lsls	r5, r2
 80002a0:	ea47 0803 	orr.w	r8, r7, r3
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b0:	fa1f fc85 	uxth.w	ip, r5
 80002b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	fb07 f10c 	mul.w	r1, r7, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ca:	f080 811b 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8118 	bls.w	8000504 <__udivmoddi4+0x28c>
 80002d4:	3f02      	subs	r7, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ec:	45a4      	cmp	ip, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	192c      	adds	r4, r5, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8107 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	f240 8104 	bls.w	8000508 <__udivmoddi4+0x290>
 8000300:	3802      	subs	r0, #2
 8000302:	442c      	add	r4, r5
 8000304:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000308:	eba4 040c 	sub.w	r4, r4, ip
 800030c:	2700      	movs	r7, #0
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0xbe>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80eb 	beq.w	80004fe <__udivmoddi4+0x286>
 8000328:	2700      	movs	r7, #0
 800032a:	e9c6 0100 	strd	r0, r1, [r6]
 800032e:	4638      	mov	r0, r7
 8000330:	4639      	mov	r1, r7
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f783 	clz	r7, r3
 800033a:	2f00      	cmp	r7, #0
 800033c:	d147      	bne.n	80003ce <__udivmoddi4+0x156>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xd0>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80fa 	bhi.w	800053c <__udivmoddi4+0x2c4>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0303 	sbc.w	r3, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4698      	mov	r8, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d0e0      	beq.n	8000318 <__udivmoddi4+0xa0>
 8000356:	e9c6 4800 	strd	r4, r8, [r6]
 800035a:	e7dd      	b.n	8000318 <__udivmoddi4+0xa0>
 800035c:	b902      	cbnz	r2, 8000360 <__udivmoddi4+0xe8>
 800035e:	deff      	udf	#255	; 0xff
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	2a00      	cmp	r2, #0
 8000366:	f040 808f 	bne.w	8000488 <__udivmoddi4+0x210>
 800036a:	1b49      	subs	r1, r1, r5
 800036c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000370:	fa1f f885 	uxth.w	r8, r5
 8000374:	2701      	movs	r7, #1
 8000376:	fbb1 fcfe 	udiv	ip, r1, lr
 800037a:	0c23      	lsrs	r3, r4, #16
 800037c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb08 f10c 	mul.w	r1, r8, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x124>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4299      	cmp	r1, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 800039a:	4684      	mov	ip, r0
 800039c:	1a59      	subs	r1, r3, r1
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ac:	fb08 f800 	mul.w	r8, r8, r0
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x14c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80b6 	bhi.w	800052e <__udivmoddi4+0x2b6>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003cc:	e79f      	b.n	800030e <__udivmoddi4+0x96>
 80003ce:	f1c7 0c20 	rsb	ip, r7, #32
 80003d2:	40bb      	lsls	r3, r7
 80003d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003dc:	fa01 f407 	lsl.w	r4, r1, r7
 80003e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ec:	4325      	orrs	r5, r4
 80003ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	fb08 3319 	mls	r3, r8, r9, r3
 80003f8:	fa1f fa8e 	uxth.w	sl, lr
 80003fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000400:	fb09 f40a 	mul.w	r4, r9, sl
 8000404:	429c      	cmp	r4, r3
 8000406:	fa02 f207 	lsl.w	r2, r2, r7
 800040a:	fa00 f107 	lsl.w	r1, r0, r7
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1e 0303 	adds.w	r3, lr, r3
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	f080 8087 	bcs.w	800052a <__udivmoddi4+0x2b2>
 800041c:	429c      	cmp	r4, r3
 800041e:	f240 8084 	bls.w	800052a <__udivmoddi4+0x2b2>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4473      	add	r3, lr
 8000428:	1b1b      	subs	r3, r3, r4
 800042a:	b2ad      	uxth	r5, r5
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3310 	mls	r3, r8, r0, r3
 8000434:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000438:	fb00 fa0a 	mul.w	sl, r0, sl
 800043c:	45a2      	cmp	sl, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1e 0404 	adds.w	r4, lr, r4
 8000444:	f100 33ff 	add.w	r3, r0, #4294967295
 8000448:	d26b      	bcs.n	8000522 <__udivmoddi4+0x2aa>
 800044a:	45a2      	cmp	sl, r4
 800044c:	d969      	bls.n	8000522 <__udivmoddi4+0x2aa>
 800044e:	3802      	subs	r0, #2
 8000450:	4474      	add	r4, lr
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	eba4 040a 	sub.w	r4, r4, sl
 800045e:	454c      	cmp	r4, r9
 8000460:	46c2      	mov	sl, r8
 8000462:	464b      	mov	r3, r9
 8000464:	d354      	bcc.n	8000510 <__udivmoddi4+0x298>
 8000466:	d051      	beq.n	800050c <__udivmoddi4+0x294>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2c8>
 800046c:	ebb1 050a 	subs.w	r5, r1, sl
 8000470:	eb64 0403 	sbc.w	r4, r4, r3
 8000474:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000478:	40fd      	lsrs	r5, r7
 800047a:	40fc      	lsrs	r4, r7
 800047c:	ea4c 0505 	orr.w	r5, ip, r5
 8000480:	e9c6 5400 	strd	r5, r4, [r6]
 8000484:	2700      	movs	r7, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa0>
 8000488:	f1c2 0320 	rsb	r3, r2, #32
 800048c:	fa20 f703 	lsr.w	r7, r0, r3
 8000490:	4095      	lsls	r5, r2
 8000492:	fa01 f002 	lsl.w	r0, r1, r2
 8000496:	fa21 f303 	lsr.w	r3, r1, r3
 800049a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049e:	4338      	orrs	r0, r7
 80004a0:	0c01      	lsrs	r1, r0, #16
 80004a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004a6:	fa1f f885 	uxth.w	r8, r5
 80004aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb07 f308 	mul.w	r3, r7, r8
 80004b6:	428b      	cmp	r3, r1
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x256>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004c4:	d22f      	bcs.n	8000526 <__udivmoddi4+0x2ae>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d92d      	bls.n	8000526 <__udivmoddi4+0x2ae>
 80004ca:	3f02      	subs	r7, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1acb      	subs	r3, r1, r3
 80004d0:	b281      	uxth	r1, r0
 80004d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb00 f308 	mul.w	r3, r0, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x27e>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ec:	d217      	bcs.n	800051e <__udivmoddi4+0x2a6>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d915      	bls.n	800051e <__udivmoddi4+0x2a6>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1ac9      	subs	r1, r1, r3
 80004f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004fc:	e73b      	b.n	8000376 <__udivmoddi4+0xfe>
 80004fe:	4637      	mov	r7, r6
 8000500:	4630      	mov	r0, r6
 8000502:	e709      	b.n	8000318 <__udivmoddi4+0xa0>
 8000504:	4607      	mov	r7, r0
 8000506:	e6e7      	b.n	80002d8 <__udivmoddi4+0x60>
 8000508:	4618      	mov	r0, r3
 800050a:	e6fb      	b.n	8000304 <__udivmoddi4+0x8c>
 800050c:	4541      	cmp	r1, r8
 800050e:	d2ab      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000510:	ebb8 0a02 	subs.w	sl, r8, r2
 8000514:	eb69 020e 	sbc.w	r2, r9, lr
 8000518:	3801      	subs	r0, #1
 800051a:	4613      	mov	r3, r2
 800051c:	e7a4      	b.n	8000468 <__udivmoddi4+0x1f0>
 800051e:	4660      	mov	r0, ip
 8000520:	e7e9      	b.n	80004f6 <__udivmoddi4+0x27e>
 8000522:	4618      	mov	r0, r3
 8000524:	e795      	b.n	8000452 <__udivmoddi4+0x1da>
 8000526:	4667      	mov	r7, ip
 8000528:	e7d1      	b.n	80004ce <__udivmoddi4+0x256>
 800052a:	4681      	mov	r9, r0
 800052c:	e77c      	b.n	8000428 <__udivmoddi4+0x1b0>
 800052e:	3802      	subs	r0, #2
 8000530:	442c      	add	r4, r5
 8000532:	e747      	b.n	80003c4 <__udivmoddi4+0x14c>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	442b      	add	r3, r5
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x124>
 800053c:	4638      	mov	r0, r7
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xda>
 8000540:	4637      	mov	r7, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa0>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8000548:	b480      	push	{r7}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <Int2Str+0xa0>)
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	e038      	b.n	80005d6 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	fbb2 f3f3 	udiv	r3, r2, r3
 800056c:	b2da      	uxtb	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	60f9      	str	r1, [r7, #12]
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	440b      	add	r3, r1
 8000578:	3230      	adds	r2, #48	; 0x30
 800057a:	b2d2      	uxtb	r2, r2
 800057c:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	fbb3 f2f2 	udiv	r2, r3, r2
 8000586:	6939      	ldr	r1, [r7, #16]
 8000588:	fb01 f202 	mul.w	r2, r1, r2
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <Int2Str+0xa4>)
 8000594:	fba2 2303 	umull	r2, r3, r2, r3
 8000598:	08db      	lsrs	r3, r3, #3
 800059a:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	3b01      	subs	r3, #1
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b30      	cmp	r3, #48	; 0x30
 80005a8:	bf0c      	ite	eq
 80005aa:	2301      	moveq	r3, #1
 80005ac:	2300      	movne	r3, #0
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf0c      	ite	eq
 80005b6:	2301      	moveq	r3, #1
 80005b8:	2300      	movne	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4013      	ands	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <Int2Str+0x82>
    {
      pos = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e002      	b.n	80005d0 <Int2Str+0x88>
    }
    else
    {
      status++;
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	2b09      	cmp	r3, #9
 80005da:	d9c3      	bls.n	8000564 <Int2Str+0x1c>
    }
  }
}
 80005dc:	bf00      	nop
 80005de:	371c      	adds	r7, #28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	3b9aca00 	.word	0x3b9aca00
 80005ec:	cccccccd 	.word	0xcccccccd

080005f0 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b30      	cmp	r3, #48	; 0x30
 800060c:	f040 80d7 	bne.w	80007be <Str2Int+0x1ce>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b78      	cmp	r3, #120	; 0x78
 8000618:	d005      	beq.n	8000626 <Str2Int+0x36>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b58      	cmp	r3, #88	; 0x58
 8000622:	f040 80cc 	bne.w	80007be <Str2Int+0x1ce>
  {
    i = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800062a:	e057      	b.n	80006dc <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b40      	cmp	r3, #64	; 0x40
 8000636:	d905      	bls.n	8000644 <Str2Int+0x54>
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b46      	cmp	r3, #70	; 0x46
 8000642:	d917      	bls.n	8000674 <Str2Int+0x84>
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b60      	cmp	r3, #96	; 0x60
 800064e:	d905      	bls.n	800065c <Str2Int+0x6c>
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b66      	cmp	r3, #102	; 0x66
 800065a:	d90b      	bls.n	8000674 <Str2Int+0x84>
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b2f      	cmp	r3, #47	; 0x2f
 8000666:	d936      	bls.n	80006d6 <Str2Int+0xe6>
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b39      	cmp	r3, #57	; 0x39
 8000672:	d830      	bhi.n	80006d6 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	440a      	add	r2, r1
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	2a2f      	cmp	r2, #47	; 0x2f
 8000682:	d90b      	bls.n	800069c <Str2Int+0xac>
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	440a      	add	r2, r1
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	2a39      	cmp	r2, #57	; 0x39
 800068e:	d805      	bhi.n	800069c <Str2Int+0xac>
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	440a      	add	r2, r1
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	3a30      	subs	r2, #48	; 0x30
 800069a:	e016      	b.n	80006ca <Str2Int+0xda>
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	440a      	add	r2, r1
 80006a2:	7812      	ldrb	r2, [r2, #0]
 80006a4:	2a40      	cmp	r2, #64	; 0x40
 80006a6:	d90b      	bls.n	80006c0 <Str2Int+0xd0>
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	440a      	add	r2, r1
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	2a46      	cmp	r2, #70	; 0x46
 80006b2:	d805      	bhi.n	80006c0 <Str2Int+0xd0>
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	440a      	add	r2, r1
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	3a37      	subs	r2, #55	; 0x37
 80006be:	e004      	b.n	80006ca <Str2Int+0xda>
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	440a      	add	r2, r1
 80006c6:	7812      	ldrb	r2, [r2, #0]
 80006c8:	3a57      	subs	r2, #87	; 0x57
 80006ca:	4413      	add	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e002      	b.n	80006dc <Str2Int+0xec>
        res = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
        break;
 80006da:	e008      	b.n	80006ee <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	d805      	bhi.n	80006ee <Str2Int+0xfe>
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d19e      	bne.n	800062c <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d167      	bne.n	80007ca <Str2Int+0x1da>
    {
      *p_intnum = val;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	601a      	str	r2, [r3, #0]
      res = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8000704:	e061      	b.n	80007ca <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	4413      	add	r3, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <Str2Int+0x12e>
      {
        *p_intnum = val;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	e04c      	b.n	80007b8 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	4413      	add	r3, r2
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b6b      	cmp	r3, #107	; 0x6b
 8000728:	d005      	beq.n	8000736 <Str2Int+0x146>
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b4b      	cmp	r3, #75	; 0x4b
 8000734:	d10b      	bne.n	800074e <Str2Int+0x15e>
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d008      	beq.n	800074e <Str2Int+0x15e>
      {
        val = val << 10;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	029b      	lsls	r3, r3, #10
 8000740:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	601a      	str	r2, [r3, #0]
        res = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	e034      	b.n	80007b8 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b6d      	cmp	r3, #109	; 0x6d
 8000758:	d005      	beq.n	8000766 <Str2Int+0x176>
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b4d      	cmp	r3, #77	; 0x4d
 8000764:	d10b      	bne.n	800077e <Str2Int+0x18e>
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d008      	beq.n	800077e <Str2Int+0x18e>
      {
        val = val << 20;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	051b      	lsls	r3, r3, #20
 8000770:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	601a      	str	r2, [r3, #0]
        res = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	e01c      	b.n	80007b8 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b2f      	cmp	r3, #47	; 0x2f
 8000788:	d913      	bls.n	80007b2 <Str2Int+0x1c2>
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b39      	cmp	r3, #57	; 0x39
 8000794:	d80d      	bhi.n	80007b2 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	440b      	add	r3, r1
 80007ac:	3b30      	subs	r3, #48	; 0x30
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	e002      	b.n	80007b8 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
        break;
 80007b6:	e008      	b.n	80007ca <Str2Int+0x1da>
      }
      i++;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	2b0a      	cmp	r3, #10
 80007c2:	d802      	bhi.n	80007ca <Str2Int+0x1da>
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d19d      	bne.n	8000706 <Str2Int+0x116>
    }
  }

  return res;
 80007ca:	693b      	ldr	r3, [r7, #16]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 80007e4:	e002      	b.n	80007ec <Serial_PutString+0x14>
  {
    length++;
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	3301      	adds	r3, #1
 80007ea:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f6      	bne.n	80007e6 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 80007f8:	89fa      	ldrh	r2, [r7, #14]
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <Serial_PutString+0x3c>)
 8000800:	f002 fdf0 	bl	80033e4 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	; 0x64
 8000806:	f000 ff65 	bl	80016d4 <HAL_Delay>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000224 	.word	0x20000224

08000818 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <Serial_PutByte+0x30>)
 8000824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000826:	2ba0      	cmp	r3, #160	; 0xa0
 8000828:	d102      	bne.n	8000830 <Serial_PutByte+0x18>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <Serial_PutByte+0x30>)
 800082c:	2220      	movs	r2, #32
 800082e:	675a      	str	r2, [r3, #116]	; 0x74
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 8000830:	1df9      	adds	r1, r7, #7
 8000832:	2364      	movs	r3, #100	; 0x64
 8000834:	2201      	movs	r2, #1
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <Serial_PutByte+0x30>)
 8000838:	f002 fdd4 	bl	80033e4 <HAL_UART_Transmit>
 800083c:	4603      	mov	r3, r0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000224 	.word	0x20000224

0800084c <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 8000850:	f001 f8f2 	bl	8001a38 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <FLASH_If_Init+0x14>)
 8000856:	2273      	movs	r2, #115	; 0x73
 8000858:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGAERR);
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023c00 	.word	0x40023c00

08000864 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 800086c:	f7ff ffee 	bl	800084c <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(APPLICATION_ADDRESS);
 8000870:	480e      	ldr	r0, [pc, #56]	; (80008ac <FLASH_If_Erase+0x48>)
 8000872:	f000 f85b 	bl	800092c <GetSector>
 8000876:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 10;
 8000880:	230a      	movs	r3, #10
 8000882:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8000884:	2302      	movs	r3, #2
 8000886:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8000888:	f107 0220 	add.w	r2, r7, #32
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fa1a 	bl	8001ccc <HAL_FLASHEx_Erase>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <FLASH_If_Erase+0x40>
  }
  
  return (0);
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	08008000 	.word	0x08008000

080008b0 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e023      	b.n	800090e <FLASH_If_Write+0x5e>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f04f 0400 	mov.w	r4, #0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4623      	mov	r3, r4
 80008d8:	68f9      	ldr	r1, [r7, #12]
 80008da:	2002      	movs	r0, #2
 80008dc:	f001 f850 	bl	8001980 <HAL_FLASH_Program>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10e      	bne.n	8000904 <FLASH_If_Write+0x54>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	68b9      	ldr	r1, [r7, #8]
 80008f0:	440b      	add	r3, r1
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d001      	beq.n	80008fc <FLASH_If_Write+0x4c>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 80008f8:	2302      	movs	r3, #2
 80008fa:	e011      	b.n	8000920 <FLASH_If_Write+0x70>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3304      	adds	r3, #4
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	e001      	b.n	8000908 <FLASH_If_Write+0x58>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8000904:	2303      	movs	r3, #3
 8000906:	e00b      	b.n	8000920 <FLASH_If_Write+0x70>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	429a      	cmp	r2, r3
 8000914:	d203      	bcs.n	800091e <FLASH_If_Write+0x6e>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <FLASH_If_Write+0x78>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d9d3      	bls.n	80008c6 <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	371c      	adds	r7, #28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	080ffffb 	.word	0x080ffffb

0800092c <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <GetSector+0x110>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d806      	bhi.n	800094e <GetSector+0x22>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000946:	d302      	bcc.n	800094e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	e06f      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a3b      	ldr	r2, [pc, #236]	; (8000a40 <GetSector+0x114>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d806      	bhi.n	8000964 <GetSector+0x38>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a38      	ldr	r2, [pc, #224]	; (8000a3c <GetSector+0x110>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d902      	bls.n	8000964 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 800095e:	2301      	movs	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	e064      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a37      	ldr	r2, [pc, #220]	; (8000a44 <GetSector+0x118>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d806      	bhi.n	800097a <GetSector+0x4e>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a34      	ldr	r2, [pc, #208]	; (8000a40 <GetSector+0x114>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d902      	bls.n	800097a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 8000974:	2302      	movs	r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e059      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <GetSector+0x11c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d806      	bhi.n	8000990 <GetSector+0x64>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a2f      	ldr	r2, [pc, #188]	; (8000a44 <GetSector+0x118>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d902      	bls.n	8000990 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 800098a:	2303      	movs	r3, #3
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e04e      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a2e      	ldr	r2, [pc, #184]	; (8000a4c <GetSector+0x120>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d806      	bhi.n	80009a6 <GetSector+0x7a>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a2b      	ldr	r2, [pc, #172]	; (8000a48 <GetSector+0x11c>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d902      	bls.n	80009a6 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 80009a0:	2304      	movs	r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e043      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <GetSector+0x124>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d806      	bhi.n	80009bc <GetSector+0x90>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a26      	ldr	r2, [pc, #152]	; (8000a4c <GetSector+0x120>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d902      	bls.n	80009bc <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 80009b6:	2305      	movs	r3, #5
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e038      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a25      	ldr	r2, [pc, #148]	; (8000a54 <GetSector+0x128>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d806      	bhi.n	80009d2 <GetSector+0xa6>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <GetSector+0x124>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d902      	bls.n	80009d2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 80009cc:	2306      	movs	r3, #6
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e02d      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <GetSector+0x12c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d806      	bhi.n	80009e8 <GetSector+0xbc>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <GetSector+0x128>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d902      	bls.n	80009e8 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 80009e2:	2307      	movs	r3, #7
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	e022      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <GetSector+0x130>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d806      	bhi.n	80009fe <GetSector+0xd2>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <GetSector+0x12c>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d902      	bls.n	80009fe <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;  
 80009f8:	2308      	movs	r3, #8
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	e017      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <GetSector+0x134>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d806      	bhi.n	8000a14 <GetSector+0xe8>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <GetSector+0x130>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d902      	bls.n	8000a14 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;  
 8000a0e:	2309      	movs	r3, #9
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e00c      	b.n	8000a2e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <GetSector+0x138>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d806      	bhi.n	8000a2a <GetSector+0xfe>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <GetSector+0x134>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d902      	bls.n	8000a2a <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;  
 8000a24:	230a      	movs	r3, #10
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e001      	b.n	8000a2e <GetSector+0x102>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_11;  
 8000a2a:	230b      	movs	r3, #11
 8000a2c:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	08003fff 	.word	0x08003fff
 8000a40:	08007fff 	.word	0x08007fff
 8000a44:	0800bfff 	.word	0x0800bfff
 8000a48:	0800ffff 	.word	0x0800ffff
 8000a4c:	0801ffff 	.word	0x0801ffff
 8000a50:	0803ffff 	.word	0x0803ffff
 8000a54:	0805ffff 	.word	0x0805ffff
 8000a58:	0807ffff 	.word	0x0807ffff
 8000a5c:	0809ffff 	.word	0x0809ffff
 8000a60:	080bffff 	.word	0x080bffff
 8000a64:	080dffff 	.word	0x080dffff

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6e:	f000 fdd4 	bl	800161a <HAL_Init>

  /* USER CODE BEGIN Init */
  flag=0;
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <main+0xb8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f86a 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 f912 	bl	8000ca4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000a80:	f000 f8e0 	bl	8000c44 <MX_USART6_UART_Init>

  /* USER CODE BEGIN 2 */
  RxCount=0;
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <main+0xbc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
  if(HAL_UART_Transmit(&huart6, "RESTART\r\n", 9, 10)==HAL_OK)
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	2209      	movs	r2, #9
 8000a8e:	4926      	ldr	r1, [pc, #152]	; (8000b28 <main+0xc0>)
 8000a90:	4826      	ldr	r0, [pc, #152]	; (8000b2c <main+0xc4>)
 8000a92:	f002 fca7 	bl	80033e4 <HAL_UART_Transmit>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d108      	bne.n	8000aae <main+0x46>
  {
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4824      	ldr	r0, [pc, #144]	; (8000b30 <main+0xc8>)
 8000aa0:	f001 fbd1 	bl	8002246 <HAL_GPIO_TogglePin>
	  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 7);
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	4923      	ldr	r1, [pc, #140]	; (8000b34 <main+0xcc>)
 8000aa8:	4820      	ldr	r0, [pc, #128]	; (8000b2c <main+0xc4>)
 8000aaa:	f002 fdf9 	bl	80036a0 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag ==1)
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <main+0xb8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <main+0x58>
	  {
		  Main_Menu();
 8000ab6:	f000 fa07 	bl	8000ec8 <Main_Menu>
		  flag = 0;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <main+0xb8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(1000);
 8000ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac4:	f000 fe06 	bl	80016d4 <HAL_Delay>

	  if (flag==0)
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <main+0xb8>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	f083 0301 	eor.w	r3, r3, #1
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0eb      	beq.n	8000aae <main+0x46>
	  {
		  uint32_t ramstart = (*(__IO uint32_t*) APPLICATION_ADDRESS) & 0x2FFE0000;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <main+0xd0>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <main+0xd4>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	607b      	str	r3, [r7, #4]
		  if ( ramstart == 0x20080000 || ramstart == 0x20000000)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <main+0xd8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d003      	beq.n	8000af0 <main+0x88>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000aee:	d1de      	bne.n	8000aae <main+0x46>
		  {
			  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <main+0xdc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <main+0xe0>)
 8000af6:	6013      	str	r3, [r2, #0]
			  JumpToApplication = (pFunction) JumpAddress;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <main+0xe0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <main+0xe4>)
 8000b00:	601a      	str	r2, [r3, #0]
			  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <main+0xd0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f383 8808 	msr	MSP, r3
			  HAL_Delay(500);
 8000b0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b12:	f000 fddf 	bl	80016d4 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b16:	b672      	cpsid	i
			  __disable_irq();
			  JumpToApplication();
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <main+0xe4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4798      	blx	r3
	  if (flag ==1)
 8000b1e:	e7c6      	b.n	8000aae <main+0x46>
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000208 	.word	0x20000208
 8000b28:	08005db0 	.word	0x08005db0
 8000b2c:	20000224 	.word	0x20000224
 8000b30:	40020400 	.word	0x40020400
 8000b34:	200002a4 	.word	0x200002a4
 8000b38:	08008000 	.word	0x08008000
 8000b3c:	2ffe0000 	.word	0x2ffe0000
 8000b40:	20080000 	.word	0x20080000
 8000b44:	08008004 	.word	0x08008004
 8000b48:	200002ac 	.word	0x200002ac
 8000b4c:	200002b0 	.word	0x200002b0

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0b8      	sub	sp, #224	; 0xe0
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b5a:	2234      	movs	r2, #52	; 0x34
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fc4c 	bl	80043fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2290      	movs	r2, #144	; 0x90
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 fc3d 	bl	80043fc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <SystemClock_Config+0xec>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <SystemClock_Config+0xec>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <SystemClock_Config+0xec>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b9a:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <SystemClock_Config+0xf0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ba2:	4a27      	ldr	r2, [pc, #156]	; (8000c40 <SystemClock_Config+0xf0>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemClock_Config+0xf0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fb52 	bl	800227c <HAL_RCC_OscConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bde:	f000 f8e9 	bl	8000db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	230f      	movs	r3, #15
 8000be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fdaa 	bl	8002760 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c12:	f000 f8cf 	bl	8000db4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c1a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 ff69 	bl	8002afc <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c30:	f000 f8c0 	bl	8000db4 <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	37e0      	adds	r7, #224	; 0xe0
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c4a:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <MX_USART6_UART_Init+0x5c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART6_UART_Init+0x58>)
 8000c88:	f002 fb5e 	bl	8003348 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000c92:	f000 f88f 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000224 	.word	0x20000224
 8000ca0:	40011400 	.word	0x40011400

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_GPIO_Init+0x74>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a16      	ldr	r2, [pc, #88]	; (8000d18 <MX_GPIO_Init+0x74>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_GPIO_Init+0x74>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_GPIO_Init+0x74>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <MX_GPIO_Init+0x74>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_GPIO_Init+0x74>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2181      	movs	r1, #129	; 0x81
 8000cee:	480b      	ldr	r0, [pc, #44]	; (8000d1c <MX_GPIO_Init+0x78>)
 8000cf0:	f001 fa90 	bl	8002214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000cf4:	2381      	movs	r3, #129	; 0x81
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_GPIO_Init+0x78>)
 8000d0c:	f001 f8d8 	bl	8001ec0 <HAL_GPIO_Init>

}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400

08000d20 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  _Bool command = checkBLECommandFromBLEGateway(aRxBuffer ,"request",7);
 8000d28:	2207      	movs	r2, #7
 8000d2a:	490e      	ldr	r1, [pc, #56]	; (8000d64 <HAL_UART_RxCpltCallback+0x44>)
 8000d2c:	480e      	ldr	r0, [pc, #56]	; (8000d68 <HAL_UART_RxCpltCallback+0x48>)
 8000d2e:	f000 f821 	bl	8000d74 <checkBLECommandFromBLEGateway>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]


  if (command)
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00a      	beq.n	8000d52 <HAL_UART_RxCpltCallback+0x32>
  {
	  HAL_UART_Transmit(huart, "IAP START", 9,0x2710);
 8000d3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d40:	2209      	movs	r2, #9
 8000d42:	490a      	ldr	r1, [pc, #40]	; (8000d6c <HAL_UART_RxCpltCallback+0x4c>)
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f002 fb4d 	bl	80033e4 <HAL_UART_Transmit>
	  flag=1;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_UART_RxCpltCallback+0x50>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
  {
	  HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 7);
  }


}
 8000d50:	e004      	b.n	8000d5c <HAL_UART_RxCpltCallback+0x3c>
	  HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 7);
 8000d52:	2207      	movs	r2, #7
 8000d54:	4904      	ldr	r1, [pc, #16]	; (8000d68 <HAL_UART_RxCpltCallback+0x48>)
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f002 fca2 	bl	80036a0 <HAL_UART_Receive_IT>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	08005dbc 	.word	0x08005dbc
 8000d68:	200002a4 	.word	0x200002a4
 8000d6c:	08005dc4 	.word	0x08005dc4
 8000d70:	20000000 	.word	0x20000000

08000d74 <checkBLECommandFromBLEGateway>:




_Bool checkBLECommandFromBLEGateway(char * BLEcommand,char * index, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	if(strlen(BLEcommand) > 0)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d010      	beq.n	8000daa <checkBLECommandFromBLEGateway+0x36>
	{
		   //Test 比對 function
	   char * pch;
	   /* 找尋 simple 字串 */
	   pch = strstr (BLEcommand,index);
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f003 fe77 	bl	8004a7e <strstr>
 8000d90:	6178      	str	r0, [r7, #20]
	   if(strncmp(pch, index, len) == 0) {
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f003 fe5f 	bl	8004a5a <strncmp>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <checkBLECommandFromBLEGateway+0x32>
		   return true;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e002      	b.n	8000dac <checkBLECommandFromBLEGateway+0x38>
	   }
	   else
	   {
		   return false;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <checkBLECommandFromBLEGateway+0x38>

	}
	else
	{

		return false;
 8000daa:	2300      	movs	r3, #0
	}

}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <__NVIC_SystemReset+0x20>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000dd4:	4903      	ldr	r1, [pc, #12]	; (8000de4 <__NVIC_SystemReset+0x20>)
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_SystemReset+0x24>)
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60cb      	str	r3, [r1, #12]
 8000ddc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <__NVIC_SystemReset+0x1c>
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	05fa0004 	.word	0x05fa0004

08000dec <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	f8c3 2007 	str.w	r2, [r3, #7]
  uint32_t size = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;
  HAL_Delay(300);
 8000e02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e06:	f000 fc65 	bl	80016d4 <HAL_Delay>
  Serial_PutString((uint8_t *)"IAP processing\r\n");
 8000e0a:	4825      	ldr	r0, [pc, #148]	; (8000ea0 <SerialDownload+0xb4>)
 8000e0c:	f7ff fce4 	bl	80007d8 <Serial_PutString>
  HAL_Delay(500);
 8000e10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e14:	f000 fc5e 	bl	80016d4 <HAL_Delay>
  result = Ymodem_Receive( &size );
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 faac 	bl	8001378 <Ymodem_Receive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d119      	bne.n	8000e5e <SerialDownload+0x72>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8000e2a:	481e      	ldr	r0, [pc, #120]	; (8000ea4 <SerialDownload+0xb8>)
 8000e2c:	f7ff fcd4 	bl	80007d8 <Serial_PutString>
    Serial_PutString(aFileName);
 8000e30:	481d      	ldr	r0, [pc, #116]	; (8000ea8 <SerialDownload+0xbc>)
 8000e32:	f7ff fcd1 	bl	80007d8 <Serial_PutString>
    Int2Str(number, size);
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb83 	bl	8000548 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8000e42:	481a      	ldr	r0, [pc, #104]	; (8000eac <SerialDownload+0xc0>)
 8000e44:	f7ff fcc8 	bl	80007d8 <Serial_PutString>
    Serial_PutString(number);
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fcc4 	bl	80007d8 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <SerialDownload+0xc4>)
 8000e52:	f7ff fcc1 	bl	80007d8 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8000e56:	4817      	ldr	r0, [pc, #92]	; (8000eb4 <SerialDownload+0xc8>)
 8000e58:	f7ff fcbe 	bl	80007d8 <Serial_PutString>
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
    NVIC_SystemReset();
  }
}
 8000e5c:	e01c      	b.n	8000e98 <SerialDownload+0xac>
  else if (result == COM_LIMIT)
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	d104      	bne.n	8000e6e <SerialDownload+0x82>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8000e64:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <SerialDownload+0xcc>)
 8000e66:	f7ff fcb7 	bl	80007d8 <Serial_PutString>
    NVIC_SystemReset();
 8000e6a:	f7ff ffab 	bl	8000dc4 <__NVIC_SystemReset>
  else if (result == COM_DATA)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d104      	bne.n	8000e7e <SerialDownload+0x92>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <SerialDownload+0xd0>)
 8000e76:	f7ff fcaf 	bl	80007d8 <Serial_PutString>
    NVIC_SystemReset();
 8000e7a:	f7ff ffa3 	bl	8000dc4 <__NVIC_SystemReset>
  else if (result == COM_ABORT)
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d104      	bne.n	8000e8e <SerialDownload+0xa2>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8000e84:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <SerialDownload+0xd4>)
 8000e86:	f7ff fca7 	bl	80007d8 <Serial_PutString>
    NVIC_SystemReset();
 8000e8a:	f7ff ff9b 	bl	8000dc4 <__NVIC_SystemReset>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8000e8e:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <SerialDownload+0xd8>)
 8000e90:	f7ff fca2 	bl	80007d8 <Serial_PutString>
    NVIC_SystemReset();
 8000e94:	f7ff ff96 	bl	8000dc4 <__NVIC_SystemReset>
}
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08005dd0 	.word	0x08005dd0
 8000ea4:	08005de4 	.word	0x08005de4
 8000ea8:	200002b4 	.word	0x200002b4
 8000eac:	08005e38 	.word	0x08005e38
 8000eb0:	08005e44 	.word	0x08005e44
 8000eb4:	08005e50 	.word	0x08005e50
 8000eb8:	08005e68 	.word	0x08005e68
 8000ebc:	08005ea8 	.word	0x08005ea8
 8000ec0:	08005ec4 	.word	0x08005ec4
 8000ec4:	08005edc 	.word	0x08005edc

08000ec8 <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  uint8_t key = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  HAL_Delay(500);
 8000ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed6:	f000 fbfd 	bl	80016d4 <HAL_Delay>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
  Serial_PutString((uint8_t *)"\r\n=                       By MCD Application Team                      =");
  Serial_PutString((uint8_t *)"\r\n======================================================================");
  Serial_PutString((uint8_t *)"\r\n\r\n");
  */
  Serial_PutString((uint8_t *)"\r\nUpload image from the internal Flash \r\n");
 8000eda:	4813      	ldr	r0, [pc, #76]	; (8000f28 <Main_Menu+0x60>)
 8000edc:	f7ff fc7c 	bl	80007d8 <Serial_PutString>
  SerialDownload();
 8000ee0:	f7ff ff84 	bl	8000dec <SerialDownload>
  HAL_Delay(500);
 8000ee4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee8:	f000 fbf4 	bl	80016d4 <HAL_Delay>
  Serial_PutString((uint8_t *)"\r\nStart program execution\r\n");
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <Main_Menu+0x64>)
 8000eee:	f7ff fc73 	bl	80007d8 <Serial_PutString>
  /* execute the new program */
  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <Main_Menu+0x68>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <Main_Menu+0x6c>)
 8000ef8:	6013      	str	r3, [r2, #0]
  /* Jump to user application */
  JumpToApplication = (pFunction) JumpAddress;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <Main_Menu+0x6c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <Main_Menu+0x70>)
 8000f02:	601a      	str	r2, [r3, #0]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <Main_Menu+0x74>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f383 8808 	msr	MSP, r3
  //__disable_irq();
  HAL_Delay(500);
 8000f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f14:	f000 fbde 	bl	80016d4 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
  __disable_irq();
  JumpToApplication();
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <Main_Menu+0x70>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4798      	blx	r3

}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08005f7c 	.word	0x08005f7c
 8000f2c:	08005fa8 	.word	0x08005fa8
 8000f30:	08008004 	.word	0x08008004
 8000f34:	200002ac 	.word	0x200002ac
 8000f38:	200002b0 	.word	0x200002b0
 8000f3c:	08008000 	.word	0x08008000

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_MspInit+0x44>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_MspInit+0x44>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_MspInit+0x44>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_MspInit+0x44>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_MspInit+0x44>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_MspInit+0x44>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12f      	bne.n	800100a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_UART_MspInit+0x90>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <HAL_UART_MspInit+0x90>)
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_UART_MspInit+0x90>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f003 0320 	and.w	r3, r3, #32
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x90>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_UART_MspInit+0x90>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_UART_MspInit+0x90>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fda:	23c0      	movs	r3, #192	; 0xc0
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fea:	2308      	movs	r3, #8
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <HAL_UART_MspInit+0x94>)
 8000ff6:	f000 ff63 	bl	8001ec0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2047      	movs	r0, #71	; 0x47
 8001000:	f000 fc65 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001004:	2047      	movs	r0, #71	; 0x47
 8001006:	f000 fc7e 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40011400 	.word	0x40011400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 fb0e 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <USART6_IRQHandler+0x10>)
 8001082:	f002 fbaf 	bl	80037e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000224 	.word	0x20000224

08001090 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x50>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x16>
		heap_end = &end;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <_sbrk+0x50>)
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <_sbrk+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <_sbrk+0x50>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <_sbrk+0x50>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	466a      	mov	r2, sp
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d907      	bls.n	80010ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010ba:	f003 f975 	bl	80043a8 <__errno>
 80010be:	4602      	mov	r2, r0
 80010c0:	230c      	movs	r3, #12
 80010c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	e006      	b.n	80010d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <_sbrk+0x50>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <_sbrk+0x50>)
 80010d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	20000728 	.word	0x20000728

080010e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <SystemInit+0x5c>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <SystemInit+0x5c>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <SystemInit+0x60>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <SystemInit+0x60>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <SystemInit+0x60>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <SystemInit+0x60>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <SystemInit+0x60>)
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <SystemInit+0x64>)
 8001116:	4013      	ands	r3, r2
 8001118:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <SystemInit+0x60>)
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <SystemInit+0x68>)
 800111e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <SystemInit+0x60>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <SystemInit+0x60>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <SystemInit+0x60>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SystemInit+0x5c>)
 8001134:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001138:	609a      	str	r2, [r3, #8]
#endif
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	40023800 	.word	0x40023800
 800114c:	fef6ffff 	.word	0xfef6ffff
 8001150:	24003010 	.word	0x24003010

08001154 <__NVIC_SystemReset>:
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001158:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <__NVIC_SystemReset+0x20>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001164:	4903      	ldr	r1, [pc, #12]	; (8001174 <__NVIC_SystemReset+0x20>)
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_SystemReset+0x24>)
 8001168:	4313      	orrs	r3, r2
 800116a:	60cb      	str	r3, [r1, #12]
 800116c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <__NVIC_SystemReset+0x1c>
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0004 	.word	0x05fa0004

0800117c <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 8001192:	f107 0113 	add.w	r1, r7, #19
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	4844      	ldr	r0, [pc, #272]	; (80012ac <ReceivePacket+0x130>)
 800119c:	f002 f9b3 	bl	8003506 <HAL_UART_Receive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 80011a4:	7efb      	ldrb	r3, [r7, #27]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d177      	bne.n	800129a <ReceivePacket+0x11e>
  {
    switch (char1)
 80011aa:	7cfb      	ldrb	r3, [r7, #19]
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d02d      	beq.n	800120c <ReceivePacket+0x90>
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	dc04      	bgt.n	80011be <ReceivePacket+0x42>
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d009      	beq.n	80011cc <ReceivePacket+0x50>
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d00a      	beq.n	80011d2 <ReceivePacket+0x56>
 80011bc:	e023      	b.n	8001206 <ReceivePacket+0x8a>
 80011be:	2b41      	cmp	r3, #65	; 0x41
 80011c0:	d01e      	beq.n	8001200 <ReceivePacket+0x84>
 80011c2:	2b61      	cmp	r3, #97	; 0x61
 80011c4:	d01c      	beq.n	8001200 <ReceivePacket+0x84>
 80011c6:	2b18      	cmp	r3, #24
 80011c8:	d007      	beq.n	80011da <ReceivePacket+0x5e>
 80011ca:	e01c      	b.n	8001206 <ReceivePacket+0x8a>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	61fb      	str	r3, [r7, #28]
        break;
 80011d0:	e01d      	b.n	800120e <ReceivePacket+0x92>
      case STX:
        packet_size = PACKET_1K_SIZE;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	61fb      	str	r3, [r7, #28]
        break;
 80011d8:	e019      	b.n	800120e <ReceivePacket+0x92>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 80011da:	f107 0113 	add.w	r1, r7, #19
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	4832      	ldr	r0, [pc, #200]	; (80012ac <ReceivePacket+0x130>)
 80011e4:	f002 f98f 	bl	8003506 <HAL_UART_Receive>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <ReceivePacket+0x7e>
 80011ee:	7cfb      	ldrb	r3, [r7, #19]
 80011f0:	2b18      	cmp	r3, #24
 80011f2:	d102      	bne.n	80011fa <ReceivePacket+0x7e>
        {
          packet_size = 2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 80011f8:	e009      	b.n	800120e <ReceivePacket+0x92>
          status = HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	76fb      	strb	r3, [r7, #27]
        break;
 80011fe:	e006      	b.n	800120e <ReceivePacket+0x92>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 8001200:	2302      	movs	r3, #2
 8001202:	76fb      	strb	r3, [r7, #27]
        break;
 8001204:	e003      	b.n	800120e <ReceivePacket+0x92>
      default:
        status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	76fb      	strb	r3, [r7, #27]
        break;
 800120a:	e000      	b.n	800120e <ReceivePacket+0x92>
        break;
 800120c:	bf00      	nop
    }
    *p_data = char1;
 800120e:	7cfa      	ldrb	r2, [r7, #19]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b7f      	cmp	r3, #127	; 0x7f
 8001218:	d93f      	bls.n	800129a <ReceivePacket+0x11e>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1c99      	adds	r1, r3, #2
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	b29b      	uxth	r3, r3
 8001222:	3304      	adds	r3, #4
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4820      	ldr	r0, [pc, #128]	; (80012ac <ReceivePacket+0x130>)
 800122a:	f002 f96c 	bl	8003506 <HAL_UART_Receive>
 800122e:	4603      	mov	r3, r0
 8001230:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 8001232:	7efb      	ldrb	r3, [r7, #27]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d12e      	bne.n	8001296 <ReceivePacket+0x11a>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3302      	adds	r3, #2
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3303      	adds	r3, #3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	43db      	mvns	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	429a      	cmp	r2, r3
 800124a:	d004      	beq.n	8001256 <ReceivePacket+0xda>
        {
          packet_size = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	76fb      	strb	r3, [r7, #27]
 8001254:	e021      	b.n	800129a <ReceivePacket+0x11e>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	3305      	adds	r3, #5
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4413      	add	r3, r2
 8001274:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3304      	adds	r3, #4
 800127a:	69f9      	ldr	r1, [r7, #28]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f84a 	bl	8001316 <Cal_CRC16>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	4293      	cmp	r3, r2
 800128a:	d006      	beq.n	800129a <ReceivePacket+0x11e>
          {
            packet_size = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	76fb      	strb	r3, [r7, #27]
 8001294:	e001      	b.n	800129a <ReceivePacket+0x11e>
          }
        }
      }
      else
      {
        packet_size = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	601a      	str	r2, [r3, #0]
  return status;
 80012a0:	7efb      	ldrb	r3, [r7, #27]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000224 	.word	0x20000224

080012b0 <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	460a      	mov	r2, r1
 80012ba:	80fb      	strh	r3, [r7, #6]
 80012bc:	4613      	mov	r3, r2
 80012be:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 80012c4:	797b      	ldrb	r3, [r7, #5]
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <UpdateCRC16+0x38>
      ++crc;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3301      	adds	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <UpdateCRC16+0x4c>
      crc ^= 0x1021;
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	f241 0321 	movw	r3, #4129	; 0x1021
 80012f8:	4053      	eors	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0e2      	beq.n	80012cc <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	b29b      	uxth	r3, r3
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 800132c:	e00a      	b.n	8001344 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b298      	uxth	r0, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff ffb8 	bl	80012b0 <UpdateCRC16>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3f0      	bcc.n	800132e <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ffac 	bl	80012b0 <UpdateCRC16>
 8001358:	4603      	mov	r3, r0
 800135a:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	b29b      	uxth	r3, r3
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ffa4 	bl	80012b0 <UpdateCRC16>
 8001368:	4603      	mov	r3, r0
 800136a:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	b29b      	uxth	r3, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b092      	sub	sp, #72	; 0x48
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	643b      	str	r3, [r7, #64]	; 0x40
 8001384:	2300      	movs	r3, #0
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
 8001388:	2300      	movs	r3, #0
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
 // uint32_t flashdestination;
  uint32_t ramsource, filesize, packets_received;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp;
  COM_StatusTypeDef result = COM_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8001392:	4b86      	ldr	r3, [pc, #536]	; (80015ac <Ymodem_Receive+0x234>)
 8001394:	4a86      	ldr	r2, [pc, #536]	; (80015b0 <Ymodem_Receive+0x238>)
 8001396:	601a      	str	r2, [r3, #0]

  while ((session_done == 0) && (result == COM_OK))
 8001398:	e0fa      	b.n	8001590 <Ymodem_Receive+0x218>
  {
    packets_received = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
    file_done = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 80013a2:	e0ed      	b.n	8001580 <Ymodem_Receive+0x208>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 80013a4:	f107 0320 	add.w	r3, r7, #32
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4619      	mov	r1, r3
 80013ae:	4881      	ldr	r0, [pc, #516]	; (80015b4 <Ymodem_Receive+0x23c>)
 80013b0:	f7ff fee4 	bl	800117c <ReceivePacket>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <Ymodem_Receive+0x4a>
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	f000 80c1 	beq.w	8001542 <Ymodem_Receive+0x1ca>
 80013c0:	e0c9      	b.n	8001556 <Ymodem_Receive+0x1de>
      {
        case HAL_OK:
          errors = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <Ymodem_Receive+0x66>
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d10c      	bne.n	80013ea <Ymodem_Receive+0x72>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 80013d0:	2006      	movs	r0, #6
 80013d2:	f7ff fa21 	bl	8000818 <Serial_PutByte>
              result = COM_ABORT;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
              break;
 80013dc:	e0b0      	b.n	8001540 <Ymodem_Receive+0x1c8>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 80013de:	2006      	movs	r0, #6
 80013e0:	f7ff fa1a 	bl	8000818 <Serial_PutByte>
              file_done = 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 80013e8:	e0aa      	b.n	8001540 <Ymodem_Receive+0x1c8>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != (uint8_t)packets_received)
 80013ea:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <Ymodem_Receive+0x23c>)
 80013ec:	789a      	ldrb	r2, [r3, #2]
 80013ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d003      	beq.n	80013fe <Ymodem_Receive+0x86>
              {
                Serial_PutByte(NAK);
 80013f6:	2015      	movs	r0, #21
 80013f8:	f7ff fa0e 	bl	8000818 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 80013fc:	e09f      	b.n	800153e <Ymodem_Receive+0x1c6>
                if (packets_received == 0)
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001400:	2b00      	cmp	r3, #0
 8001402:	d177      	bne.n	80014f4 <Ymodem_Receive+0x17c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 8001404:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <Ymodem_Receive+0x23c>)
 8001406:	791b      	ldrb	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d06b      	beq.n	80014e4 <Ymodem_Receive+0x16c>
                    i = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 8001410:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <Ymodem_Receive+0x240>)
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8001414:	e008      	b.n	8001428 <Ymodem_Receive+0xb0>
                      aFileName[i++] = *file_ptr++;
 8001416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001418:	1c53      	adds	r3, r2, #1
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800141c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800141e:	1c59      	adds	r1, r3, #1
 8001420:	6479      	str	r1, [r7, #68]	; 0x44
 8001422:	7811      	ldrb	r1, [r2, #0]
 8001424:	4a65      	ldr	r2, [pc, #404]	; (80015bc <Ymodem_Receive+0x244>)
 8001426:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8001428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <Ymodem_Receive+0xbe>
 8001430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001432:	2b3f      	cmp	r3, #63	; 0x3f
 8001434:	d9ef      	bls.n	8001416 <Ymodem_Receive+0x9e>
                    aFileName[i++] = '\0';
 8001436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	647a      	str	r2, [r7, #68]	; 0x44
 800143c:	4a5f      	ldr	r2, [pc, #380]	; (80015bc <Ymodem_Receive+0x244>)
 800143e:	2100      	movs	r1, #0
 8001440:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	3301      	adds	r3, #1
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800144c:	e00b      	b.n	8001466 <Ymodem_Receive+0xee>
                      file_size[i++] = *file_ptr++;
 800144e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001450:	1c53      	adds	r3, r2, #1
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001456:	1c59      	adds	r1, r3, #1
 8001458:	6479      	str	r1, [r7, #68]	; 0x44
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001460:	440b      	add	r3, r1
 8001462:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b20      	cmp	r3, #32
 800146c:	d002      	beq.n	8001474 <Ymodem_Receive+0xfc>
 800146e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d9ec      	bls.n	800144e <Ymodem_Receive+0xd6>
                    file_size[i++] = '\0';
 8001474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	647a      	str	r2, [r7, #68]	; 0x44
 800147a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800147e:	4413      	add	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 8001486:	f107 021c 	add.w	r2, r7, #28
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f8ad 	bl	80005f0 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <Ymodem_Receive+0x248>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d914      	bls.n	80014ca <Ymodem_Receive+0x152>
                      tmp = CA;
 80014a0:	2318      	movs	r3, #24
 80014a2:	72fb      	strb	r3, [r7, #11]
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 80014a4:	f107 010b 	add.w	r1, r7, #11
 80014a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014ac:	2201      	movs	r2, #1
 80014ae:	4845      	ldr	r0, [pc, #276]	; (80015c4 <Ymodem_Receive+0x24c>)
 80014b0:	f001 ff98 	bl	80033e4 <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 80014b4:	f107 010b 	add.w	r1, r7, #11
 80014b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014bc:	2201      	movs	r2, #1
 80014be:	4841      	ldr	r0, [pc, #260]	; (80015c4 <Ymodem_Receive+0x24c>)
 80014c0:	f001 ff90 	bl	80033e4 <HAL_UART_Transmit>
                      result = COM_LIMIT;
 80014c4:	2305      	movs	r3, #5
 80014c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 80014ca:	4839      	ldr	r0, [pc, #228]	; (80015b0 <Ymodem_Receive+0x238>)
 80014cc:	f7ff f9ca 	bl	8000864 <FLASH_If_Erase>
                    *p_size = filesize;
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 80014d6:	2006      	movs	r0, #6
 80014d8:	f7ff f99e 	bl	8000818 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 80014dc:	2043      	movs	r0, #67	; 0x43
 80014de:	f7ff f99b 	bl	8000818 <Serial_PutByte>
 80014e2:	e027      	b.n	8001534 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(ACK);
 80014e4:	2006      	movs	r0, #6
 80014e6:	f7ff f997 	bl	8000818 <Serial_PutByte>
                    file_done = 1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 80014ee:	2301      	movs	r3, #1
 80014f0:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 80014f2:	e025      	b.n	8001540 <Ymodem_Receive+0x1c8>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <Ymodem_Receive+0x240>)
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)
 80014f8:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <Ymodem_Receive+0x234>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	461a      	mov	r2, r3
 8001504:	f7ff f9d4 	bl	80008b0 <FLASH_If_Write>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d109      	bne.n	8001522 <Ymodem_Receive+0x1aa>
                    flashdestination += packet_length;
 800150e:	4b27      	ldr	r3, [pc, #156]	; (80015ac <Ymodem_Receive+0x234>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	4413      	add	r3, r2
 8001516:	4a25      	ldr	r2, [pc, #148]	; (80015ac <Ymodem_Receive+0x234>)
 8001518:	6013      	str	r3, [r2, #0]
                    Serial_PutByte(ACK);
 800151a:	2006      	movs	r0, #6
 800151c:	f7ff f97c 	bl	8000818 <Serial_PutByte>
 8001520:	e008      	b.n	8001534 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(CA);
 8001522:	2018      	movs	r0, #24
 8001524:	f7ff f978 	bl	8000818 <Serial_PutByte>
                    Serial_PutByte(CA);
 8001528:	2018      	movs	r0, #24
 800152a:	f7ff f975 	bl	8000818 <Serial_PutByte>
                    result = COM_DATA;
 800152e:	2304      	movs	r3, #4
 8001530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                packets_received ++;
 8001534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001536:	3301      	adds	r3, #1
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
                session_begin = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800153e:	bf00      	nop
          }
          break;
 8001540:	e01e      	b.n	8001580 <Ymodem_Receive+0x208>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 8001542:	2018      	movs	r0, #24
 8001544:	f7ff f968 	bl	8000818 <Serial_PutByte>
          Serial_PutByte(CA);
 8001548:	2018      	movs	r0, #24
 800154a:	f7ff f965 	bl	8000818 <Serial_PutByte>
          result = COM_ABORT;
 800154e:	2302      	movs	r3, #2
 8001550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          break;
 8001554:	e014      	b.n	8001580 <Ymodem_Receive+0x208>
        default:
          if (session_begin > 0)
 8001556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <Ymodem_Receive+0x1ea>
          {
            errors ++;
 800155c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155e:	3301      	adds	r3, #1
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 8001562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001564:	2b05      	cmp	r3, #5
 8001566:	d907      	bls.n	8001578 <Ymodem_Receive+0x200>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 8001568:	2018      	movs	r0, #24
 800156a:	f7ff f955 	bl	8000818 <Serial_PutByte>
            Serial_PutByte(CA);
 800156e:	2018      	movs	r0, #24
 8001570:	f7ff f952 	bl	8000818 <Serial_PutByte>
            NVIC_SystemReset();
 8001574:	f7ff fdee 	bl	8001154 <__NVIC_SystemReset>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 8001578:	2043      	movs	r0, #67	; 0x43
 800157a:	f7ff f94d 	bl	8000818 <Serial_PutByte>
          }
          break;
 800157e:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 8001580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001582:	2b00      	cmp	r3, #0
 8001584:	d104      	bne.n	8001590 <Ymodem_Receive+0x218>
 8001586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800158a:	2b00      	cmp	r3, #0
 800158c:	f43f af0a 	beq.w	80013a4 <Ymodem_Receive+0x2c>
  while ((session_done == 0) && (result == COM_OK))
 8001590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d104      	bne.n	80015a0 <Ymodem_Receive+0x228>
 8001596:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800159a:	2b00      	cmp	r3, #0
 800159c:	f43f aefd 	beq.w	800139a <Ymodem_Receive+0x22>
      }
    }
  }
  return result;
 80015a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3748      	adds	r7, #72	; 0x48
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200006fc 	.word	0x200006fc
 80015b0:	08008000 	.word	0x08008000
 80015b4:	200002f4 	.word	0x200002f4
 80015b8:	200002f8 	.word	0x200002f8
 80015bc:	200002b4 	.word	0x200002b4
 80015c0:	000f8001 	.word	0x000f8001
 80015c4:	20000224 	.word	0x20000224

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015ce:	e003      	b.n	80015d8 <LoopCopyDataInit>

080015d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015d6:	3104      	adds	r1, #4

080015d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015e0:	d3f6      	bcc.n	80015d0 <CopyDataInit>
  ldr  r2, =_sbss
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015e4:	e002      	b.n	80015ec <LoopFillZerobss>

080015e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015e8:	f842 3b04 	str.w	r3, [r2], #4

080015ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015f0:	d3f9      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f2:	f7ff fd79 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f002 fedd 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff fa35 	bl	8000a68 <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001604:	08006218 	.word	0x08006218
  ldr  r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800160c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001610:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001614:	20000724 	.word	0x20000724

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>

0800161a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161e:	2003      	movs	r0, #3
 8001620:	f000 f94a 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001624:	2000      	movs	r0, #0
 8001626:	f000 f805 	bl	8001634 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800162a:	f7ff fc89 	bl	8000f40 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f965 	bl	8001922 <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f000 f92d 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000004 	.word	0x20000004
 800168c:	2000000c 	.word	0x2000000c
 8001690:	20000008 	.word	0x20000008

08001694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	20000700 	.word	0x20000700

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000700 	.word	0x20000700

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff ffee 	bl	80016bc <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_Delay+0x40>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016fa:	bf00      	nop
 80016fc:	f7ff ffde 	bl	80016bc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000000c 	.word	0x2000000c

08001718 <__NVIC_SetPriorityGrouping>:
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	4313      	orrs	r3, r2
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00
 800175c:	05fa0000 	.word	0x05fa0000

08001760 <__NVIC_GetPriorityGrouping>:
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_EnableIRQ>:
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0b      	blt.n	80017a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <__NVIC_EnableIRQ+0x38>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff29 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff3e 	bl	8001760 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff8e 	bl	800180c <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff31 	bl	800177c <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d004      	beq.n	8001958 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e00c      	b.n	8001972 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2205      	movs	r2, #5
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0201 	bic.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_FLASH_Program+0xb0>)
 8001994:	7d1b      	ldrb	r3, [r3, #20]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_FLASH_Program+0x1e>
 800199a:	2302      	movs	r3, #2
 800199c:	e043      	b.n	8001a26 <HAL_FLASH_Program+0xa6>
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_FLASH_Program+0xb0>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019a8:	f000 f868 	bl	8001a7c <FLASH_WaitForLastOperation>
 80019ac:	4603      	mov	r3, r0
 80019ae:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d133      	bne.n	8001a1e <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d823      	bhi.n	8001a04 <HAL_FLASH_Program+0x84>
 80019bc:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <HAL_FLASH_Program+0x44>)
 80019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019e1 	.word	0x080019e1
 80019cc:	080019ed 	.word	0x080019ed
 80019d0:	080019f9 	.word	0x080019f9
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80019d4:	783b      	ldrb	r3, [r7, #0]
 80019d6:	4619      	mov	r1, r3
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f000 f909 	bl	8001bf0 <FLASH_Program_Byte>
        break;
 80019de:	e012      	b.n	8001a06 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	4619      	mov	r1, r3
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	f000 f8dd 	bl	8001ba4 <FLASH_Program_HalfWord>
        break;
 80019ea:	e00c      	b.n	8001a06 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4619      	mov	r1, r3
 80019f0:	68b8      	ldr	r0, [r7, #8]
 80019f2:	f000 f8b3 	bl	8001b5c <FLASH_Program_Word>
        break;
 80019f6:	e006      	b.n	8001a06 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80019f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	f000 f87d 	bl	8001afc <FLASH_Program_DoubleWord>
        break;
 8001a02:	e000      	b.n	8001a06 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8001a04:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a0a:	f000 f837 	bl	8001a7c <FLASH_WaitForLastOperation>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_FLASH_Program+0xb4>)
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_FLASH_Program+0xb4>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_FLASH_Program+0xb0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	751a      	strb	r2, [r3, #20]

  return status;
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000704 	.word	0x20000704
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_FLASH_Unlock+0x38>)
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da0b      	bge.n	8001a62 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_FLASH_Unlock+0x38>)
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <HAL_FLASH_Unlock+0x3c>)
 8001a4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_FLASH_Unlock+0x38>)
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <HAL_FLASH_Unlock+0x40>)
 8001a54:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_FLASH_Unlock+0x38>)
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da01      	bge.n	8001a62 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a62:	79fb      	ldrb	r3, [r7, #7]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40023c00 	.word	0x40023c00
 8001a74:	45670123 	.word	0x45670123
 8001a78:	cdef89ab 	.word	0xcdef89ab

08001a7c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <FLASH_WaitForLastOperation+0x78>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a8e:	f7ff fe15 	bl	80016bc <HAL_GetTick>
 8001a92:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a94:	e010      	b.n	8001ab8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d00c      	beq.n	8001ab8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <FLASH_WaitForLastOperation+0x38>
 8001aa4:	f7ff fe0a 	bl	80016bc <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d201      	bcs.n	8001ab8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e019      	b.n	8001aec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <FLASH_WaitForLastOperation+0x7c>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e8      	bne.n	8001a96 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <FLASH_WaitForLastOperation+0x7c>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ad0:	f000 f8b2 	bl	8001c38 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e009      	b.n	8001aec <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <FLASH_WaitForLastOperation+0x7c>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <FLASH_WaitForLastOperation+0x7c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
  
}  
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000704 	.word	0x20000704
 8001af8:	40023c00 	.word	0x40023c00

08001afc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001afc:	b490      	push	{r4, r7}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <FLASH_Program_DoubleWord+0x5c>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <FLASH_Program_DoubleWord+0x5c>)
 8001b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <FLASH_Program_DoubleWord+0x5c>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <FLASH_Program_DoubleWord+0x5c>)
 8001b1a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <FLASH_Program_DoubleWord+0x5c>)
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <FLASH_Program_DoubleWord+0x5c>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	f04f 0400 	mov.w	r4, #0
 8001b3e:	0013      	movs	r3, r2
 8001b40:	2400      	movs	r4, #0
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	3204      	adds	r2, #4
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc90      	pop	{r4, r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <FLASH_Program_Word+0x44>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <FLASH_Program_Word+0x44>)
 8001b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <FLASH_Program_Word+0x44>)
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <FLASH_Program_Word+0x44>)
 8001b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <FLASH_Program_Word+0x44>)
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <FLASH_Program_Word+0x44>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <FLASH_Program_HalfWord+0x48>)
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <FLASH_Program_HalfWord+0x48>)
 8001bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <FLASH_Program_HalfWord+0x48>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <FLASH_Program_HalfWord+0x48>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <FLASH_Program_HalfWord+0x48>)
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <FLASH_Program_HalfWord+0x48>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <FLASH_Program_Byte+0x44>)
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <FLASH_Program_Byte+0x44>)
 8001c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <FLASH_Program_Byte+0x44>)
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <FLASH_Program_Byte+0x44>)
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <FLASH_Program_Byte+0x44>)
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <FLASH_Program_Byte+0x44>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	78fa      	ldrb	r2, [r7, #3]
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <FLASH_SetErrorCode+0x8c>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f043 0320 	orr.w	r3, r3, #32
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001c52:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <FLASH_SetErrorCode+0x8c>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f043 0310 	orr.w	r3, r3, #16
 8001c68:	4a17      	ldr	r2, [pc, #92]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001c6a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <FLASH_SetErrorCode+0x8c>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f043 0308 	orr.w	r3, r3, #8
 8001c80:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001c82:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <FLASH_SetErrorCode+0x8c>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001c9a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <FLASH_SetErrorCode+0x8c>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <FLASH_SetErrorCode+0x90>)
 8001cb2:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <FLASH_SetErrorCode+0x8c>)
 8001cb6:	22f2      	movs	r2, #242	; 0xf2
 8001cb8:	60da      	str	r2, [r3, #12]
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40023c00 	.word	0x40023c00
 8001cc8:	20000704 	.word	0x20000704

08001ccc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_FLASHEx_Erase+0xd4>)
 8001ce0:	7d1b      	ldrb	r3, [r3, #20]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_FLASHEx_Erase+0x1e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e056      	b.n	8001d98 <HAL_FLASHEx_Erase+0xcc>
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_FLASHEx_Erase+0xd4>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cf4:	f7ff fec2 	bl	8001a7c <FLASH_WaitForLastOperation>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d146      	bne.n	8001d90 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d115      	bne.n	8001d3e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f000 f844 	bl	8001dac <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d28:	f7ff fea8 	bl	8001a7c <FLASH_WaitForLastOperation>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_FLASHEx_Erase+0xd8>)
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	491b      	ldr	r1, [pc, #108]	; (8001da4 <HAL_FLASHEx_Erase+0xd8>)
 8001d36:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_FLASHEx_Erase+0xdc>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	610b      	str	r3, [r1, #16]
 8001d3c:	e028      	b.n	8001d90 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	e01c      	b.n	8001d80 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	68b8      	ldr	r0, [r7, #8]
 8001d50:	f000 f866 	bl	8001e20 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d58:	f7ff fe90 	bl	8001a7c <FLASH_WaitForLastOperation>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_FLASHEx_Erase+0xd8>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_FLASHEx_Erase+0xd8>)
 8001d66:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001d6a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	601a      	str	r2, [r3, #0]
          break;
 8001d78:	e00a      	b.n	8001d90 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4413      	add	r3, r2
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3da      	bcc.n	8001d46 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_FLASHEx_Erase+0xd4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	751a      	strb	r2, [r3, #20]

  return status;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000704 	.word	0x20000704
 8001da4:	40023c00 	.word	0x40023c00
 8001da8:	ffff7ffb 	.word	0xffff7ffb

08001dac <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <FLASH_MassErase+0x70>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <FLASH_MassErase+0x70>)
 8001dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc2:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d107      	bne.n	8001dda <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <FLASH_MassErase+0x70>)
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	4913      	ldr	r1, [pc, #76]	; (8001e1c <FLASH_MassErase+0x70>)
 8001dd0:	f248 0304 	movw	r3, #32772	; 0x8004
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	610b      	str	r3, [r1, #16]
 8001dd8:	e00f      	b.n	8001dfa <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d106      	bne.n	8001dee <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <FLASH_MassErase+0x70>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <FLASH_MassErase+0x70>)
 8001de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dea:	6113      	str	r3, [r2, #16]
 8001dec:	e005      	b.n	8001dfa <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <FLASH_MassErase+0x70>)
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <FLASH_MassErase+0x70>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <FLASH_MassErase+0x70>)
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	4313      	orrs	r3, r2
 8001e04:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <FLASH_MassErase+0x70>)
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0a:	6113      	str	r3, [r2, #16]
 8001e0c:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e010      	b.n	8001e5e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d103      	bne.n	8001e4a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e009      	b.n	8001e5e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d103      	bne.n	8001e58 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e002      	b.n	8001e5e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e5c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0b      	cmp	r3, #11
 8001e62:	d902      	bls.n	8001e6a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	4910      	ldr	r1, [pc, #64]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001e88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <FLASH_Erase_Sector+0x9c>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eaa:	6113      	str	r3, [r2, #16]
 8001eac:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	e175      	b.n	80021cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8164 	bne.w	80021c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x4e>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d123      	bne.n	8001f56 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	69b9      	ldr	r1, [r7, #24]
 8001f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0203 	and.w	r2, r3, #3
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d00b      	beq.n	8001faa <HAL_GPIO_Init+0xea>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f9e:	2b11      	cmp	r3, #17
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d130      	bne.n	800200c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 0201 	and.w	r2, r3, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80be 	beq.w	80021c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b65      	ldr	r3, [pc, #404]	; (80021e0 <HAL_GPIO_Init+0x320>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a64      	ldr	r2, [pc, #400]	; (80021e0 <HAL_GPIO_Init+0x320>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b62      	ldr	r3, [pc, #392]	; (80021e0 <HAL_GPIO_Init+0x320>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002062:	4a60      	ldr	r2, [pc, #384]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a57      	ldr	r2, [pc, #348]	; (80021e8 <HAL_GPIO_Init+0x328>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d037      	beq.n	80020fe <HAL_GPIO_Init+0x23e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a56      	ldr	r2, [pc, #344]	; (80021ec <HAL_GPIO_Init+0x32c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d031      	beq.n	80020fa <HAL_GPIO_Init+0x23a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <HAL_GPIO_Init+0x330>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d02b      	beq.n	80020f6 <HAL_GPIO_Init+0x236>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a54      	ldr	r2, [pc, #336]	; (80021f4 <HAL_GPIO_Init+0x334>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d025      	beq.n	80020f2 <HAL_GPIO_Init+0x232>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a53      	ldr	r2, [pc, #332]	; (80021f8 <HAL_GPIO_Init+0x338>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01f      	beq.n	80020ee <HAL_GPIO_Init+0x22e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_GPIO_Init+0x33c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d019      	beq.n	80020ea <HAL_GPIO_Init+0x22a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a51      	ldr	r2, [pc, #324]	; (8002200 <HAL_GPIO_Init+0x340>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_GPIO_Init+0x226>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_GPIO_Init+0x344>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00d      	beq.n	80020e2 <HAL_GPIO_Init+0x222>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4f      	ldr	r2, [pc, #316]	; (8002208 <HAL_GPIO_Init+0x348>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <HAL_GPIO_Init+0x21e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4e      	ldr	r2, [pc, #312]	; (800220c <HAL_GPIO_Init+0x34c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d101      	bne.n	80020da <HAL_GPIO_Init+0x21a>
 80020d6:	2309      	movs	r3, #9
 80020d8:	e012      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020da:	230a      	movs	r3, #10
 80020dc:	e010      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020de:	2308      	movs	r3, #8
 80020e0:	e00e      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020e2:	2307      	movs	r3, #7
 80020e4:	e00c      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020e6:	2306      	movs	r3, #6
 80020e8:	e00a      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020fe:	2300      	movs	r3, #0
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002110:	4934      	ldr	r1, [pc, #208]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211e:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <HAL_GPIO_Init+0x350>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002142:	4a33      	ldr	r2, [pc, #204]	; (8002210 <HAL_GPIO_Init+0x350>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002148:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_GPIO_Init+0x350>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216c:	4a28      	ldr	r2, [pc, #160]	; (8002210 <HAL_GPIO_Init+0x350>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_GPIO_Init+0x350>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002196:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <HAL_GPIO_Init+0x350>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_GPIO_Init+0x350>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c0:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_GPIO_Init+0x350>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	f67f ae86 	bls.w	8001ee0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	3724      	adds	r7, #36	; 0x24
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40013800 	.word	0x40013800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40021400 	.word	0x40021400
 8002200:	40021800 	.word	0x40021800
 8002204:	40021c00 	.word	0x40021c00
 8002208:	40022000 	.word	0x40022000
 800220c:	40022400 	.word	0x40022400
 8002210:	40013c00 	.word	0x40013c00

08002214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
 8002220:	4613      	mov	r3, r2
 8002222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002224:	787b      	ldrb	r3, [r7, #1]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002230:	e003      	b.n	800223a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	041a      	lsls	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	401a      	ands	r2, r3
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	429a      	cmp	r2, r3
 800225e:	d104      	bne.n	800226a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002260:	887b      	ldrh	r3, [r7, #2]
 8002262:	041a      	lsls	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002268:	e002      	b.n	8002270 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	619a      	str	r2, [r3, #24]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e25e      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8087 	beq.w	80023ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a0:	4b96      	ldr	r3, [pc, #600]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d00c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ac:	4b93      	ldr	r3, [pc, #588]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d112      	bne.n	80022de <HAL_RCC_OscConfig+0x62>
 80022b8:	4b90      	ldr	r3, [pc, #576]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c4:	d10b      	bne.n	80022de <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c6:	4b8d      	ldr	r3, [pc, #564]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d06c      	beq.n	80023ac <HAL_RCC_OscConfig+0x130>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d168      	bne.n	80023ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e238      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x7a>
 80022e8:	4b84      	ldr	r3, [pc, #528]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a83      	ldr	r2, [pc, #524]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80022ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	e02e      	b.n	8002354 <HAL_RCC_OscConfig+0xd8>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x9c>
 80022fe:	4b7f      	ldr	r3, [pc, #508]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7e      	ldr	r2, [pc, #504]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b7c      	ldr	r3, [pc, #496]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7b      	ldr	r2, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xd8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0xc0>
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b73      	ldr	r3, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a72      	ldr	r2, [pc, #456]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xd8>
 800233c:	4b6f      	ldr	r3, [pc, #444]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6e      	ldr	r2, [pc, #440]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b6c      	ldr	r3, [pc, #432]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6b      	ldr	r2, [pc, #428]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff f9ae 	bl	80016bc <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff f9aa 	bl	80016bc <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1ec      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b61      	ldr	r3, [pc, #388]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xe8>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff f99a 	bl	80016bc <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238c:	f7ff f996 	bl	80016bc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1d8      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x110>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d069      	beq.n	800248e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ba:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x190>
 80023d2:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x17a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1ac      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	493d      	ldr	r1, [pc, #244]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e040      	b.n	800248e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d023      	beq.n	800245c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a38      	ldr	r2, [pc, #224]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f94c 	bl	80016bc <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002428:	f7ff f948 	bl	80016bc <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e18a      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4929      	ldr	r1, [pc, #164]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
 800245a:	e018      	b.n	800248e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a26      	ldr	r2, [pc, #152]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff f928 	bl	80016bc <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002470:	f7ff f924 	bl	80016bc <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e166      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d038      	beq.n	800250c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d019      	beq.n	80024d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7ff f905 	bl	80016bc <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b6:	f7ff f901 	bl	80016bc <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e143      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80024ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x23a>
 80024d4:	e01a      	b.n	800250c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80024d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024da:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_RCC_OscConfig+0x280>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e2:	f7ff f8eb 	bl	80016bc <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ea:	f7ff f8e7 	bl	80016bc <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d903      	bls.n	8002500 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e129      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
 80024fc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	4b95      	ldr	r3, [pc, #596]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ee      	bne.n	80024ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a4 	beq.w	8002662 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251a:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a8b      	ldr	r2, [pc, #556]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b89      	ldr	r3, [pc, #548]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002542:	4b86      	ldr	r3, [pc, #536]	; (800275c <HAL_RCC_OscConfig+0x4e0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800254e:	4b83      	ldr	r3, [pc, #524]	; (800275c <HAL_RCC_OscConfig+0x4e0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a82      	ldr	r2, [pc, #520]	; (800275c <HAL_RCC_OscConfig+0x4e0>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7ff f8af 	bl	80016bc <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7ff f8ab 	bl	80016bc <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	; 0x64
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0ed      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002574:	4b79      	ldr	r3, [pc, #484]	; (800275c <HAL_RCC_OscConfig+0x4e0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x31a>
 8002588:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6713      	str	r3, [r2, #112]	; 0x70
 8002594:	e02d      	b.n	80025f2 <HAL_RCC_OscConfig+0x376>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x33c>
 800259e:	4b6e      	ldr	r3, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a6d      	ldr	r2, [pc, #436]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
 80025aa:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a6a      	ldr	r2, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
 80025b6:	e01c      	b.n	80025f2 <HAL_RCC_OscConfig+0x376>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d10c      	bne.n	80025da <HAL_RCC_OscConfig+0x35e>
 80025c0:	4b65      	ldr	r3, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
 80025cc:	4b62      	ldr	r3, [pc, #392]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	4a61      	ldr	r2, [pc, #388]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	; 0x70
 80025d8:	e00b      	b.n	80025f2 <HAL_RCC_OscConfig+0x376>
 80025da:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a5e      	ldr	r2, [pc, #376]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
 80025e6:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a5b      	ldr	r2, [pc, #364]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d015      	beq.n	8002626 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7ff f85f 	bl	80016bc <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7ff f85b 	bl	80016bc <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e09b      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ee      	beq.n	8002602 <HAL_RCC_OscConfig+0x386>
 8002624:	e014      	b.n	8002650 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7ff f849 	bl	80016bc <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7ff f845 	bl	80016bc <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e085      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	4b44      	ldr	r3, [pc, #272]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ee      	bne.n	800262e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b40      	ldr	r3, [pc, #256]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d071      	beq.n	800274e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800266a:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b08      	cmp	r3, #8
 8002674:	d069      	beq.n	800274a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d14b      	bne.n	8002716 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a35      	ldr	r2, [pc, #212]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 8002684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7ff f817 	bl	80016bc <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002692:	f7ff f813 	bl	80016bc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e055      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f0      	bne.n	8002692 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	019b      	lsls	r3, r3, #6
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	3b01      	subs	r3, #1
 80026ca:	041b      	lsls	r3, r3, #16
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	061b      	lsls	r3, r3, #24
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	071b      	lsls	r3, r3, #28
 80026dc:	491e      	ldr	r1, [pc, #120]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 80026e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe ffe5 	bl	80016bc <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe ffe1 	bl	80016bc <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e023      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x47a>
 8002714:	e01b      	b.n	800274e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800271c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe ffcb 	bl	80016bc <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe ffc7 	bl	80016bc <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e009      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_OscConfig+0x4dc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x4ae>
 8002748:	e001      	b.n	800274e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	40007000 	.word	0x40007000

08002760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0ce      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b69      	ldr	r3, [pc, #420]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d910      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 020f 	bic.w	r2, r3, #15
 800278e:	4964      	ldr	r1, [pc, #400]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b6      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b58      	ldr	r3, [pc, #352]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a51      	ldr	r2, [pc, #324]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494c      	ldr	r1, [pc, #304]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d040      	beq.n	8002884 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d115      	bne.n	8002842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07d      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e071      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e069      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4b38      	ldr	r3, [pc, #224]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4935      	ldr	r1, [pc, #212]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe ff32 	bl	80016bc <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7fe ff2e 	bl	80016bc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e051      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 020c 	and.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d1eb      	bne.n	800285c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d210      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 020f 	bic.w	r2, r3, #15
 800289a:	4921      	ldr	r1, [pc, #132]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e030      	b.n	8002916 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4915      	ldr	r1, [pc, #84]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f81d 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028f6:	4601      	mov	r1, r0
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	fa21 f303 	lsr.w	r3, r1, r3
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_RCC_ClockConfig+0x1cc>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fe90 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00
 8002924:	40023800 	.word	0x40023800
 8002928:	08005fc4 	.word	0x08005fc4
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	2300      	movs	r3, #0
 8002940:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002946:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b04      	cmp	r3, #4
 8002950:	d007      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x32>
 8002952:	2b08      	cmp	r3, #8
 8002954:	d008      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x38>
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 808d 	bne.w	8002a76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 800295e:	60bb      	str	r3, [r7, #8]
       break;
 8002960:	e08c      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 8002964:	60bb      	str	r3, [r7, #8]
      break;
 8002966:	e089      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002968:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002970:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002972:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d023      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297e:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	f04f 0400 	mov.w	r4, #0
 8002988:	f240 11ff 	movw	r1, #511	; 0x1ff
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	ea03 0501 	and.w	r5, r3, r1
 8002994:	ea04 0602 	and.w	r6, r4, r2
 8002998:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 800299a:	fb02 f106 	mul.w	r1, r2, r6
 800299e:	2200      	movs	r2, #0
 80029a0:	fb02 f205 	mul.w	r2, r2, r5
 80029a4:	440a      	add	r2, r1
 80029a6:	493a      	ldr	r1, [pc, #232]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x160>)
 80029a8:	fba5 0101 	umull	r0, r1, r5, r1
 80029ac:	1853      	adds	r3, r2, r1
 80029ae:	4619      	mov	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f04f 0400 	mov.w	r4, #0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	f7fd fc45 	bl	8000248 <__aeabi_uldivmod>
 80029be:	4603      	mov	r3, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e049      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f04f 0400 	mov.w	r4, #0
 80029d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	ea03 0501 	and.w	r5, r3, r1
 80029dc:	ea04 0602 	and.w	r6, r4, r2
 80029e0:	4629      	mov	r1, r5
 80029e2:	4632      	mov	r2, r6
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f04f 0400 	mov.w	r4, #0
 80029ec:	0154      	lsls	r4, r2, #5
 80029ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f2:	014b      	lsls	r3, r1, #5
 80029f4:	4619      	mov	r1, r3
 80029f6:	4622      	mov	r2, r4
 80029f8:	1b49      	subs	r1, r1, r5
 80029fa:	eb62 0206 	sbc.w	r2, r2, r6
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	0194      	lsls	r4, r2, #6
 8002a08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a0c:	018b      	lsls	r3, r1, #6
 8002a0e:	1a5b      	subs	r3, r3, r1
 8002a10:	eb64 0402 	sbc.w	r4, r4, r2
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	00e2      	lsls	r2, r4, #3
 8002a1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a22:	00d9      	lsls	r1, r3, #3
 8002a24:	460b      	mov	r3, r1
 8002a26:	4614      	mov	r4, r2
 8002a28:	195b      	adds	r3, r3, r5
 8002a2a:	eb44 0406 	adc.w	r4, r4, r6
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	02a2      	lsls	r2, r4, #10
 8002a38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a3c:	0299      	lsls	r1, r3, #10
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	4621      	mov	r1, r4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fd fbfa 	bl	8000248 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	3301      	adds	r3, #1
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	60bb      	str	r3, [r7, #8]
      break;
 8002a74:	e002      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a78:	60bb      	str	r3, [r7, #8]
      break;
 8002a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	00f42400 	.word	0x00f42400
 8002a90:	017d7840 	.word	0x017d7840

08002a94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000004 	.word	0x20000004

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08005fd4 	.word	0x08005fd4

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffdc 	bl	8002a94 <HAL_RCC_GetHCLKFreq>
 8002adc:	4601      	mov	r1, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08005fd4 	.word	0x08005fd4

08002afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d012      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b24:	4b69      	ldr	r3, [pc, #420]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a68      	ldr	r2, [pc, #416]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b2e:	6093      	str	r3, [r2, #8]
 8002b30:	4b66      	ldr	r3, [pc, #408]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b38:	4964      	ldr	r1, [pc, #400]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d017      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b56:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	4959      	ldr	r1, [pc, #356]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b74:	d101      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d017      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b92:	4b4e      	ldr	r3, [pc, #312]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	494a      	ldr	r1, [pc, #296]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 808b 	beq.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	4a39      	ldr	r2, [pc, #228]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6413      	str	r3, [r2, #64]	; 0x40
 8002bec:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a34      	ldr	r2, [pc, #208]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe fd5a 	bl	80016bc <HAL_GetTick>
 8002c08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fe fd56 	bl	80016bc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e38d      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d035      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d02e      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c52:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c6a:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d114      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fd1e 	bl	80016bc <HAL_GetTick>
 8002c80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe fd1a 	bl	80016bc <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e34f      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0ee      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb2:	d111      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	4901      	ldr	r1, [pc, #4]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	0ffffcff 	.word	0x0ffffcff
 8002cd8:	4bb3      	ldr	r3, [pc, #716]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4ab2      	ldr	r2, [pc, #712]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ce2:	6093      	str	r3, [r2, #8]
 8002ce4:	4bb0      	ldr	r3, [pc, #704]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	49ad      	ldr	r1, [pc, #692]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d02:	4ba9      	ldr	r3, [pc, #676]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d08:	4aa7      	ldr	r2, [pc, #668]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d12:	4ba5      	ldr	r3, [pc, #660]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	49a2      	ldr	r1, [pc, #648]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d30:	4b9d      	ldr	r3, [pc, #628]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d3e:	499a      	ldr	r1, [pc, #616]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d52:	4b95      	ldr	r3, [pc, #596]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d60:	4991      	ldr	r1, [pc, #580]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d74:	4b8c      	ldr	r3, [pc, #560]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d82:	4989      	ldr	r1, [pc, #548]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d96:	4b84      	ldr	r3, [pc, #528]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4980      	ldr	r1, [pc, #512]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002db8:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4978      	ldr	r1, [pc, #480]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dda:	4b73      	ldr	r3, [pc, #460]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	f023 020c 	bic.w	r2, r3, #12
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de8:	496f      	ldr	r1, [pc, #444]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	4967      	ldr	r1, [pc, #412]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e1e:	4b62      	ldr	r3, [pc, #392]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2c:	495e      	ldr	r1, [pc, #376]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e40:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	4956      	ldr	r1, [pc, #344]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	494d      	ldr	r1, [pc, #308]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	4945      	ldr	r1, [pc, #276]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ea6:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb4:	493c      	ldr	r1, [pc, #240]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ec8:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed6:	4934      	ldr	r1, [pc, #208]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d011      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eea:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef8:	492b      	ldr	r1, [pc, #172]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f08:	d101      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	491b      	ldr	r1, [pc, #108]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f4c:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5c:	4912      	ldr	r1, [pc, #72]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f80:	4909      	ldr	r1, [pc, #36]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00f      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa4:	e002      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	4985      	ldr	r1, [pc, #532]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00b      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fc0:	4b80      	ldr	r3, [pc, #512]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd0:	497c      	ldr	r1, [pc, #496]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d005      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fe6:	f040 80d6 	bne.w	8003196 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a75      	ldr	r2, [pc, #468]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ff0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff6:	f7fe fb61 	bl	80016bc <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ffe:	f7fe fb5d 	bl	80016bc <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b64      	cmp	r3, #100	; 0x64
 800300a:	d901      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e194      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003010:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d021      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11d      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003030:	4b64      	ldr	r3, [pc, #400]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003036:	0c1b      	lsrs	r3, r3, #16
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800303e:	4b61      	ldr	r3, [pc, #388]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003044:	0e1b      	lsrs	r3, r3, #24
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	019a      	lsls	r2, r3, #6
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	061b      	lsls	r3, r3, #24
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	071b      	lsls	r3, r3, #28
 8003064:	4957      	ldr	r1, [pc, #348]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d02e      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003096:	d129      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003098:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800309a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ac:	0f1b      	lsrs	r3, r3, #28
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	019a      	lsls	r2, r3, #6
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	431a      	orrs	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	071b      	lsls	r3, r3, #28
 80030cc:	493d      	ldr	r1, [pc, #244]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030d4:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030da:	f023 021f 	bic.w	r2, r3, #31
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	3b01      	subs	r3, #1
 80030e4:	4937      	ldr	r1, [pc, #220]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01d      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fe:	0e1b      	lsrs	r3, r3, #24
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003106:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310c:	0f1b      	lsrs	r3, r3, #28
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	019a      	lsls	r2, r3, #6
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	431a      	orrs	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	071b      	lsls	r3, r3, #28
 800312c:	4925      	ldr	r1, [pc, #148]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d011      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	019a      	lsls	r2, r3, #6
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	041b      	lsls	r3, r3, #16
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	061b      	lsls	r3, r3, #24
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	071b      	lsls	r3, r3, #28
 800315c:	4919      	ldr	r1, [pc, #100]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800316a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800316e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fe faa4 	bl	80016bc <HAL_GetTick>
 8003174:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003178:	f7fe faa0 	bl	80016bc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0d7      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b01      	cmp	r3, #1
 800319a:	f040 80cd 	bne.w	8003338 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031aa:	f7fe fa87 	bl	80016bc <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031b2:	f7fe fa83 	bl	80016bc <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	; 0x64
 80031be:	d903      	bls.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0ba      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80031c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031c8:	4b5e      	ldr	r3, [pc, #376]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d4:	d0ed      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02e      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d12a      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031fe:	4b51      	ldr	r3, [pc, #324]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800320c:	4b4d      	ldr	r3, [pc, #308]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	0f1b      	lsrs	r3, r3, #28
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	019a      	lsls	r2, r3, #6
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	041b      	lsls	r3, r3, #16
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	071b      	lsls	r3, r3, #28
 8003232:	4944      	ldr	r1, [pc, #272]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800323a:	4b42      	ldr	r3, [pc, #264]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800323c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003240:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	3b01      	subs	r3, #1
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	493d      	ldr	r1, [pc, #244]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d022      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003268:	d11d      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800326a:	4b36      	ldr	r3, [pc, #216]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	0e1b      	lsrs	r3, r3, #24
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003278:	4b32      	ldr	r3, [pc, #200]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	0f1b      	lsrs	r3, r3, #28
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	019a      	lsls	r2, r3, #6
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	061b      	lsls	r3, r3, #24
 8003298:	431a      	orrs	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	071b      	lsls	r3, r3, #28
 800329e:	4929      	ldr	r1, [pc, #164]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d028      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	0e1b      	lsrs	r3, r3, #24
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032c0:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	0c1b      	lsrs	r3, r3, #16
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	019a      	lsls	r2, r3, #6
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	431a      	orrs	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	071b      	lsls	r3, r3, #28
 80032e6:	4917      	ldr	r1, [pc, #92]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	4911      	ldr	r1, [pc, #68]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0e      	ldr	r2, [pc, #56]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003310:	f7fe f9d4 	bl	80016bc <HAL_GetTick>
 8003314:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003318:	f7fe f9d0 	bl	80016bc <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e007      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003336:	d1ef      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e040      	b.n	80033dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fe0c 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	; 0x24
 8003374:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fb5c 	bl	8003a44 <UART_SetConfig>
 800338c:	4603      	mov	r3, r0
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e022      	b.n	80033dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fdf4 	bl	8003f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033c2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fe7b 	bl	80040d0 <UART_CheckIdleState>
 80033da:	4603      	mov	r3, r0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	; 0x28
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d17f      	bne.n	80034fc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Transmit+0x24>
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e078      	b.n	80034fe <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_UART_Transmit+0x36>
 8003416:	2302      	movs	r3, #2
 8003418:	e071      	b.n	80034fe <HAL_UART_Transmit+0x11a>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2221      	movs	r2, #33	; 0x21
 800342c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800342e:	f7fe f945 	bl	80016bc <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344c:	d108      	bne.n	8003460 <HAL_UART_Transmit+0x7c>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	e003      	b.n	8003468 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003468:	e02c      	b.n	80034c4 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	2180      	movs	r1, #128	; 0x80
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fe5a 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e03c      	b.n	80034fe <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	3302      	adds	r3, #2
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	e007      	b.n	80034b2 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	3301      	adds	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1cc      	bne.n	800346a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2200      	movs	r2, #0
 80034d8:	2140      	movs	r1, #64	; 0x40
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 fe27 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e009      	b.n	80034fe <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b08a      	sub	sp, #40	; 0x28
 800350a:	af02      	add	r7, sp, #8
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800351a:	2b20      	cmp	r3, #32
 800351c:	f040 80ba 	bne.w	8003694 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_UART_Receive+0x26>
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b2      	b.n	8003696 <HAL_UART_Receive+0x190>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_UART_Receive+0x38>
 800353a:	2302      	movs	r3, #2
 800353c:	e0ab      	b.n	8003696 <HAL_UART_Receive+0x190>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2222      	movs	r2, #34	; 0x22
 8003550:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003552:	f7fe f8b3 	bl	80016bc <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d10e      	bne.n	8003590 <HAL_UART_Receive+0x8a>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_UART_Receive+0x80>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003584:	e02d      	b.n	80035e2 <HAL_UART_Receive+0xdc>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	22ff      	movs	r2, #255	; 0xff
 800358a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800358e:	e028      	b.n	80035e2 <HAL_UART_Receive+0xdc>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10d      	bne.n	80035b4 <HAL_UART_Receive+0xae>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <HAL_UART_Receive+0xa4>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	22ff      	movs	r2, #255	; 0xff
 80035a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035a8:	e01b      	b.n	80035e2 <HAL_UART_Receive+0xdc>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	227f      	movs	r2, #127	; 0x7f
 80035ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035b2:	e016      	b.n	80035e2 <HAL_UART_Receive+0xdc>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035bc:	d10d      	bne.n	80035da <HAL_UART_Receive+0xd4>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <HAL_UART_Receive+0xca>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	227f      	movs	r2, #127	; 0x7f
 80035ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ce:	e008      	b.n	80035e2 <HAL_UART_Receive+0xdc>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	223f      	movs	r2, #63	; 0x3f
 80035d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035d8:	e003      	b.n	80035e2 <HAL_UART_Receive+0xdc>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80035e8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	d108      	bne.n	8003606 <HAL_UART_Receive+0x100>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e003      	b.n	800360e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800360e:	e032      	b.n	8003676 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2200      	movs	r2, #0
 8003618:	2120      	movs	r1, #32
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fd87 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e035      	b.n	8003696 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10c      	bne.n	800364a <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	b29a      	uxth	r2, r3
 8003638:	8a7b      	ldrh	r3, [r7, #18]
 800363a:	4013      	ands	r3, r2
 800363c:	b29a      	uxth	r2, r3
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	3302      	adds	r3, #2
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	e00c      	b.n	8003664 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	b2da      	uxtb	r2, r3
 8003652:	8a7b      	ldrh	r3, [r7, #18]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	4013      	ands	r3, r2
 8003658:	b2da      	uxtb	r2, r3
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3301      	adds	r3, #1
 8003662:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1c6      	bne.n	8003610 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	f040 808a 	bne.w	80037cc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_UART_Receive_IT+0x24>
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e082      	b.n	80037ce <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Receive_IT+0x36>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e07b      	b.n	80037ce <HAL_UART_Receive_IT+0x12e>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	88fa      	ldrh	r2, [r7, #6]
 80036e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d10e      	bne.n	8003722 <HAL_UART_Receive_IT+0x82>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <HAL_UART_Receive_IT+0x78>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003712:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003716:	e02d      	b.n	8003774 <HAL_UART_Receive_IT+0xd4>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003720:	e028      	b.n	8003774 <HAL_UART_Receive_IT+0xd4>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <HAL_UART_Receive_IT+0xa6>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <HAL_UART_Receive_IT+0x9c>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	22ff      	movs	r2, #255	; 0xff
 8003736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800373a:	e01b      	b.n	8003774 <HAL_UART_Receive_IT+0xd4>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	227f      	movs	r2, #127	; 0x7f
 8003740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003744:	e016      	b.n	8003774 <HAL_UART_Receive_IT+0xd4>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800374e:	d10d      	bne.n	800376c <HAL_UART_Receive_IT+0xcc>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <HAL_UART_Receive_IT+0xc2>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	227f      	movs	r2, #127	; 0x7f
 800375c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003760:	e008      	b.n	8003774 <HAL_UART_Receive_IT+0xd4>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	223f      	movs	r2, #63	; 0x3f
 8003766:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800376a:	e003      	b.n	8003774 <HAL_UART_Receive_IT+0xd4>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2222      	movs	r2, #34	; 0x22
 800377e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003798:	d107      	bne.n	80037aa <HAL_UART_Receive_IT+0x10a>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_UART_Receive_IT+0x13c>)
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60
 80037a8:	e002      	b.n	80037b0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a0c      	ldr	r2, [pc, #48]	; (80037e0 <HAL_UART_Receive_IT+0x140>)
 80037ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80037c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	08004303 	.word	0x08004303
 80037e0:	0800425d 	.word	0x0800425d

080037e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d113      	bne.n	800383a <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00e      	beq.n	800383a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80eb 	beq.w	8003a06 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
      }
      return;
 8003838:	e0e5      	b.n	8003a06 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80c0 	beq.w	80039c2 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80b5 	beq.w	80039c2 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00e      	beq.n	8003880 <HAL_UART_IRQHandler+0x9c>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2201      	movs	r2, #1
 8003872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00e      	beq.n	80038a8 <HAL_UART_IRQHandler+0xc4>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d009      	beq.n	80038a8 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2202      	movs	r2, #2
 800389a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a0:	f043 0204 	orr.w	r2, r3, #4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00e      	beq.n	80038d0 <HAL_UART_IRQHandler+0xec>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2204      	movs	r2, #4
 80038c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c8:	f043 0202 	orr.w	r2, r3, #2
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d013      	beq.n	8003902 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2208      	movs	r2, #8
 80038f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fa:	f043 0208 	orr.w	r2, r3, #8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d07f      	beq.n	8003a0a <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00c      	beq.n	800392e <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003932:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d004      	beq.n	800394c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003948:	2b00      	cmp	r3, #0
 800394a:	d031      	beq.n	80039b0 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fc36 	bl	80041be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d123      	bne.n	80039a8 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397c:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <HAL_UART_IRQHandler+0x234>)
 800397e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd ffd8 	bl	800193a <HAL_DMA_Abort_IT>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d016      	beq.n	80039be <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800399a:	4610      	mov	r0, r2
 800399c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399e:	e00e      	b.n	80039be <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f845 	bl	8003a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a6:	e00a      	b.n	80039be <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f841 	bl	8003a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ae:	e006      	b.n	80039be <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f83d 	bl	8003a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80039bc:	e025      	b.n	8003a0a <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039be:	bf00      	nop
    return;
 80039c0:	e023      	b.n	8003a0a <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00d      	beq.n	80039e8 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d017      	beq.n	8003a0e <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
    }
    return;
 80039e6:	e012      	b.n	8003a0e <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <HAL_UART_IRQHandler+0x22c>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fc14 	bl	800422a <UART_EndTransmit_IT>
    return;
 8003a02:	bf00      	nop
 8003a04:	e004      	b.n	8003a10 <HAL_UART_IRQHandler+0x22c>
      return;
 8003a06:	bf00      	nop
 8003a08:	e002      	b.n	8003a10 <HAL_UART_IRQHandler+0x22c>
    return;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <HAL_UART_IRQHandler+0x22c>
    return;
 8003a0e:	bf00      	nop
  }

}
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	080041ff 	.word	0x080041ff

08003a1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4bb1      	ldr	r3, [pc, #708]	; (8003d38 <UART_SetConfig+0x2f4>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	6939      	ldr	r1, [r7, #16]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a9f      	ldr	r2, [pc, #636]	; (8003d3c <UART_SetConfig+0x2f8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d121      	bne.n	8003b08 <UART_SetConfig+0xc4>
 8003ac4:	4b9e      	ldr	r3, [pc, #632]	; (8003d40 <UART_SetConfig+0x2fc>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d816      	bhi.n	8003b00 <UART_SetConfig+0xbc>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <UART_SetConfig+0x94>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003af5 	.word	0x08003af5
 8003ae0:	08003aef 	.word	0x08003aef
 8003ae4:	08003afb 	.word	0x08003afb
 8003ae8:	2301      	movs	r3, #1
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e151      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e14e      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003af4:	2304      	movs	r3, #4
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e14b      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003afa:	2308      	movs	r3, #8
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e148      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003b00:	2310      	movs	r3, #16
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	bf00      	nop
 8003b06:	e144      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a8d      	ldr	r2, [pc, #564]	; (8003d44 <UART_SetConfig+0x300>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d134      	bne.n	8003b7c <UART_SetConfig+0x138>
 8003b12:	4b8b      	ldr	r3, [pc, #556]	; (8003d40 <UART_SetConfig+0x2fc>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d829      	bhi.n	8003b74 <UART_SetConfig+0x130>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0xe4>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003b75 	.word	0x08003b75
 8003b30:	08003b75 	.word	0x08003b75
 8003b34:	08003b75 	.word	0x08003b75
 8003b38:	08003b69 	.word	0x08003b69
 8003b3c:	08003b75 	.word	0x08003b75
 8003b40:	08003b75 	.word	0x08003b75
 8003b44:	08003b75 	.word	0x08003b75
 8003b48:	08003b63 	.word	0x08003b63
 8003b4c:	08003b75 	.word	0x08003b75
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b75 	.word	0x08003b75
 8003b58:	08003b6f 	.word	0x08003b6f
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e117      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e114      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e111      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e10e      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003b74:	2310      	movs	r3, #16
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	bf00      	nop
 8003b7a:	e10a      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a71      	ldr	r2, [pc, #452]	; (8003d48 <UART_SetConfig+0x304>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d120      	bne.n	8003bc8 <UART_SetConfig+0x184>
 8003b86:	4b6e      	ldr	r3, [pc, #440]	; (8003d40 <UART_SetConfig+0x2fc>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d00f      	beq.n	8003bb4 <UART_SetConfig+0x170>
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d802      	bhi.n	8003b9e <UART_SetConfig+0x15a>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <UART_SetConfig+0x164>
 8003b9c:	e010      	b.n	8003bc0 <UART_SetConfig+0x17c>
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d005      	beq.n	8003bae <UART_SetConfig+0x16a>
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d009      	beq.n	8003bba <UART_SetConfig+0x176>
 8003ba6:	e00b      	b.n	8003bc0 <UART_SetConfig+0x17c>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e0f1      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	e0ee      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	77fb      	strb	r3, [r7, #31]
 8003bb8:	e0eb      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003bba:	2308      	movs	r3, #8
 8003bbc:	77fb      	strb	r3, [r7, #31]
 8003bbe:	e0e8      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	bf00      	nop
 8003bc6:	e0e4      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a5f      	ldr	r2, [pc, #380]	; (8003d4c <UART_SetConfig+0x308>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d120      	bne.n	8003c14 <UART_SetConfig+0x1d0>
 8003bd2:	4b5b      	ldr	r3, [pc, #364]	; (8003d40 <UART_SetConfig+0x2fc>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d00f      	beq.n	8003c00 <UART_SetConfig+0x1bc>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d802      	bhi.n	8003bea <UART_SetConfig+0x1a6>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <UART_SetConfig+0x1b0>
 8003be8:	e010      	b.n	8003c0c <UART_SetConfig+0x1c8>
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d005      	beq.n	8003bfa <UART_SetConfig+0x1b6>
 8003bee:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf0:	d009      	beq.n	8003c06 <UART_SetConfig+0x1c2>
 8003bf2:	e00b      	b.n	8003c0c <UART_SetConfig+0x1c8>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e0cb      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e0c8      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003c00:	2304      	movs	r3, #4
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e0c5      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003c06:	2308      	movs	r3, #8
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e0c2      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	bf00      	nop
 8003c12:	e0be      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <UART_SetConfig+0x30c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d124      	bne.n	8003c68 <UART_SetConfig+0x224>
 8003c1e:	4b48      	ldr	r3, [pc, #288]	; (8003d40 <UART_SetConfig+0x2fc>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2c:	d012      	beq.n	8003c54 <UART_SetConfig+0x210>
 8003c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c32:	d802      	bhi.n	8003c3a <UART_SetConfig+0x1f6>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <UART_SetConfig+0x204>
 8003c38:	e012      	b.n	8003c60 <UART_SetConfig+0x21c>
 8003c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3e:	d006      	beq.n	8003c4e <UART_SetConfig+0x20a>
 8003c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c44:	d009      	beq.n	8003c5a <UART_SetConfig+0x216>
 8003c46:	e00b      	b.n	8003c60 <UART_SetConfig+0x21c>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e0a1      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e09e      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003c54:	2304      	movs	r3, #4
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e09b      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e098      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003c60:	2310      	movs	r3, #16
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	bf00      	nop
 8003c66:	e094      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a39      	ldr	r2, [pc, #228]	; (8003d54 <UART_SetConfig+0x310>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d124      	bne.n	8003cbc <UART_SetConfig+0x278>
 8003c72:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <UART_SetConfig+0x2fc>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c80:	d012      	beq.n	8003ca8 <UART_SetConfig+0x264>
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c86:	d802      	bhi.n	8003c8e <UART_SetConfig+0x24a>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <UART_SetConfig+0x258>
 8003c8c:	e012      	b.n	8003cb4 <UART_SetConfig+0x270>
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d006      	beq.n	8003ca2 <UART_SetConfig+0x25e>
 8003c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c98:	d009      	beq.n	8003cae <UART_SetConfig+0x26a>
 8003c9a:	e00b      	b.n	8003cb4 <UART_SetConfig+0x270>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e077      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e074      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e071      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e06e      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	bf00      	nop
 8003cba:	e06a      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <UART_SetConfig+0x314>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d124      	bne.n	8003d10 <UART_SetConfig+0x2cc>
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <UART_SetConfig+0x2fc>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd4:	d012      	beq.n	8003cfc <UART_SetConfig+0x2b8>
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cda:	d802      	bhi.n	8003ce2 <UART_SetConfig+0x29e>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <UART_SetConfig+0x2ac>
 8003ce0:	e012      	b.n	8003d08 <UART_SetConfig+0x2c4>
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce6:	d006      	beq.n	8003cf6 <UART_SetConfig+0x2b2>
 8003ce8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cec:	d009      	beq.n	8003d02 <UART_SetConfig+0x2be>
 8003cee:	e00b      	b.n	8003d08 <UART_SetConfig+0x2c4>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e04d      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e04a      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e047      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003d02:	2308      	movs	r3, #8
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e044      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003d08:	2310      	movs	r3, #16
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	bf00      	nop
 8003d0e:	e040      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <UART_SetConfig+0x318>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d139      	bne.n	8003d8e <UART_SetConfig+0x34a>
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <UART_SetConfig+0x2fc>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d28:	d027      	beq.n	8003d7a <UART_SetConfig+0x336>
 8003d2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d2e:	d817      	bhi.n	8003d60 <UART_SetConfig+0x31c>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01c      	beq.n	8003d6e <UART_SetConfig+0x32a>
 8003d34:	e027      	b.n	8003d86 <UART_SetConfig+0x342>
 8003d36:	bf00      	nop
 8003d38:	efff69f3 	.word	0xefff69f3
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40004400 	.word	0x40004400
 8003d48:	40004800 	.word	0x40004800
 8003d4c:	40004c00 	.word	0x40004c00
 8003d50:	40005000 	.word	0x40005000
 8003d54:	40011400 	.word	0x40011400
 8003d58:	40007800 	.word	0x40007800
 8003d5c:	40007c00 	.word	0x40007c00
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d64:	d006      	beq.n	8003d74 <UART_SetConfig+0x330>
 8003d66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d6a:	d009      	beq.n	8003d80 <UART_SetConfig+0x33c>
 8003d6c:	e00b      	b.n	8003d86 <UART_SetConfig+0x342>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e00e      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003d74:	2302      	movs	r3, #2
 8003d76:	77fb      	strb	r3, [r7, #31]
 8003d78:	e00b      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	77fb      	strb	r3, [r7, #31]
 8003d7e:	e008      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003d80:	2308      	movs	r3, #8
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e005      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003d86:	2310      	movs	r3, #16
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	bf00      	nop
 8003d8c:	e001      	b.n	8003d92 <UART_SetConfig+0x34e>
 8003d8e:	2310      	movs	r3, #16
 8003d90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9a:	d17c      	bne.n	8003e96 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003d9c:	7ffb      	ldrb	r3, [r7, #31]
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d859      	bhi.n	8003e56 <UART_SetConfig+0x412>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0x364>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003deb 	.word	0x08003deb
 8003db0:	08003e09 	.word	0x08003e09
 8003db4:	08003e57 	.word	0x08003e57
 8003db8:	08003e21 	.word	0x08003e21
 8003dbc:	08003e57 	.word	0x08003e57
 8003dc0:	08003e57 	.word	0x08003e57
 8003dc4:	08003e57 	.word	0x08003e57
 8003dc8:	08003e3f 	.word	0x08003e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003dcc:	f7fe fe6e 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	005a      	lsls	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	441a      	add	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	61bb      	str	r3, [r7, #24]
        break;
 8003de8:	e038      	b.n	8003e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003dea:	f7fe fe73 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8003dee:	4603      	mov	r3, r0
 8003df0:	005a      	lsls	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	441a      	add	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	61bb      	str	r3, [r7, #24]
        break;
 8003e06:	e029      	b.n	8003e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	085a      	lsrs	r2, r3, #1
 8003e0e:	4b5d      	ldr	r3, [pc, #372]	; (8003f84 <UART_SetConfig+0x540>)
 8003e10:	4413      	add	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6852      	ldr	r2, [r2, #4]
 8003e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	61bb      	str	r3, [r7, #24]
        break;
 8003e1e:	e01d      	b.n	8003e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e20:	f7fe fd86 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8003e24:	4603      	mov	r3, r0
 8003e26:	005a      	lsls	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	441a      	add	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	61bb      	str	r3, [r7, #24]
        break;
 8003e3c:	e00e      	b.n	8003e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	61bb      	str	r3, [r7, #24]
        break;
 8003e54:	e002      	b.n	8003e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
        break;
 8003e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	d916      	bls.n	8003e90 <UART_SetConfig+0x44c>
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e68:	d212      	bcs.n	8003e90 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f023 030f 	bic.w	r3, r3, #15
 8003e72:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	89fb      	ldrh	r3, [r7, #14]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	89fa      	ldrh	r2, [r7, #14]
 8003e8c:	60da      	str	r2, [r3, #12]
 8003e8e:	e06e      	b.n	8003f6e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
 8003e94:	e06b      	b.n	8003f6e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d857      	bhi.n	8003f4c <UART_SetConfig+0x508>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <UART_SetConfig+0x460>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ee5 	.word	0x08003ee5
 8003eac:	08003f01 	.word	0x08003f01
 8003eb0:	08003f4d 	.word	0x08003f4d
 8003eb4:	08003f19 	.word	0x08003f19
 8003eb8:	08003f4d 	.word	0x08003f4d
 8003ebc:	08003f4d 	.word	0x08003f4d
 8003ec0:	08003f4d 	.word	0x08003f4d
 8003ec4:	08003f35 	.word	0x08003f35
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003ec8:	f7fe fdf0 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	441a      	add	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	61bb      	str	r3, [r7, #24]
        break;
 8003ee2:	e036      	b.n	8003f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ee4:	f7fe fdf6 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	441a      	add	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	61bb      	str	r3, [r7, #24]
        break;
 8003efe:	e028      	b.n	8003f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	085a      	lsrs	r2, r3, #1
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <UART_SetConfig+0x544>)
 8003f08:	4413      	add	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6852      	ldr	r2, [r2, #4]
 8003f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	61bb      	str	r3, [r7, #24]
        break;
 8003f16:	e01c      	b.n	8003f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f18:	f7fe fd0a 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	441a      	add	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	61bb      	str	r3, [r7, #24]
        break;
 8003f32:	e00e      	b.n	8003f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	61bb      	str	r3, [r7, #24]
        break;
 8003f4a:	e002      	b.n	8003f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	75fb      	strb	r3, [r7, #23]
        break;
 8003f50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d908      	bls.n	8003f6a <UART_SetConfig+0x526>
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5e:	d204      	bcs.n	8003f6a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	60da      	str	r2, [r3, #12]
 8003f68:	e001      	b.n	8003f6e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	01e84800 	.word	0x01e84800
 8003f88:	00f42400 	.word	0x00f42400

08003f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01a      	beq.n	80040a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408a:	d10a      	bne.n	80040a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]
  }
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040de:	f7fd faed 	bl	80016bc <HAL_GetTick>
 80040e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d10e      	bne.n	8004110 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f814 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e00a      	b.n	8004126 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	e02a      	b.n	8004196 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d026      	beq.n	8004196 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004148:	f7fd fab8 	bl	80016bc <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <UART_WaitOnFlagUntilTimeout+0x30>
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11b      	bne.n	8004196 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800416c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e00f      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d0c5      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fc07 	bl	8003a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004240:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fbe4 	bl	8003a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800426a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004270:	2b22      	cmp	r3, #34	; 0x22
 8004272:	d13a      	bne.n	80042ea <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800427c:	89bb      	ldrh	r3, [r7, #12]
 800427e:	b2d9      	uxtb	r1, r3
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	400a      	ands	r2, r1
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d121      	bne.n	80042fa <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042c4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fc fd1c 	bl	8000d20 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042e8:	e007      	b.n	80042fa <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0208 	orr.w	r2, r2, #8
 80042f8:	619a      	str	r2, [r3, #24]
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004310:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004316:	2b22      	cmp	r3, #34	; 0x22
 8004318:	d13a      	bne.n	8004390 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004328:	89ba      	ldrh	r2, [r7, #12]
 800432a:	89fb      	ldrh	r3, [r7, #14]
 800432c:	4013      	ands	r3, r2
 800432e:	b29a      	uxth	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	1c9a      	adds	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d121      	bne.n	80043a0 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800436a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fc fcc9 	bl	8000d20 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800438e:	e007      	b.n	80043a0 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	619a      	str	r2, [r3, #24]
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <__errno>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	; (80043b0 <__errno+0x8>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000010 	.word	0x20000010

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4e0d      	ldr	r6, [pc, #52]	; (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	; (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1ba4      	subs	r4, r4, r6
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2500      	movs	r5, #0
 80043c0:	42a5      	cmp	r5, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4e0b      	ldr	r6, [pc, #44]	; (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	; (80043f8 <__libc_init_array+0x44>)
 80043c8:	f001 fce4 	bl	8005d94 <_init>
 80043cc:	1ba4      	subs	r4, r4, r6
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2500      	movs	r5, #0
 80043d2:	42a5      	cmp	r5, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043dc:	4798      	blx	r3
 80043de:	3501      	adds	r5, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043e6:	4798      	blx	r3
 80043e8:	3501      	adds	r5, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08006210 	.word	0x08006210
 80043f0:	08006210 	.word	0x08006210
 80043f4:	08006210 	.word	0x08006210
 80043f8:	08006214 	.word	0x08006214

080043fc <memset>:
 80043fc:	4402      	add	r2, r0
 80043fe:	4603      	mov	r3, r0
 8004400:	4293      	cmp	r3, r2
 8004402:	d100      	bne.n	8004406 <memset+0xa>
 8004404:	4770      	bx	lr
 8004406:	f803 1b01 	strb.w	r1, [r3], #1
 800440a:	e7f9      	b.n	8004400 <memset+0x4>

0800440c <__cvt>:
 800440c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440e:	ed2d 8b02 	vpush	{d8}
 8004412:	eeb0 8b40 	vmov.f64	d8, d0
 8004416:	b085      	sub	sp, #20
 8004418:	4617      	mov	r7, r2
 800441a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800441c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800441e:	ee18 2a90 	vmov	r2, s17
 8004422:	f025 0520 	bic.w	r5, r5, #32
 8004426:	2a00      	cmp	r2, #0
 8004428:	bfb6      	itet	lt
 800442a:	222d      	movlt	r2, #45	; 0x2d
 800442c:	2200      	movge	r2, #0
 800442e:	eeb1 8b40 	vneglt.f64	d8, d0
 8004432:	2d46      	cmp	r5, #70	; 0x46
 8004434:	460c      	mov	r4, r1
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	d004      	beq.n	8004444 <__cvt+0x38>
 800443a:	2d45      	cmp	r5, #69	; 0x45
 800443c:	d100      	bne.n	8004440 <__cvt+0x34>
 800443e:	3401      	adds	r4, #1
 8004440:	2102      	movs	r1, #2
 8004442:	e000      	b.n	8004446 <__cvt+0x3a>
 8004444:	2103      	movs	r1, #3
 8004446:	ab03      	add	r3, sp, #12
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	ab02      	add	r3, sp, #8
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	4622      	mov	r2, r4
 8004450:	4633      	mov	r3, r6
 8004452:	eeb0 0b48 	vmov.f64	d0, d8
 8004456:	f000 fbbb 	bl	8004bd0 <_dtoa_r>
 800445a:	2d47      	cmp	r5, #71	; 0x47
 800445c:	d101      	bne.n	8004462 <__cvt+0x56>
 800445e:	07fb      	lsls	r3, r7, #31
 8004460:	d51e      	bpl.n	80044a0 <__cvt+0x94>
 8004462:	2d46      	cmp	r5, #70	; 0x46
 8004464:	eb00 0304 	add.w	r3, r0, r4
 8004468:	d10c      	bne.n	8004484 <__cvt+0x78>
 800446a:	7802      	ldrb	r2, [r0, #0]
 800446c:	2a30      	cmp	r2, #48	; 0x30
 800446e:	d107      	bne.n	8004480 <__cvt+0x74>
 8004470:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004478:	bf1c      	itt	ne
 800447a:	f1c4 0401 	rsbne	r4, r4, #1
 800447e:	6034      	strne	r4, [r6, #0]
 8004480:	6832      	ldr	r2, [r6, #0]
 8004482:	4413      	add	r3, r2
 8004484:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448c:	d007      	beq.n	800449e <__cvt+0x92>
 800448e:	2130      	movs	r1, #48	; 0x30
 8004490:	9a03      	ldr	r2, [sp, #12]
 8004492:	429a      	cmp	r2, r3
 8004494:	d204      	bcs.n	80044a0 <__cvt+0x94>
 8004496:	1c54      	adds	r4, r2, #1
 8004498:	9403      	str	r4, [sp, #12]
 800449a:	7011      	strb	r1, [r2, #0]
 800449c:	e7f8      	b.n	8004490 <__cvt+0x84>
 800449e:	9303      	str	r3, [sp, #12]
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044a4:	1a1b      	subs	r3, r3, r0
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	b005      	add	sp, #20
 80044aa:	ecbd 8b02 	vpop	{d8}
 80044ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044b0 <__exponent>:
 80044b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044b2:	2900      	cmp	r1, #0
 80044b4:	4604      	mov	r4, r0
 80044b6:	bfba      	itte	lt
 80044b8:	4249      	neglt	r1, r1
 80044ba:	232d      	movlt	r3, #45	; 0x2d
 80044bc:	232b      	movge	r3, #43	; 0x2b
 80044be:	2909      	cmp	r1, #9
 80044c0:	f804 2b02 	strb.w	r2, [r4], #2
 80044c4:	7043      	strb	r3, [r0, #1]
 80044c6:	dd20      	ble.n	800450a <__exponent+0x5a>
 80044c8:	f10d 0307 	add.w	r3, sp, #7
 80044cc:	461f      	mov	r7, r3
 80044ce:	260a      	movs	r6, #10
 80044d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80044d4:	fb06 1115 	mls	r1, r6, r5, r1
 80044d8:	3130      	adds	r1, #48	; 0x30
 80044da:	2d09      	cmp	r5, #9
 80044dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80044e0:	f103 32ff 	add.w	r2, r3, #4294967295
 80044e4:	4629      	mov	r1, r5
 80044e6:	dc09      	bgt.n	80044fc <__exponent+0x4c>
 80044e8:	3130      	adds	r1, #48	; 0x30
 80044ea:	3b02      	subs	r3, #2
 80044ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80044f0:	42bb      	cmp	r3, r7
 80044f2:	4622      	mov	r2, r4
 80044f4:	d304      	bcc.n	8004500 <__exponent+0x50>
 80044f6:	1a10      	subs	r0, r2, r0
 80044f8:	b003      	add	sp, #12
 80044fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044fc:	4613      	mov	r3, r2
 80044fe:	e7e7      	b.n	80044d0 <__exponent+0x20>
 8004500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004504:	f804 2b01 	strb.w	r2, [r4], #1
 8004508:	e7f2      	b.n	80044f0 <__exponent+0x40>
 800450a:	2330      	movs	r3, #48	; 0x30
 800450c:	4419      	add	r1, r3
 800450e:	7083      	strb	r3, [r0, #2]
 8004510:	1d02      	adds	r2, r0, #4
 8004512:	70c1      	strb	r1, [r0, #3]
 8004514:	e7ef      	b.n	80044f6 <__exponent+0x46>
	...

08004518 <_printf_float>:
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	b08d      	sub	sp, #52	; 0x34
 800451e:	460c      	mov	r4, r1
 8004520:	4616      	mov	r6, r2
 8004522:	461f      	mov	r7, r3
 8004524:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004528:	4605      	mov	r5, r0
 800452a:	f001 f89d 	bl	8005668 <_localeconv_r>
 800452e:	f8d0 b000 	ldr.w	fp, [r0]
 8004532:	4658      	mov	r0, fp
 8004534:	f7fb fe80 	bl	8000238 <strlen>
 8004538:	2300      	movs	r3, #0
 800453a:	930a      	str	r3, [sp, #40]	; 0x28
 800453c:	f8d8 3000 	ldr.w	r3, [r8]
 8004540:	9005      	str	r0, [sp, #20]
 8004542:	3307      	adds	r3, #7
 8004544:	f023 0307 	bic.w	r3, r3, #7
 8004548:	f103 0108 	add.w	r1, r3, #8
 800454c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	f8c8 1000 	str.w	r1, [r8]
 8004556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800455a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800455e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80047e8 <_printf_float+0x2d0>
 8004562:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004566:	eeb0 6bc0 	vabs.f64	d6, d0
 800456a:	eeb4 6b47 	vcmp.f64	d6, d7
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	dd24      	ble.n	80045be <_printf_float+0xa6>
 8004574:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457c:	d502      	bpl.n	8004584 <_printf_float+0x6c>
 800457e:	232d      	movs	r3, #45	; 0x2d
 8004580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004584:	499a      	ldr	r1, [pc, #616]	; (80047f0 <_printf_float+0x2d8>)
 8004586:	4b9b      	ldr	r3, [pc, #620]	; (80047f4 <_printf_float+0x2dc>)
 8004588:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800458c:	bf8c      	ite	hi
 800458e:	4688      	movhi	r8, r1
 8004590:	4698      	movls	r8, r3
 8004592:	f022 0204 	bic.w	r2, r2, #4
 8004596:	2303      	movs	r3, #3
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	f04f 0a00 	mov.w	sl, #0
 80045a0:	9700      	str	r7, [sp, #0]
 80045a2:	4633      	mov	r3, r6
 80045a4:	aa0b      	add	r2, sp, #44	; 0x2c
 80045a6:	4621      	mov	r1, r4
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 f9e1 	bl	8004970 <_printf_common>
 80045ae:	3001      	adds	r0, #1
 80045b0:	f040 8089 	bne.w	80046c6 <_printf_float+0x1ae>
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	b00d      	add	sp, #52	; 0x34
 80045ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045be:	eeb4 0b40 	vcmp.f64	d0, d0
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	d702      	bvc.n	80045ce <_printf_float+0xb6>
 80045c8:	498b      	ldr	r1, [pc, #556]	; (80047f8 <_printf_float+0x2e0>)
 80045ca:	4b8c      	ldr	r3, [pc, #560]	; (80047fc <_printf_float+0x2e4>)
 80045cc:	e7dc      	b.n	8004588 <_printf_float+0x70>
 80045ce:	6861      	ldr	r1, [r4, #4]
 80045d0:	1c4b      	adds	r3, r1, #1
 80045d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d6:	ab0a      	add	r3, sp, #40	; 0x28
 80045d8:	a809      	add	r0, sp, #36	; 0x24
 80045da:	d13b      	bne.n	8004654 <_printf_float+0x13c>
 80045dc:	2106      	movs	r1, #6
 80045de:	6061      	str	r1, [r4, #4]
 80045e0:	f04f 0c00 	mov.w	ip, #0
 80045e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80045e8:	e9cd 0900 	strd	r0, r9, [sp]
 80045ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80045f0:	6022      	str	r2, [r4, #0]
 80045f2:	6861      	ldr	r1, [r4, #4]
 80045f4:	4628      	mov	r0, r5
 80045f6:	f7ff ff09 	bl	800440c <__cvt>
 80045fa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80045fe:	2b47      	cmp	r3, #71	; 0x47
 8004600:	4680      	mov	r8, r0
 8004602:	d109      	bne.n	8004618 <_printf_float+0x100>
 8004604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004606:	1cd8      	adds	r0, r3, #3
 8004608:	db02      	blt.n	8004610 <_printf_float+0xf8>
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	4293      	cmp	r3, r2
 800460e:	dd47      	ble.n	80046a0 <_printf_float+0x188>
 8004610:	f1a9 0902 	sub.w	r9, r9, #2
 8004614:	fa5f f989 	uxtb.w	r9, r9
 8004618:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800461c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800461e:	d824      	bhi.n	800466a <_printf_float+0x152>
 8004620:	3901      	subs	r1, #1
 8004622:	464a      	mov	r2, r9
 8004624:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004628:	9109      	str	r1, [sp, #36]	; 0x24
 800462a:	f7ff ff41 	bl	80044b0 <__exponent>
 800462e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004630:	1813      	adds	r3, r2, r0
 8004632:	2a01      	cmp	r2, #1
 8004634:	4682      	mov	sl, r0
 8004636:	6123      	str	r3, [r4, #16]
 8004638:	dc02      	bgt.n	8004640 <_printf_float+0x128>
 800463a:	6822      	ldr	r2, [r4, #0]
 800463c:	07d1      	lsls	r1, r2, #31
 800463e:	d501      	bpl.n	8004644 <_printf_float+0x12c>
 8004640:	3301      	adds	r3, #1
 8004642:	6123      	str	r3, [r4, #16]
 8004644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0a9      	beq.n	80045a0 <_printf_float+0x88>
 800464c:	232d      	movs	r3, #45	; 0x2d
 800464e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004652:	e7a5      	b.n	80045a0 <_printf_float+0x88>
 8004654:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8004658:	f000 8178 	beq.w	800494c <_printf_float+0x434>
 800465c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004660:	d1be      	bne.n	80045e0 <_printf_float+0xc8>
 8004662:	2900      	cmp	r1, #0
 8004664:	d1bc      	bne.n	80045e0 <_printf_float+0xc8>
 8004666:	2101      	movs	r1, #1
 8004668:	e7b9      	b.n	80045de <_printf_float+0xc6>
 800466a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800466e:	d119      	bne.n	80046a4 <_printf_float+0x18c>
 8004670:	2900      	cmp	r1, #0
 8004672:	6863      	ldr	r3, [r4, #4]
 8004674:	dd0c      	ble.n	8004690 <_printf_float+0x178>
 8004676:	6121      	str	r1, [r4, #16]
 8004678:	b913      	cbnz	r3, 8004680 <_printf_float+0x168>
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	07d2      	lsls	r2, r2, #31
 800467e:	d502      	bpl.n	8004686 <_printf_float+0x16e>
 8004680:	3301      	adds	r3, #1
 8004682:	440b      	add	r3, r1
 8004684:	6123      	str	r3, [r4, #16]
 8004686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004688:	65a3      	str	r3, [r4, #88]	; 0x58
 800468a:	f04f 0a00 	mov.w	sl, #0
 800468e:	e7d9      	b.n	8004644 <_printf_float+0x12c>
 8004690:	b913      	cbnz	r3, 8004698 <_printf_float+0x180>
 8004692:	6822      	ldr	r2, [r4, #0]
 8004694:	07d0      	lsls	r0, r2, #31
 8004696:	d501      	bpl.n	800469c <_printf_float+0x184>
 8004698:	3302      	adds	r3, #2
 800469a:	e7f3      	b.n	8004684 <_printf_float+0x16c>
 800469c:	2301      	movs	r3, #1
 800469e:	e7f1      	b.n	8004684 <_printf_float+0x16c>
 80046a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80046a8:	4293      	cmp	r3, r2
 80046aa:	db05      	blt.n	80046b8 <_printf_float+0x1a0>
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	6123      	str	r3, [r4, #16]
 80046b0:	07d1      	lsls	r1, r2, #31
 80046b2:	d5e8      	bpl.n	8004686 <_printf_float+0x16e>
 80046b4:	3301      	adds	r3, #1
 80046b6:	e7e5      	b.n	8004684 <_printf_float+0x16c>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bfd4      	ite	le
 80046bc:	f1c3 0302 	rsble	r3, r3, #2
 80046c0:	2301      	movgt	r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	e7de      	b.n	8004684 <_printf_float+0x16c>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	055a      	lsls	r2, r3, #21
 80046ca:	d407      	bmi.n	80046dc <_printf_float+0x1c4>
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	4642      	mov	r2, r8
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	d12a      	bne.n	8004730 <_printf_float+0x218>
 80046da:	e76b      	b.n	80045b4 <_printf_float+0x9c>
 80046dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80046e0:	f240 80de 	bls.w	80048a0 <_printf_float+0x388>
 80046e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80046e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80046ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f0:	d133      	bne.n	800475a <_printf_float+0x242>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4a42      	ldr	r2, [pc, #264]	; (8004800 <_printf_float+0x2e8>)
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	47b8      	blx	r7
 80046fc:	3001      	adds	r0, #1
 80046fe:	f43f af59 	beq.w	80045b4 <_printf_float+0x9c>
 8004702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004706:	429a      	cmp	r2, r3
 8004708:	db02      	blt.n	8004710 <_printf_float+0x1f8>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	07d8      	lsls	r0, r3, #31
 800470e:	d50f      	bpl.n	8004730 <_printf_float+0x218>
 8004710:	9b05      	ldr	r3, [sp, #20]
 8004712:	465a      	mov	r2, fp
 8004714:	4631      	mov	r1, r6
 8004716:	4628      	mov	r0, r5
 8004718:	47b8      	blx	r7
 800471a:	3001      	adds	r0, #1
 800471c:	f43f af4a 	beq.w	80045b4 <_printf_float+0x9c>
 8004720:	f04f 0800 	mov.w	r8, #0
 8004724:	f104 091a 	add.w	r9, r4, #26
 8004728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	4543      	cmp	r3, r8
 800472e:	dc09      	bgt.n	8004744 <_printf_float+0x22c>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	079b      	lsls	r3, r3, #30
 8004734:	f100 8105 	bmi.w	8004942 <_printf_float+0x42a>
 8004738:	68e0      	ldr	r0, [r4, #12]
 800473a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800473c:	4298      	cmp	r0, r3
 800473e:	bfb8      	it	lt
 8004740:	4618      	movlt	r0, r3
 8004742:	e739      	b.n	80045b8 <_printf_float+0xa0>
 8004744:	2301      	movs	r3, #1
 8004746:	464a      	mov	r2, r9
 8004748:	4631      	mov	r1, r6
 800474a:	4628      	mov	r0, r5
 800474c:	47b8      	blx	r7
 800474e:	3001      	adds	r0, #1
 8004750:	f43f af30 	beq.w	80045b4 <_printf_float+0x9c>
 8004754:	f108 0801 	add.w	r8, r8, #1
 8004758:	e7e6      	b.n	8004728 <_printf_float+0x210>
 800475a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	dc2b      	bgt.n	80047b8 <_printf_float+0x2a0>
 8004760:	2301      	movs	r3, #1
 8004762:	4a27      	ldr	r2, [pc, #156]	; (8004800 <_printf_float+0x2e8>)
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f af22 	beq.w	80045b4 <_printf_float+0x9c>
 8004770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004772:	b923      	cbnz	r3, 800477e <_printf_float+0x266>
 8004774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004776:	b913      	cbnz	r3, 800477e <_printf_float+0x266>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	07d9      	lsls	r1, r3, #31
 800477c:	d5d8      	bpl.n	8004730 <_printf_float+0x218>
 800477e:	9b05      	ldr	r3, [sp, #20]
 8004780:	465a      	mov	r2, fp
 8004782:	4631      	mov	r1, r6
 8004784:	4628      	mov	r0, r5
 8004786:	47b8      	blx	r7
 8004788:	3001      	adds	r0, #1
 800478a:	f43f af13 	beq.w	80045b4 <_printf_float+0x9c>
 800478e:	f04f 0900 	mov.w	r9, #0
 8004792:	f104 0a1a 	add.w	sl, r4, #26
 8004796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004798:	425b      	negs	r3, r3
 800479a:	454b      	cmp	r3, r9
 800479c:	dc01      	bgt.n	80047a2 <_printf_float+0x28a>
 800479e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047a0:	e795      	b.n	80046ce <_printf_float+0x1b6>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4652      	mov	r2, sl
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	f43f af01 	beq.w	80045b4 <_printf_float+0x9c>
 80047b2:	f109 0901 	add.w	r9, r9, #1
 80047b6:	e7ee      	b.n	8004796 <_printf_float+0x27e>
 80047b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047bc:	429a      	cmp	r2, r3
 80047be:	bfa8      	it	ge
 80047c0:	461a      	movge	r2, r3
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	4691      	mov	r9, r2
 80047c6:	dd07      	ble.n	80047d8 <_printf_float+0x2c0>
 80047c8:	4613      	mov	r3, r2
 80047ca:	4631      	mov	r1, r6
 80047cc:	4642      	mov	r2, r8
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	f43f aeee 	beq.w	80045b4 <_printf_float+0x9c>
 80047d8:	f104 031a 	add.w	r3, r4, #26
 80047dc:	f04f 0a00 	mov.w	sl, #0
 80047e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047e4:	9307      	str	r3, [sp, #28]
 80047e6:	e017      	b.n	8004818 <_printf_float+0x300>
 80047e8:	ffffffff 	.word	0xffffffff
 80047ec:	7fefffff 	.word	0x7fefffff
 80047f0:	08005fe0 	.word	0x08005fe0
 80047f4:	08005fdc 	.word	0x08005fdc
 80047f8:	08005fe8 	.word	0x08005fe8
 80047fc:	08005fe4 	.word	0x08005fe4
 8004800:	08005fec 	.word	0x08005fec
 8004804:	2301      	movs	r3, #1
 8004806:	9a07      	ldr	r2, [sp, #28]
 8004808:	4631      	mov	r1, r6
 800480a:	4628      	mov	r0, r5
 800480c:	47b8      	blx	r7
 800480e:	3001      	adds	r0, #1
 8004810:	f43f aed0 	beq.w	80045b4 <_printf_float+0x9c>
 8004814:	f10a 0a01 	add.w	sl, sl, #1
 8004818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800481a:	9306      	str	r3, [sp, #24]
 800481c:	eba3 0309 	sub.w	r3, r3, r9
 8004820:	4553      	cmp	r3, sl
 8004822:	dcef      	bgt.n	8004804 <_printf_float+0x2ec>
 8004824:	9b06      	ldr	r3, [sp, #24]
 8004826:	4498      	add	r8, r3
 8004828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800482c:	429a      	cmp	r2, r3
 800482e:	db15      	blt.n	800485c <_printf_float+0x344>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	07da      	lsls	r2, r3, #31
 8004834:	d412      	bmi.n	800485c <_printf_float+0x344>
 8004836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004838:	9a06      	ldr	r2, [sp, #24]
 800483a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800483c:	1a9a      	subs	r2, r3, r2
 800483e:	eba3 0a01 	sub.w	sl, r3, r1
 8004842:	4592      	cmp	sl, r2
 8004844:	bfa8      	it	ge
 8004846:	4692      	movge	sl, r2
 8004848:	f1ba 0f00 	cmp.w	sl, #0
 800484c:	dc0e      	bgt.n	800486c <_printf_float+0x354>
 800484e:	f04f 0800 	mov.w	r8, #0
 8004852:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004856:	f104 091a 	add.w	r9, r4, #26
 800485a:	e019      	b.n	8004890 <_printf_float+0x378>
 800485c:	9b05      	ldr	r3, [sp, #20]
 800485e:	465a      	mov	r2, fp
 8004860:	4631      	mov	r1, r6
 8004862:	4628      	mov	r0, r5
 8004864:	47b8      	blx	r7
 8004866:	3001      	adds	r0, #1
 8004868:	d1e5      	bne.n	8004836 <_printf_float+0x31e>
 800486a:	e6a3      	b.n	80045b4 <_printf_float+0x9c>
 800486c:	4653      	mov	r3, sl
 800486e:	4642      	mov	r2, r8
 8004870:	4631      	mov	r1, r6
 8004872:	4628      	mov	r0, r5
 8004874:	47b8      	blx	r7
 8004876:	3001      	adds	r0, #1
 8004878:	d1e9      	bne.n	800484e <_printf_float+0x336>
 800487a:	e69b      	b.n	80045b4 <_printf_float+0x9c>
 800487c:	2301      	movs	r3, #1
 800487e:	464a      	mov	r2, r9
 8004880:	4631      	mov	r1, r6
 8004882:	4628      	mov	r0, r5
 8004884:	47b8      	blx	r7
 8004886:	3001      	adds	r0, #1
 8004888:	f43f ae94 	beq.w	80045b4 <_printf_float+0x9c>
 800488c:	f108 0801 	add.w	r8, r8, #1
 8004890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	eba3 030a 	sub.w	r3, r3, sl
 800489a:	4543      	cmp	r3, r8
 800489c:	dcee      	bgt.n	800487c <_printf_float+0x364>
 800489e:	e747      	b.n	8004730 <_printf_float+0x218>
 80048a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048a2:	2a01      	cmp	r2, #1
 80048a4:	dc01      	bgt.n	80048aa <_printf_float+0x392>
 80048a6:	07db      	lsls	r3, r3, #31
 80048a8:	d539      	bpl.n	800491e <_printf_float+0x406>
 80048aa:	2301      	movs	r3, #1
 80048ac:	4642      	mov	r2, r8
 80048ae:	4631      	mov	r1, r6
 80048b0:	4628      	mov	r0, r5
 80048b2:	47b8      	blx	r7
 80048b4:	3001      	adds	r0, #1
 80048b6:	f43f ae7d 	beq.w	80045b4 <_printf_float+0x9c>
 80048ba:	9b05      	ldr	r3, [sp, #20]
 80048bc:	465a      	mov	r2, fp
 80048be:	4631      	mov	r1, r6
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b8      	blx	r7
 80048c4:	3001      	adds	r0, #1
 80048c6:	f108 0801 	add.w	r8, r8, #1
 80048ca:	f43f ae73 	beq.w	80045b4 <_printf_float+0x9c>
 80048ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80048d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80048d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80048e0:	d018      	beq.n	8004914 <_printf_float+0x3fc>
 80048e2:	4642      	mov	r2, r8
 80048e4:	4631      	mov	r1, r6
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	d10e      	bne.n	800490c <_printf_float+0x3f4>
 80048ee:	e661      	b.n	80045b4 <_printf_float+0x9c>
 80048f0:	2301      	movs	r3, #1
 80048f2:	464a      	mov	r2, r9
 80048f4:	4631      	mov	r1, r6
 80048f6:	4628      	mov	r0, r5
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	f43f ae5a 	beq.w	80045b4 <_printf_float+0x9c>
 8004900:	f108 0801 	add.w	r8, r8, #1
 8004904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004906:	3b01      	subs	r3, #1
 8004908:	4543      	cmp	r3, r8
 800490a:	dcf1      	bgt.n	80048f0 <_printf_float+0x3d8>
 800490c:	4653      	mov	r3, sl
 800490e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004912:	e6dd      	b.n	80046d0 <_printf_float+0x1b8>
 8004914:	f04f 0800 	mov.w	r8, #0
 8004918:	f104 091a 	add.w	r9, r4, #26
 800491c:	e7f2      	b.n	8004904 <_printf_float+0x3ec>
 800491e:	2301      	movs	r3, #1
 8004920:	e7df      	b.n	80048e2 <_printf_float+0x3ca>
 8004922:	2301      	movs	r3, #1
 8004924:	464a      	mov	r2, r9
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	47b8      	blx	r7
 800492c:	3001      	adds	r0, #1
 800492e:	f43f ae41 	beq.w	80045b4 <_printf_float+0x9c>
 8004932:	f108 0801 	add.w	r8, r8, #1
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	4543      	cmp	r3, r8
 800493e:	dcf0      	bgt.n	8004922 <_printf_float+0x40a>
 8004940:	e6fa      	b.n	8004738 <_printf_float+0x220>
 8004942:	f04f 0800 	mov.w	r8, #0
 8004946:	f104 0919 	add.w	r9, r4, #25
 800494a:	e7f4      	b.n	8004936 <_printf_float+0x41e>
 800494c:	2900      	cmp	r1, #0
 800494e:	f43f ae8a 	beq.w	8004666 <_printf_float+0x14e>
 8004952:	f04f 0c00 	mov.w	ip, #0
 8004956:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800495a:	e9cd 0900 	strd	r0, r9, [sp]
 800495e:	6022      	str	r2, [r4, #0]
 8004960:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004964:	4628      	mov	r0, r5
 8004966:	f7ff fd51 	bl	800440c <__cvt>
 800496a:	4680      	mov	r8, r0
 800496c:	e64a      	b.n	8004604 <_printf_float+0xec>
 800496e:	bf00      	nop

08004970 <_printf_common>:
 8004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	4691      	mov	r9, r2
 8004976:	461f      	mov	r7, r3
 8004978:	688a      	ldr	r2, [r1, #8]
 800497a:	690b      	ldr	r3, [r1, #16]
 800497c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004980:	4293      	cmp	r3, r2
 8004982:	bfb8      	it	lt
 8004984:	4613      	movlt	r3, r2
 8004986:	f8c9 3000 	str.w	r3, [r9]
 800498a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800498e:	4606      	mov	r6, r0
 8004990:	460c      	mov	r4, r1
 8004992:	b112      	cbz	r2, 800499a <_printf_common+0x2a>
 8004994:	3301      	adds	r3, #1
 8004996:	f8c9 3000 	str.w	r3, [r9]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0699      	lsls	r1, r3, #26
 800499e:	bf42      	ittt	mi
 80049a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049a4:	3302      	addmi	r3, #2
 80049a6:	f8c9 3000 	strmi.w	r3, [r9]
 80049aa:	6825      	ldr	r5, [r4, #0]
 80049ac:	f015 0506 	ands.w	r5, r5, #6
 80049b0:	d107      	bne.n	80049c2 <_printf_common+0x52>
 80049b2:	f104 0a19 	add.w	sl, r4, #25
 80049b6:	68e3      	ldr	r3, [r4, #12]
 80049b8:	f8d9 2000 	ldr.w	r2, [r9]
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	42ab      	cmp	r3, r5
 80049c0:	dc28      	bgt.n	8004a14 <_printf_common+0xa4>
 80049c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049c6:	6822      	ldr	r2, [r4, #0]
 80049c8:	3300      	adds	r3, #0
 80049ca:	bf18      	it	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	0692      	lsls	r2, r2, #26
 80049d0:	d42d      	bmi.n	8004a2e <_printf_common+0xbe>
 80049d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d6:	4639      	mov	r1, r7
 80049d8:	4630      	mov	r0, r6
 80049da:	47c0      	blx	r8
 80049dc:	3001      	adds	r0, #1
 80049de:	d020      	beq.n	8004a22 <_printf_common+0xb2>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	68e5      	ldr	r5, [r4, #12]
 80049e4:	f8d9 2000 	ldr.w	r2, [r9]
 80049e8:	f003 0306 	and.w	r3, r3, #6
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	bf08      	it	eq
 80049f0:	1aad      	subeq	r5, r5, r2
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	bf0c      	ite	eq
 80049f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049fc:	2500      	movne	r5, #0
 80049fe:	4293      	cmp	r3, r2
 8004a00:	bfc4      	itt	gt
 8004a02:	1a9b      	subgt	r3, r3, r2
 8004a04:	18ed      	addgt	r5, r5, r3
 8004a06:	f04f 0900 	mov.w	r9, #0
 8004a0a:	341a      	adds	r4, #26
 8004a0c:	454d      	cmp	r5, r9
 8004a0e:	d11a      	bne.n	8004a46 <_printf_common+0xd6>
 8004a10:	2000      	movs	r0, #0
 8004a12:	e008      	b.n	8004a26 <_printf_common+0xb6>
 8004a14:	2301      	movs	r3, #1
 8004a16:	4652      	mov	r2, sl
 8004a18:	4639      	mov	r1, r7
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	47c0      	blx	r8
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d103      	bne.n	8004a2a <_printf_common+0xba>
 8004a22:	f04f 30ff 	mov.w	r0, #4294967295
 8004a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2a:	3501      	adds	r5, #1
 8004a2c:	e7c3      	b.n	80049b6 <_printf_common+0x46>
 8004a2e:	18e1      	adds	r1, r4, r3
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	2030      	movs	r0, #48	; 0x30
 8004a34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a38:	4422      	add	r2, r4
 8004a3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a42:	3302      	adds	r3, #2
 8004a44:	e7c5      	b.n	80049d2 <_printf_common+0x62>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4622      	mov	r2, r4
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	47c0      	blx	r8
 8004a50:	3001      	adds	r0, #1
 8004a52:	d0e6      	beq.n	8004a22 <_printf_common+0xb2>
 8004a54:	f109 0901 	add.w	r9, r9, #1
 8004a58:	e7d8      	b.n	8004a0c <_printf_common+0x9c>

08004a5a <strncmp>:
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	b16a      	cbz	r2, 8004a7a <strncmp+0x20>
 8004a5e:	3901      	subs	r1, #1
 8004a60:	1884      	adds	r4, r0, r2
 8004a62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004a66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d103      	bne.n	8004a76 <strncmp+0x1c>
 8004a6e:	42a0      	cmp	r0, r4
 8004a70:	d001      	beq.n	8004a76 <strncmp+0x1c>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f5      	bne.n	8004a62 <strncmp+0x8>
 8004a76:	1a98      	subs	r0, r3, r2
 8004a78:	bd10      	pop	{r4, pc}
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	e7fc      	b.n	8004a78 <strncmp+0x1e>

08004a7e <strstr>:
 8004a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a80:	7803      	ldrb	r3, [r0, #0]
 8004a82:	b17b      	cbz	r3, 8004aa4 <strstr+0x26>
 8004a84:	4604      	mov	r4, r0
 8004a86:	7823      	ldrb	r3, [r4, #0]
 8004a88:	4620      	mov	r0, r4
 8004a8a:	1c66      	adds	r6, r4, #1
 8004a8c:	b17b      	cbz	r3, 8004aae <strstr+0x30>
 8004a8e:	1e4a      	subs	r2, r1, #1
 8004a90:	1e63      	subs	r3, r4, #1
 8004a92:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004a96:	b14d      	cbz	r5, 8004aac <strstr+0x2e>
 8004a98:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004a9c:	42af      	cmp	r7, r5
 8004a9e:	4634      	mov	r4, r6
 8004aa0:	d0f7      	beq.n	8004a92 <strstr+0x14>
 8004aa2:	e7f0      	b.n	8004a86 <strstr+0x8>
 8004aa4:	780b      	ldrb	r3, [r1, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bf18      	it	ne
 8004aaa:	2000      	movne	r0, #0
 8004aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	e7fc      	b.n	8004aac <strstr+0x2e>

08004ab2 <quorem>:
 8004ab2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab6:	6903      	ldr	r3, [r0, #16]
 8004ab8:	690c      	ldr	r4, [r1, #16]
 8004aba:	42a3      	cmp	r3, r4
 8004abc:	4680      	mov	r8, r0
 8004abe:	f2c0 8082 	blt.w	8004bc6 <quorem+0x114>
 8004ac2:	3c01      	subs	r4, #1
 8004ac4:	f101 0714 	add.w	r7, r1, #20
 8004ac8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004acc:	f100 0614 	add.w	r6, r0, #20
 8004ad0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004ad4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004ad8:	eb06 030c 	add.w	r3, r6, ip
 8004adc:	3501      	adds	r5, #1
 8004ade:	eb07 090c 	add.w	r9, r7, ip
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	fbb0 f5f5 	udiv	r5, r0, r5
 8004ae8:	b395      	cbz	r5, 8004b50 <quorem+0x9e>
 8004aea:	f04f 0a00 	mov.w	sl, #0
 8004aee:	4638      	mov	r0, r7
 8004af0:	46b6      	mov	lr, r6
 8004af2:	46d3      	mov	fp, sl
 8004af4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004af8:	b293      	uxth	r3, r2
 8004afa:	fb05 a303 	mla	r3, r5, r3, sl
 8004afe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	ebab 0303 	sub.w	r3, fp, r3
 8004b08:	0c12      	lsrs	r2, r2, #16
 8004b0a:	f8de b000 	ldr.w	fp, [lr]
 8004b0e:	fb05 a202 	mla	r2, r5, r2, sl
 8004b12:	fa13 f38b 	uxtah	r3, r3, fp
 8004b16:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b1a:	fa1f fb82 	uxth.w	fp, r2
 8004b1e:	f8de 2000 	ldr.w	r2, [lr]
 8004b22:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b30:	4581      	cmp	r9, r0
 8004b32:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004b36:	f84e 3b04 	str.w	r3, [lr], #4
 8004b3a:	d2db      	bcs.n	8004af4 <quorem+0x42>
 8004b3c:	f856 300c 	ldr.w	r3, [r6, ip]
 8004b40:	b933      	cbnz	r3, 8004b50 <quorem+0x9e>
 8004b42:	9b01      	ldr	r3, [sp, #4]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	429e      	cmp	r6, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	d330      	bcc.n	8004bae <quorem+0xfc>
 8004b4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b50:	4640      	mov	r0, r8
 8004b52:	f000 ffbf 	bl	8005ad4 <__mcmp>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	db25      	blt.n	8004ba6 <quorem+0xf4>
 8004b5a:	3501      	adds	r5, #1
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	f04f 0c00 	mov.w	ip, #0
 8004b62:	f857 2b04 	ldr.w	r2, [r7], #4
 8004b66:	f8d0 e000 	ldr.w	lr, [r0]
 8004b6a:	b293      	uxth	r3, r2
 8004b6c:	ebac 0303 	sub.w	r3, ip, r3
 8004b70:	0c12      	lsrs	r2, r2, #16
 8004b72:	fa13 f38e 	uxtah	r3, r3, lr
 8004b76:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b84:	45b9      	cmp	r9, r7
 8004b86:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b8a:	f840 3b04 	str.w	r3, [r0], #4
 8004b8e:	d2e8      	bcs.n	8004b62 <quorem+0xb0>
 8004b90:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b94:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b98:	b92a      	cbnz	r2, 8004ba6 <quorem+0xf4>
 8004b9a:	3b04      	subs	r3, #4
 8004b9c:	429e      	cmp	r6, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	d30b      	bcc.n	8004bba <quorem+0x108>
 8004ba2:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	b003      	add	sp, #12
 8004baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	3b04      	subs	r3, #4
 8004bb2:	2a00      	cmp	r2, #0
 8004bb4:	d1ca      	bne.n	8004b4c <quorem+0x9a>
 8004bb6:	3c01      	subs	r4, #1
 8004bb8:	e7c5      	b.n	8004b46 <quorem+0x94>
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	3b04      	subs	r3, #4
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	d1ef      	bne.n	8004ba2 <quorem+0xf0>
 8004bc2:	3c01      	subs	r4, #1
 8004bc4:	e7ea      	b.n	8004b9c <quorem+0xea>
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	e7ee      	b.n	8004ba8 <quorem+0xf6>
 8004bca:	0000      	movs	r0, r0
 8004bcc:	0000      	movs	r0, r0
	...

08004bd0 <_dtoa_r>:
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	ec57 6b10 	vmov	r6, r7, d0
 8004bd8:	b095      	sub	sp, #84	; 0x54
 8004bda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004bdc:	9108      	str	r1, [sp, #32]
 8004bde:	4604      	mov	r4, r0
 8004be0:	920a      	str	r2, [sp, #40]	; 0x28
 8004be2:	9311      	str	r3, [sp, #68]	; 0x44
 8004be4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004be8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004bec:	b93d      	cbnz	r5, 8004bfe <_dtoa_r+0x2e>
 8004bee:	2010      	movs	r0, #16
 8004bf0:	f000 fd48 	bl	8005684 <malloc>
 8004bf4:	6260      	str	r0, [r4, #36]	; 0x24
 8004bf6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004bfa:	6005      	str	r5, [r0, #0]
 8004bfc:	60c5      	str	r5, [r0, #12]
 8004bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	b151      	cbz	r1, 8004c1a <_dtoa_r+0x4a>
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	604a      	str	r2, [r1, #4]
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4093      	lsls	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f000 fd7f 	bl	8005712 <_Bfree>
 8004c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	1e3b      	subs	r3, r7, #0
 8004c1c:	bfb9      	ittee	lt
 8004c1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c22:	9303      	strlt	r3, [sp, #12]
 8004c24:	2300      	movge	r3, #0
 8004c26:	f8c8 3000 	strge.w	r3, [r8]
 8004c2a:	9d03      	ldr	r5, [sp, #12]
 8004c2c:	4bac      	ldr	r3, [pc, #688]	; (8004ee0 <_dtoa_r+0x310>)
 8004c2e:	bfbc      	itt	lt
 8004c30:	2201      	movlt	r2, #1
 8004c32:	f8c8 2000 	strlt.w	r2, [r8]
 8004c36:	43ab      	bics	r3, r5
 8004c38:	d11b      	bne.n	8004c72 <_dtoa_r+0xa2>
 8004c3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c3c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	9b02      	ldr	r3, [sp, #8]
 8004c44:	b923      	cbnz	r3, 8004c50 <_dtoa_r+0x80>
 8004c46:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004c4a:	2d00      	cmp	r5, #0
 8004c4c:	f000 84dd 	beq.w	800560a <_dtoa_r+0xa3a>
 8004c50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c52:	b953      	cbnz	r3, 8004c6a <_dtoa_r+0x9a>
 8004c54:	4ba3      	ldr	r3, [pc, #652]	; (8004ee4 <_dtoa_r+0x314>)
 8004c56:	e020      	b.n	8004c9a <_dtoa_r+0xca>
 8004c58:	4ba3      	ldr	r3, [pc, #652]	; (8004ee8 <_dtoa_r+0x318>)
 8004c5a:	9304      	str	r3, [sp, #16]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	9804      	ldr	r0, [sp, #16]
 8004c64:	b015      	add	sp, #84	; 0x54
 8004c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6a:	4b9e      	ldr	r3, [pc, #632]	; (8004ee4 <_dtoa_r+0x314>)
 8004c6c:	9304      	str	r3, [sp, #16]
 8004c6e:	3303      	adds	r3, #3
 8004c70:	e7f5      	b.n	8004c5e <_dtoa_r+0x8e>
 8004c72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004c82:	d10c      	bne.n	8004c9e <_dtoa_r+0xce>
 8004c84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c86:	2301      	movs	r3, #1
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 84b9 	beq.w	8005604 <_dtoa_r+0xa34>
 8004c92:	4b96      	ldr	r3, [pc, #600]	; (8004eec <_dtoa_r+0x31c>)
 8004c94:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	9304      	str	r3, [sp, #16]
 8004c9c:	e7e1      	b.n	8004c62 <_dtoa_r+0x92>
 8004c9e:	a913      	add	r1, sp, #76	; 0x4c
 8004ca0:	aa12      	add	r2, sp, #72	; 0x48
 8004ca2:	ed9d 0b04 	vldr	d0, [sp, #16]
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 ff8b 	bl	8005bc2 <__d2b>
 8004cac:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8004cb0:	9001      	str	r0, [sp, #4]
 8004cb2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	d046      	beq.n	8004d46 <_dtoa_r+0x176>
 8004cb8:	9805      	ldr	r0, [sp, #20]
 8004cba:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8004cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cc2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8004cc6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004cca:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8004cce:	2700      	movs	r7, #0
 8004cd0:	ee07 aa90 	vmov	s15, sl
 8004cd4:	ec43 2b16 	vmov	d6, r2, r3
 8004cd8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8004cdc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8004ec8 <_dtoa_r+0x2f8>
 8004ce0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8004ce4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ce8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8004ed0 <_dtoa_r+0x300>
 8004cec:	eea7 6b04 	vfma.f64	d6, d7, d4
 8004cf0:	eeb0 7b46 	vmov.f64	d7, d6
 8004cf4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8004ed8 <_dtoa_r+0x308>
 8004cf8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004cfc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004d00:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d08:	ee16 ba90 	vmov	fp, s13
 8004d0c:	d508      	bpl.n	8004d20 <_dtoa_r+0x150>
 8004d0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004d12:	eeb4 6b47 	vcmp.f64	d6, d7
 8004d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1a:	bf18      	it	ne
 8004d1c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004d20:	f1bb 0f16 	cmp.w	fp, #22
 8004d24:	d834      	bhi.n	8004d90 <_dtoa_r+0x1c0>
 8004d26:	4b72      	ldr	r3, [pc, #456]	; (8004ef0 <_dtoa_r+0x320>)
 8004d28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004d2c:	ed93 7b00 	vldr	d7, [r3]
 8004d30:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004d34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3c:	dd01      	ble.n	8004d42 <_dtoa_r+0x172>
 8004d3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d42:	2300      	movs	r3, #0
 8004d44:	e025      	b.n	8004d92 <_dtoa_r+0x1c2>
 8004d46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d48:	eb01 0a03 	add.w	sl, r1, r3
 8004d4c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	dd17      	ble.n	8004d84 <_dtoa_r+0x1b4>
 8004d54:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004d58:	9a02      	ldr	r2, [sp, #8]
 8004d5a:	409d      	lsls	r5, r3
 8004d5c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	432b      	orrs	r3, r5
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d72:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004d76:	9805      	ldr	r0, [sp, #20]
 8004d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d7c:	2701      	movs	r7, #1
 8004d7e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8004d82:	e7a5      	b.n	8004cd0 <_dtoa_r+0x100>
 8004d84:	9a02      	ldr	r2, [sp, #8]
 8004d86:	f1c3 0320 	rsb	r3, r3, #32
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	e7ea      	b.n	8004d66 <_dtoa_r+0x196>
 8004d90:	2301      	movs	r3, #1
 8004d92:	eba1 0a0a 	sub.w	sl, r1, sl
 8004d96:	9310      	str	r3, [sp, #64]	; 0x40
 8004d98:	f1ba 0301 	subs.w	r3, sl, #1
 8004d9c:	9307      	str	r3, [sp, #28]
 8004d9e:	bf43      	ittte	mi
 8004da0:	2300      	movmi	r3, #0
 8004da2:	f1ca 0a01 	rsbmi	sl, sl, #1
 8004da6:	9307      	strmi	r3, [sp, #28]
 8004da8:	f04f 0a00 	movpl.w	sl, #0
 8004dac:	f1bb 0f00 	cmp.w	fp, #0
 8004db0:	db19      	blt.n	8004de6 <_dtoa_r+0x216>
 8004db2:	9b07      	ldr	r3, [sp, #28]
 8004db4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004db8:	445b      	add	r3, fp
 8004dba:	9307      	str	r3, [sp, #28]
 8004dbc:	f04f 0800 	mov.w	r8, #0
 8004dc0:	9b08      	ldr	r3, [sp, #32]
 8004dc2:	2b09      	cmp	r3, #9
 8004dc4:	d866      	bhi.n	8004e94 <_dtoa_r+0x2c4>
 8004dc6:	2b05      	cmp	r3, #5
 8004dc8:	bfc4      	itt	gt
 8004dca:	3b04      	subgt	r3, #4
 8004dcc:	9308      	strgt	r3, [sp, #32]
 8004dce:	9b08      	ldr	r3, [sp, #32]
 8004dd0:	f1a3 0302 	sub.w	r3, r3, #2
 8004dd4:	bfcc      	ite	gt
 8004dd6:	2500      	movgt	r5, #0
 8004dd8:	2501      	movle	r5, #1
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d866      	bhi.n	8004eac <_dtoa_r+0x2dc>
 8004dde:	e8df f003 	tbb	[pc, r3]
 8004de2:	5755      	.short	0x5755
 8004de4:	4909      	.short	0x4909
 8004de6:	2300      	movs	r3, #0
 8004de8:	ebaa 0a0b 	sub.w	sl, sl, fp
 8004dec:	f1cb 0800 	rsb	r8, fp, #0
 8004df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004df2:	e7e5      	b.n	8004dc0 <_dtoa_r+0x1f0>
 8004df4:	2301      	movs	r3, #1
 8004df6:	9309      	str	r3, [sp, #36]	; 0x24
 8004df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dd59      	ble.n	8004eb2 <_dtoa_r+0x2e2>
 8004dfe:	9306      	str	r3, [sp, #24]
 8004e00:	4699      	mov	r9, r3
 8004e02:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e04:	2200      	movs	r2, #0
 8004e06:	6072      	str	r2, [r6, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	f102 0014 	add.w	r0, r2, #20
 8004e0e:	4298      	cmp	r0, r3
 8004e10:	6871      	ldr	r1, [r6, #4]
 8004e12:	d953      	bls.n	8004ebc <_dtoa_r+0x2ec>
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 fc48 	bl	80056aa <_Balloc>
 8004e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e1c:	6030      	str	r0, [r6, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	9304      	str	r3, [sp, #16]
 8004e22:	f1b9 0f0e 	cmp.w	r9, #14
 8004e26:	f200 80c2 	bhi.w	8004fae <_dtoa_r+0x3de>
 8004e2a:	2d00      	cmp	r5, #0
 8004e2c:	f000 80bf 	beq.w	8004fae <_dtoa_r+0x3de>
 8004e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e34:	f1bb 0f00 	cmp.w	fp, #0
 8004e38:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004e3c:	f340 80e6 	ble.w	800500c <_dtoa_r+0x43c>
 8004e40:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <_dtoa_r+0x320>)
 8004e42:	f00b 030f 	and.w	r3, fp, #15
 8004e46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e4a:	ed93 7b00 	vldr	d7, [r3]
 8004e4e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8004e52:	06da      	lsls	r2, r3, #27
 8004e54:	f140 80d8 	bpl.w	8005008 <_dtoa_r+0x438>
 8004e58:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <_dtoa_r+0x324>)
 8004e5a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8004e5e:	ed92 6b08 	vldr	d6, [r2, #32]
 8004e62:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004e66:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4920      	ldr	r1, [pc, #128]	; (8004ef4 <_dtoa_r+0x324>)
 8004e72:	e04a      	b.n	8004f0a <_dtoa_r+0x33a>
 8004e74:	2301      	movs	r3, #1
 8004e76:	9309      	str	r3, [sp, #36]	; 0x24
 8004e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7a:	445b      	add	r3, fp
 8004e7c:	f103 0901 	add.w	r9, r3, #1
 8004e80:	9306      	str	r3, [sp, #24]
 8004e82:	464b      	mov	r3, r9
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bfb8      	it	lt
 8004e88:	2301      	movlt	r3, #1
 8004e8a:	e7ba      	b.n	8004e02 <_dtoa_r+0x232>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e7b2      	b.n	8004df6 <_dtoa_r+0x226>
 8004e90:	2300      	movs	r3, #0
 8004e92:	e7f0      	b.n	8004e76 <_dtoa_r+0x2a6>
 8004e94:	2501      	movs	r5, #1
 8004e96:	2300      	movs	r3, #0
 8004e98:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8004e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea0:	9306      	str	r3, [sp, #24]
 8004ea2:	4699      	mov	r9, r3
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2312      	movs	r3, #18
 8004ea8:	920a      	str	r2, [sp, #40]	; 0x28
 8004eaa:	e7aa      	b.n	8004e02 <_dtoa_r+0x232>
 8004eac:	2301      	movs	r3, #1
 8004eae:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb0:	e7f4      	b.n	8004e9c <_dtoa_r+0x2cc>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	9306      	str	r3, [sp, #24]
 8004eb6:	4699      	mov	r9, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	e7f5      	b.n	8004ea8 <_dtoa_r+0x2d8>
 8004ebc:	3101      	adds	r1, #1
 8004ebe:	6071      	str	r1, [r6, #4]
 8004ec0:	0052      	lsls	r2, r2, #1
 8004ec2:	e7a2      	b.n	8004e0a <_dtoa_r+0x23a>
 8004ec4:	f3af 8000 	nop.w
 8004ec8:	636f4361 	.word	0x636f4361
 8004ecc:	3fd287a7 	.word	0x3fd287a7
 8004ed0:	8b60c8b3 	.word	0x8b60c8b3
 8004ed4:	3fc68a28 	.word	0x3fc68a28
 8004ed8:	509f79fb 	.word	0x509f79fb
 8004edc:	3fd34413 	.word	0x3fd34413
 8004ee0:	7ff00000 	.word	0x7ff00000
 8004ee4:	08005ff7 	.word	0x08005ff7
 8004ee8:	08005fee 	.word	0x08005fee
 8004eec:	08005fed 	.word	0x08005fed
 8004ef0:	08006028 	.word	0x08006028
 8004ef4:	08006000 	.word	0x08006000
 8004ef8:	07de      	lsls	r6, r3, #31
 8004efa:	d504      	bpl.n	8004f06 <_dtoa_r+0x336>
 8004efc:	ed91 6b00 	vldr	d6, [r1]
 8004f00:	3201      	adds	r2, #1
 8004f02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f06:	105b      	asrs	r3, r3, #1
 8004f08:	3108      	adds	r1, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f4      	bne.n	8004ef8 <_dtoa_r+0x328>
 8004f0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004f12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004f16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80a7 	beq.w	8005070 <_dtoa_r+0x4a0>
 8004f22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004f26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	f140 809d 	bpl.w	8005070 <_dtoa_r+0x4a0>
 8004f36:	f1b9 0f00 	cmp.w	r9, #0
 8004f3a:	f000 8099 	beq.w	8005070 <_dtoa_r+0x4a0>
 8004f3e:	9b06      	ldr	r3, [sp, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	dd30      	ble.n	8004fa6 <_dtoa_r+0x3d6>
 8004f44:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004f48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f50:	9d06      	ldr	r5, [sp, #24]
 8004f52:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004f56:	3201      	adds	r2, #1
 8004f58:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004f5c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004f60:	ee07 2a90 	vmov	s15, r2
 8004f64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f68:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004f6c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8004f70:	9a03      	ldr	r2, [sp, #12]
 8004f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f76:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8004f7a:	2d00      	cmp	r5, #0
 8004f7c:	d17b      	bne.n	8005076 <_dtoa_r+0x4a6>
 8004f7e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004f82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f86:	ec41 0b17 	vmov	d7, r0, r1
 8004f8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f92:	f300 8253 	bgt.w	800543c <_dtoa_r+0x86c>
 8004f96:	eeb1 7b47 	vneg.f64	d7, d7
 8004f9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	f100 8249 	bmi.w	8005438 <_dtoa_r+0x868>
 8004fa6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004faa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f2c0 8119 	blt.w	80051e8 <_dtoa_r+0x618>
 8004fb6:	f1bb 0f0e 	cmp.w	fp, #14
 8004fba:	f300 8115 	bgt.w	80051e8 <_dtoa_r+0x618>
 8004fbe:	4bc3      	ldr	r3, [pc, #780]	; (80052cc <_dtoa_r+0x6fc>)
 8004fc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004fc4:	ed93 6b00 	vldr	d6, [r3]
 8004fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f280 80ba 	bge.w	8005144 <_dtoa_r+0x574>
 8004fd0:	f1b9 0f00 	cmp.w	r9, #0
 8004fd4:	f300 80b6 	bgt.w	8005144 <_dtoa_r+0x574>
 8004fd8:	f040 822d 	bne.w	8005436 <_dtoa_r+0x866>
 8004fdc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004fe0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004fe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fe8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff0:	464d      	mov	r5, r9
 8004ff2:	464f      	mov	r7, r9
 8004ff4:	f280 8204 	bge.w	8005400 <_dtoa_r+0x830>
 8004ff8:	9b04      	ldr	r3, [sp, #16]
 8004ffa:	9a04      	ldr	r2, [sp, #16]
 8004ffc:	1c5e      	adds	r6, r3, #1
 8004ffe:	2331      	movs	r3, #49	; 0x31
 8005000:	7013      	strb	r3, [r2, #0]
 8005002:	f10b 0b01 	add.w	fp, fp, #1
 8005006:	e1ff      	b.n	8005408 <_dtoa_r+0x838>
 8005008:	2202      	movs	r2, #2
 800500a:	e731      	b.n	8004e70 <_dtoa_r+0x2a0>
 800500c:	d02e      	beq.n	800506c <_dtoa_r+0x49c>
 800500e:	f1cb 0300 	rsb	r3, fp, #0
 8005012:	4aae      	ldr	r2, [pc, #696]	; (80052cc <_dtoa_r+0x6fc>)
 8005014:	f003 010f 	and.w	r1, r3, #15
 8005018:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800501c:	ed92 7b00 	vldr	d7, [r2]
 8005020:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8005024:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005028:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800502c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8005030:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005034:	49a6      	ldr	r1, [pc, #664]	; (80052d0 <_dtoa_r+0x700>)
 8005036:	111b      	asrs	r3, r3, #4
 8005038:	2000      	movs	r0, #0
 800503a:	2202      	movs	r2, #2
 800503c:	b93b      	cbnz	r3, 800504e <_dtoa_r+0x47e>
 800503e:	2800      	cmp	r0, #0
 8005040:	f43f af6b 	beq.w	8004f1a <_dtoa_r+0x34a>
 8005044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800504c:	e765      	b.n	8004f1a <_dtoa_r+0x34a>
 800504e:	07dd      	lsls	r5, r3, #31
 8005050:	d509      	bpl.n	8005066 <_dtoa_r+0x496>
 8005052:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8005056:	ed91 7b00 	vldr	d7, [r1]
 800505a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800505e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005062:	3201      	adds	r2, #1
 8005064:	2001      	movs	r0, #1
 8005066:	105b      	asrs	r3, r3, #1
 8005068:	3108      	adds	r1, #8
 800506a:	e7e7      	b.n	800503c <_dtoa_r+0x46c>
 800506c:	2202      	movs	r2, #2
 800506e:	e754      	b.n	8004f1a <_dtoa_r+0x34a>
 8005070:	465b      	mov	r3, fp
 8005072:	464d      	mov	r5, r9
 8005074:	e770      	b.n	8004f58 <_dtoa_r+0x388>
 8005076:	4a95      	ldr	r2, [pc, #596]	; (80052cc <_dtoa_r+0x6fc>)
 8005078:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800507c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005082:	ec41 0b17 	vmov	d7, r0, r1
 8005086:	b35a      	cbz	r2, 80050e0 <_dtoa_r+0x510>
 8005088:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800508c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005090:	9e04      	ldr	r6, [sp, #16]
 8005092:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005096:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800509a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800509e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80050a2:	ee14 2a90 	vmov	r2, s9
 80050a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80050aa:	3230      	adds	r2, #48	; 0x30
 80050ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80050b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	f806 2b01 	strb.w	r2, [r6], #1
 80050bc:	d43b      	bmi.n	8005136 <_dtoa_r+0x566>
 80050be:	ee32 5b46 	vsub.f64	d5, d2, d6
 80050c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	d472      	bmi.n	80051b2 <_dtoa_r+0x5e2>
 80050cc:	9a04      	ldr	r2, [sp, #16]
 80050ce:	1ab2      	subs	r2, r6, r2
 80050d0:	4295      	cmp	r5, r2
 80050d2:	f77f af68 	ble.w	8004fa6 <_dtoa_r+0x3d6>
 80050d6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80050da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80050de:	e7de      	b.n	800509e <_dtoa_r+0x4ce>
 80050e0:	9a04      	ldr	r2, [sp, #16]
 80050e2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80050e6:	1956      	adds	r6, r2, r5
 80050e8:	4611      	mov	r1, r2
 80050ea:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80050ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80050f2:	ee14 2a90 	vmov	r2, s9
 80050f6:	3230      	adds	r2, #48	; 0x30
 80050f8:	f801 2b01 	strb.w	r2, [r1], #1
 80050fc:	42b1      	cmp	r1, r6
 80050fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005102:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005106:	d11a      	bne.n	800513e <_dtoa_r+0x56e>
 8005108:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800510c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005110:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005118:	dc4b      	bgt.n	80051b2 <_dtoa_r+0x5e2>
 800511a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800511e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005126:	f57f af3e 	bpl.w	8004fa6 <_dtoa_r+0x3d6>
 800512a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800512e:	2a30      	cmp	r2, #48	; 0x30
 8005130:	f106 31ff 	add.w	r1, r6, #4294967295
 8005134:	d001      	beq.n	800513a <_dtoa_r+0x56a>
 8005136:	469b      	mov	fp, r3
 8005138:	e02a      	b.n	8005190 <_dtoa_r+0x5c0>
 800513a:	460e      	mov	r6, r1
 800513c:	e7f5      	b.n	800512a <_dtoa_r+0x55a>
 800513e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005142:	e7d4      	b.n	80050ee <_dtoa_r+0x51e>
 8005144:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005148:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800514c:	9e04      	ldr	r6, [sp, #16]
 800514e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005152:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005156:	ee15 3a10 	vmov	r3, s10
 800515a:	3330      	adds	r3, #48	; 0x30
 800515c:	f806 3b01 	strb.w	r3, [r6], #1
 8005160:	9b04      	ldr	r3, [sp, #16]
 8005162:	1af3      	subs	r3, r6, r3
 8005164:	4599      	cmp	r9, r3
 8005166:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800516a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800516e:	d133      	bne.n	80051d8 <_dtoa_r+0x608>
 8005170:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005174:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517c:	dc18      	bgt.n	80051b0 <_dtoa_r+0x5e0>
 800517e:	eeb4 7b46 	vcmp.f64	d7, d6
 8005182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005186:	d103      	bne.n	8005190 <_dtoa_r+0x5c0>
 8005188:	ee15 3a10 	vmov	r3, s10
 800518c:	07db      	lsls	r3, r3, #31
 800518e:	d40f      	bmi.n	80051b0 <_dtoa_r+0x5e0>
 8005190:	9901      	ldr	r1, [sp, #4]
 8005192:	4620      	mov	r0, r4
 8005194:	f000 fabd 	bl	8005712 <_Bfree>
 8005198:	2300      	movs	r3, #0
 800519a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800519c:	7033      	strb	r3, [r6, #0]
 800519e:	f10b 0301 	add.w	r3, fp, #1
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f43f ad5b 	beq.w	8004c62 <_dtoa_r+0x92>
 80051ac:	601e      	str	r6, [r3, #0]
 80051ae:	e558      	b.n	8004c62 <_dtoa_r+0x92>
 80051b0:	465b      	mov	r3, fp
 80051b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80051b6:	2939      	cmp	r1, #57	; 0x39
 80051b8:	f106 32ff 	add.w	r2, r6, #4294967295
 80051bc:	d106      	bne.n	80051cc <_dtoa_r+0x5fc>
 80051be:	9904      	ldr	r1, [sp, #16]
 80051c0:	4291      	cmp	r1, r2
 80051c2:	d107      	bne.n	80051d4 <_dtoa_r+0x604>
 80051c4:	2230      	movs	r2, #48	; 0x30
 80051c6:	700a      	strb	r2, [r1, #0]
 80051c8:	3301      	adds	r3, #1
 80051ca:	460a      	mov	r2, r1
 80051cc:	7811      	ldrb	r1, [r2, #0]
 80051ce:	3101      	adds	r1, #1
 80051d0:	7011      	strb	r1, [r2, #0]
 80051d2:	e7b0      	b.n	8005136 <_dtoa_r+0x566>
 80051d4:	4616      	mov	r6, r2
 80051d6:	e7ec      	b.n	80051b2 <_dtoa_r+0x5e2>
 80051d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80051dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80051e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e4:	d1b3      	bne.n	800514e <_dtoa_r+0x57e>
 80051e6:	e7d3      	b.n	8005190 <_dtoa_r+0x5c0>
 80051e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ea:	2a00      	cmp	r2, #0
 80051ec:	f000 808d 	beq.w	800530a <_dtoa_r+0x73a>
 80051f0:	9a08      	ldr	r2, [sp, #32]
 80051f2:	2a01      	cmp	r2, #1
 80051f4:	dc72      	bgt.n	80052dc <_dtoa_r+0x70c>
 80051f6:	2f00      	cmp	r7, #0
 80051f8:	d06c      	beq.n	80052d4 <_dtoa_r+0x704>
 80051fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051fe:	4645      	mov	r5, r8
 8005200:	4656      	mov	r6, sl
 8005202:	9a07      	ldr	r2, [sp, #28]
 8005204:	2101      	movs	r1, #1
 8005206:	441a      	add	r2, r3
 8005208:	4620      	mov	r0, r4
 800520a:	449a      	add	sl, r3
 800520c:	9207      	str	r2, [sp, #28]
 800520e:	f000 fb20 	bl	8005852 <__i2b>
 8005212:	4607      	mov	r7, r0
 8005214:	2e00      	cmp	r6, #0
 8005216:	dd0b      	ble.n	8005230 <_dtoa_r+0x660>
 8005218:	9b07      	ldr	r3, [sp, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	dd08      	ble.n	8005230 <_dtoa_r+0x660>
 800521e:	42b3      	cmp	r3, r6
 8005220:	9a07      	ldr	r2, [sp, #28]
 8005222:	bfa8      	it	ge
 8005224:	4633      	movge	r3, r6
 8005226:	ebaa 0a03 	sub.w	sl, sl, r3
 800522a:	1af6      	subs	r6, r6, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	9307      	str	r3, [sp, #28]
 8005230:	f1b8 0f00 	cmp.w	r8, #0
 8005234:	d01d      	beq.n	8005272 <_dtoa_r+0x6a2>
 8005236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d06a      	beq.n	8005312 <_dtoa_r+0x742>
 800523c:	b18d      	cbz	r5, 8005262 <_dtoa_r+0x692>
 800523e:	4639      	mov	r1, r7
 8005240:	462a      	mov	r2, r5
 8005242:	4620      	mov	r0, r4
 8005244:	f000 fba4 	bl	8005990 <__pow5mult>
 8005248:	9a01      	ldr	r2, [sp, #4]
 800524a:	4601      	mov	r1, r0
 800524c:	4607      	mov	r7, r0
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fb08 	bl	8005864 <__multiply>
 8005254:	9901      	ldr	r1, [sp, #4]
 8005256:	900c      	str	r0, [sp, #48]	; 0x30
 8005258:	4620      	mov	r0, r4
 800525a:	f000 fa5a 	bl	8005712 <_Bfree>
 800525e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	ebb8 0205 	subs.w	r2, r8, r5
 8005266:	d004      	beq.n	8005272 <_dtoa_r+0x6a2>
 8005268:	9901      	ldr	r1, [sp, #4]
 800526a:	4620      	mov	r0, r4
 800526c:	f000 fb90 	bl	8005990 <__pow5mult>
 8005270:	9001      	str	r0, [sp, #4]
 8005272:	2101      	movs	r1, #1
 8005274:	4620      	mov	r0, r4
 8005276:	f000 faec 	bl	8005852 <__i2b>
 800527a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800527c:	4605      	mov	r5, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 81ca 	beq.w	8005618 <_dtoa_r+0xa48>
 8005284:	461a      	mov	r2, r3
 8005286:	4601      	mov	r1, r0
 8005288:	4620      	mov	r0, r4
 800528a:	f000 fb81 	bl	8005990 <__pow5mult>
 800528e:	9b08      	ldr	r3, [sp, #32]
 8005290:	2b01      	cmp	r3, #1
 8005292:	4605      	mov	r5, r0
 8005294:	dc44      	bgt.n	8005320 <_dtoa_r+0x750>
 8005296:	9b02      	ldr	r3, [sp, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d13c      	bne.n	8005316 <_dtoa_r+0x746>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d137      	bne.n	8005316 <_dtoa_r+0x746>
 80052a6:	9b03      	ldr	r3, [sp, #12]
 80052a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ac:	0d1b      	lsrs	r3, r3, #20
 80052ae:	051b      	lsls	r3, r3, #20
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d033      	beq.n	800531c <_dtoa_r+0x74c>
 80052b4:	9b07      	ldr	r3, [sp, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	f10a 0a01 	add.w	sl, sl, #1
 80052bc:	9307      	str	r3, [sp, #28]
 80052be:	f04f 0801 	mov.w	r8, #1
 80052c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c4:	bb73      	cbnz	r3, 8005324 <_dtoa_r+0x754>
 80052c6:	2001      	movs	r0, #1
 80052c8:	e034      	b.n	8005334 <_dtoa_r+0x764>
 80052ca:	bf00      	nop
 80052cc:	08006028 	.word	0x08006028
 80052d0:	08006000 	.word	0x08006000
 80052d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052da:	e790      	b.n	80051fe <_dtoa_r+0x62e>
 80052dc:	f109 35ff 	add.w	r5, r9, #4294967295
 80052e0:	45a8      	cmp	r8, r5
 80052e2:	bfbf      	itttt	lt
 80052e4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80052e6:	eba5 0808 	sublt.w	r8, r5, r8
 80052ea:	4443      	addlt	r3, r8
 80052ec:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80052ee:	bfb6      	itet	lt
 80052f0:	46a8      	movlt	r8, r5
 80052f2:	eba8 0505 	subge.w	r5, r8, r5
 80052f6:	2500      	movlt	r5, #0
 80052f8:	f1b9 0f00 	cmp.w	r9, #0
 80052fc:	bfb9      	ittee	lt
 80052fe:	ebaa 0609 	sublt.w	r6, sl, r9
 8005302:	2300      	movlt	r3, #0
 8005304:	4656      	movge	r6, sl
 8005306:	464b      	movge	r3, r9
 8005308:	e77b      	b.n	8005202 <_dtoa_r+0x632>
 800530a:	4645      	mov	r5, r8
 800530c:	4656      	mov	r6, sl
 800530e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005310:	e780      	b.n	8005214 <_dtoa_r+0x644>
 8005312:	4642      	mov	r2, r8
 8005314:	e7a8      	b.n	8005268 <_dtoa_r+0x698>
 8005316:	f04f 0800 	mov.w	r8, #0
 800531a:	e7d2      	b.n	80052c2 <_dtoa_r+0x6f2>
 800531c:	4698      	mov	r8, r3
 800531e:	e7d0      	b.n	80052c2 <_dtoa_r+0x6f2>
 8005320:	f04f 0800 	mov.w	r8, #0
 8005324:	692b      	ldr	r3, [r5, #16]
 8005326:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800532a:	6918      	ldr	r0, [r3, #16]
 800532c:	f000 fa43 	bl	80057b6 <__hi0bits>
 8005330:	f1c0 0020 	rsb	r0, r0, #32
 8005334:	9b07      	ldr	r3, [sp, #28]
 8005336:	4418      	add	r0, r3
 8005338:	f010 001f 	ands.w	r0, r0, #31
 800533c:	d047      	beq.n	80053ce <_dtoa_r+0x7fe>
 800533e:	f1c0 0320 	rsb	r3, r0, #32
 8005342:	2b04      	cmp	r3, #4
 8005344:	dd3b      	ble.n	80053be <_dtoa_r+0x7ee>
 8005346:	9b07      	ldr	r3, [sp, #28]
 8005348:	f1c0 001c 	rsb	r0, r0, #28
 800534c:	4482      	add	sl, r0
 800534e:	4406      	add	r6, r0
 8005350:	4403      	add	r3, r0
 8005352:	9307      	str	r3, [sp, #28]
 8005354:	f1ba 0f00 	cmp.w	sl, #0
 8005358:	dd05      	ble.n	8005366 <_dtoa_r+0x796>
 800535a:	4652      	mov	r2, sl
 800535c:	9901      	ldr	r1, [sp, #4]
 800535e:	4620      	mov	r0, r4
 8005360:	f000 fb64 	bl	8005a2c <__lshift>
 8005364:	9001      	str	r0, [sp, #4]
 8005366:	9b07      	ldr	r3, [sp, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	dd05      	ble.n	8005378 <_dtoa_r+0x7a8>
 800536c:	4629      	mov	r1, r5
 800536e:	461a      	mov	r2, r3
 8005370:	4620      	mov	r0, r4
 8005372:	f000 fb5b 	bl	8005a2c <__lshift>
 8005376:	4605      	mov	r5, r0
 8005378:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800537a:	b353      	cbz	r3, 80053d2 <_dtoa_r+0x802>
 800537c:	4629      	mov	r1, r5
 800537e:	9801      	ldr	r0, [sp, #4]
 8005380:	f000 fba8 	bl	8005ad4 <__mcmp>
 8005384:	2800      	cmp	r0, #0
 8005386:	da24      	bge.n	80053d2 <_dtoa_r+0x802>
 8005388:	2300      	movs	r3, #0
 800538a:	220a      	movs	r2, #10
 800538c:	9901      	ldr	r1, [sp, #4]
 800538e:	4620      	mov	r0, r4
 8005390:	f000 f9d6 	bl	8005740 <__multadd>
 8005394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005396:	9001      	str	r0, [sp, #4]
 8005398:	f10b 3bff 	add.w	fp, fp, #4294967295
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8142 	beq.w	8005626 <_dtoa_r+0xa56>
 80053a2:	2300      	movs	r3, #0
 80053a4:	4639      	mov	r1, r7
 80053a6:	220a      	movs	r2, #10
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 f9c9 	bl	8005740 <__multadd>
 80053ae:	9b06      	ldr	r3, [sp, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	4607      	mov	r7, r0
 80053b4:	dc4b      	bgt.n	800544e <_dtoa_r+0x87e>
 80053b6:	9b08      	ldr	r3, [sp, #32]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	dd48      	ble.n	800544e <_dtoa_r+0x87e>
 80053bc:	e011      	b.n	80053e2 <_dtoa_r+0x812>
 80053be:	d0c9      	beq.n	8005354 <_dtoa_r+0x784>
 80053c0:	9a07      	ldr	r2, [sp, #28]
 80053c2:	331c      	adds	r3, #28
 80053c4:	441a      	add	r2, r3
 80053c6:	449a      	add	sl, r3
 80053c8:	441e      	add	r6, r3
 80053ca:	4613      	mov	r3, r2
 80053cc:	e7c1      	b.n	8005352 <_dtoa_r+0x782>
 80053ce:	4603      	mov	r3, r0
 80053d0:	e7f6      	b.n	80053c0 <_dtoa_r+0x7f0>
 80053d2:	f1b9 0f00 	cmp.w	r9, #0
 80053d6:	dc34      	bgt.n	8005442 <_dtoa_r+0x872>
 80053d8:	9b08      	ldr	r3, [sp, #32]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	dd31      	ble.n	8005442 <_dtoa_r+0x872>
 80053de:	f8cd 9018 	str.w	r9, [sp, #24]
 80053e2:	9b06      	ldr	r3, [sp, #24]
 80053e4:	b963      	cbnz	r3, 8005400 <_dtoa_r+0x830>
 80053e6:	4629      	mov	r1, r5
 80053e8:	2205      	movs	r2, #5
 80053ea:	4620      	mov	r0, r4
 80053ec:	f000 f9a8 	bl	8005740 <__multadd>
 80053f0:	4601      	mov	r1, r0
 80053f2:	4605      	mov	r5, r0
 80053f4:	9801      	ldr	r0, [sp, #4]
 80053f6:	f000 fb6d 	bl	8005ad4 <__mcmp>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	f73f adfc 	bgt.w	8004ff8 <_dtoa_r+0x428>
 8005400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005402:	9e04      	ldr	r6, [sp, #16]
 8005404:	ea6f 0b03 	mvn.w	fp, r3
 8005408:	f04f 0900 	mov.w	r9, #0
 800540c:	4629      	mov	r1, r5
 800540e:	4620      	mov	r0, r4
 8005410:	f000 f97f 	bl	8005712 <_Bfree>
 8005414:	2f00      	cmp	r7, #0
 8005416:	f43f aebb 	beq.w	8005190 <_dtoa_r+0x5c0>
 800541a:	f1b9 0f00 	cmp.w	r9, #0
 800541e:	d005      	beq.n	800542c <_dtoa_r+0x85c>
 8005420:	45b9      	cmp	r9, r7
 8005422:	d003      	beq.n	800542c <_dtoa_r+0x85c>
 8005424:	4649      	mov	r1, r9
 8005426:	4620      	mov	r0, r4
 8005428:	f000 f973 	bl	8005712 <_Bfree>
 800542c:	4639      	mov	r1, r7
 800542e:	4620      	mov	r0, r4
 8005430:	f000 f96f 	bl	8005712 <_Bfree>
 8005434:	e6ac      	b.n	8005190 <_dtoa_r+0x5c0>
 8005436:	2500      	movs	r5, #0
 8005438:	462f      	mov	r7, r5
 800543a:	e7e1      	b.n	8005400 <_dtoa_r+0x830>
 800543c:	469b      	mov	fp, r3
 800543e:	462f      	mov	r7, r5
 8005440:	e5da      	b.n	8004ff8 <_dtoa_r+0x428>
 8005442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005444:	f8cd 9018 	str.w	r9, [sp, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80f3 	beq.w	8005634 <_dtoa_r+0xa64>
 800544e:	2e00      	cmp	r6, #0
 8005450:	dd05      	ble.n	800545e <_dtoa_r+0x88e>
 8005452:	4639      	mov	r1, r7
 8005454:	4632      	mov	r2, r6
 8005456:	4620      	mov	r0, r4
 8005458:	f000 fae8 	bl	8005a2c <__lshift>
 800545c:	4607      	mov	r7, r0
 800545e:	f1b8 0f00 	cmp.w	r8, #0
 8005462:	d04c      	beq.n	80054fe <_dtoa_r+0x92e>
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4620      	mov	r0, r4
 8005468:	f000 f91f 	bl	80056aa <_Balloc>
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	3202      	adds	r2, #2
 8005470:	4606      	mov	r6, r0
 8005472:	0092      	lsls	r2, r2, #2
 8005474:	f107 010c 	add.w	r1, r7, #12
 8005478:	300c      	adds	r0, #12
 800547a:	f000 f90b 	bl	8005694 <memcpy>
 800547e:	2201      	movs	r2, #1
 8005480:	4631      	mov	r1, r6
 8005482:	4620      	mov	r0, r4
 8005484:	f000 fad2 	bl	8005a2c <__lshift>
 8005488:	9b02      	ldr	r3, [sp, #8]
 800548a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	46b9      	mov	r9, r7
 8005494:	9307      	str	r3, [sp, #28]
 8005496:	4607      	mov	r7, r0
 8005498:	4629      	mov	r1, r5
 800549a:	9801      	ldr	r0, [sp, #4]
 800549c:	f7ff fb09 	bl	8004ab2 <quorem>
 80054a0:	4649      	mov	r1, r9
 80054a2:	4606      	mov	r6, r0
 80054a4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054a8:	9801      	ldr	r0, [sp, #4]
 80054aa:	f000 fb13 	bl	8005ad4 <__mcmp>
 80054ae:	463a      	mov	r2, r7
 80054b0:	9002      	str	r0, [sp, #8]
 80054b2:	4629      	mov	r1, r5
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 fb27 	bl	8005b08 <__mdiff>
 80054ba:	68c3      	ldr	r3, [r0, #12]
 80054bc:	4602      	mov	r2, r0
 80054be:	bb03      	cbnz	r3, 8005502 <_dtoa_r+0x932>
 80054c0:	4601      	mov	r1, r0
 80054c2:	9009      	str	r0, [sp, #36]	; 0x24
 80054c4:	9801      	ldr	r0, [sp, #4]
 80054c6:	f000 fb05 	bl	8005ad4 <__mcmp>
 80054ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054cc:	4603      	mov	r3, r0
 80054ce:	4611      	mov	r1, r2
 80054d0:	4620      	mov	r0, r4
 80054d2:	9309      	str	r3, [sp, #36]	; 0x24
 80054d4:	f000 f91d 	bl	8005712 <_Bfree>
 80054d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054da:	b9a3      	cbnz	r3, 8005506 <_dtoa_r+0x936>
 80054dc:	9a08      	ldr	r2, [sp, #32]
 80054de:	b992      	cbnz	r2, 8005506 <_dtoa_r+0x936>
 80054e0:	9a07      	ldr	r2, [sp, #28]
 80054e2:	b982      	cbnz	r2, 8005506 <_dtoa_r+0x936>
 80054e4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054e8:	d029      	beq.n	800553e <_dtoa_r+0x96e>
 80054ea:	9b02      	ldr	r3, [sp, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dd01      	ble.n	80054f4 <_dtoa_r+0x924>
 80054f0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80054f4:	f10a 0601 	add.w	r6, sl, #1
 80054f8:	f88a 8000 	strb.w	r8, [sl]
 80054fc:	e786      	b.n	800540c <_dtoa_r+0x83c>
 80054fe:	4638      	mov	r0, r7
 8005500:	e7c2      	b.n	8005488 <_dtoa_r+0x8b8>
 8005502:	2301      	movs	r3, #1
 8005504:	e7e3      	b.n	80054ce <_dtoa_r+0x8fe>
 8005506:	9a02      	ldr	r2, [sp, #8]
 8005508:	2a00      	cmp	r2, #0
 800550a:	db04      	blt.n	8005516 <_dtoa_r+0x946>
 800550c:	d124      	bne.n	8005558 <_dtoa_r+0x988>
 800550e:	9a08      	ldr	r2, [sp, #32]
 8005510:	bb12      	cbnz	r2, 8005558 <_dtoa_r+0x988>
 8005512:	9a07      	ldr	r2, [sp, #28]
 8005514:	bb02      	cbnz	r2, 8005558 <_dtoa_r+0x988>
 8005516:	2b00      	cmp	r3, #0
 8005518:	ddec      	ble.n	80054f4 <_dtoa_r+0x924>
 800551a:	2201      	movs	r2, #1
 800551c:	9901      	ldr	r1, [sp, #4]
 800551e:	4620      	mov	r0, r4
 8005520:	f000 fa84 	bl	8005a2c <__lshift>
 8005524:	4629      	mov	r1, r5
 8005526:	9001      	str	r0, [sp, #4]
 8005528:	f000 fad4 	bl	8005ad4 <__mcmp>
 800552c:	2800      	cmp	r0, #0
 800552e:	dc03      	bgt.n	8005538 <_dtoa_r+0x968>
 8005530:	d1e0      	bne.n	80054f4 <_dtoa_r+0x924>
 8005532:	f018 0f01 	tst.w	r8, #1
 8005536:	d0dd      	beq.n	80054f4 <_dtoa_r+0x924>
 8005538:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800553c:	d1d8      	bne.n	80054f0 <_dtoa_r+0x920>
 800553e:	2339      	movs	r3, #57	; 0x39
 8005540:	f10a 0601 	add.w	r6, sl, #1
 8005544:	f88a 3000 	strb.w	r3, [sl]
 8005548:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800554c:	2b39      	cmp	r3, #57	; 0x39
 800554e:	f106 32ff 	add.w	r2, r6, #4294967295
 8005552:	d04c      	beq.n	80055ee <_dtoa_r+0xa1e>
 8005554:	3301      	adds	r3, #1
 8005556:	e051      	b.n	80055fc <_dtoa_r+0xa2c>
 8005558:	2b00      	cmp	r3, #0
 800555a:	f10a 0601 	add.w	r6, sl, #1
 800555e:	dd05      	ble.n	800556c <_dtoa_r+0x99c>
 8005560:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005564:	d0eb      	beq.n	800553e <_dtoa_r+0x96e>
 8005566:	f108 0801 	add.w	r8, r8, #1
 800556a:	e7c5      	b.n	80054f8 <_dtoa_r+0x928>
 800556c:	9b04      	ldr	r3, [sp, #16]
 800556e:	9a06      	ldr	r2, [sp, #24]
 8005570:	f806 8c01 	strb.w	r8, [r6, #-1]
 8005574:	1af3      	subs	r3, r6, r3
 8005576:	4293      	cmp	r3, r2
 8005578:	d021      	beq.n	80055be <_dtoa_r+0x9ee>
 800557a:	2300      	movs	r3, #0
 800557c:	220a      	movs	r2, #10
 800557e:	9901      	ldr	r1, [sp, #4]
 8005580:	4620      	mov	r0, r4
 8005582:	f000 f8dd 	bl	8005740 <__multadd>
 8005586:	45b9      	cmp	r9, r7
 8005588:	9001      	str	r0, [sp, #4]
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	f04f 020a 	mov.w	r2, #10
 8005592:	4649      	mov	r1, r9
 8005594:	4620      	mov	r0, r4
 8005596:	d105      	bne.n	80055a4 <_dtoa_r+0x9d4>
 8005598:	f000 f8d2 	bl	8005740 <__multadd>
 800559c:	4681      	mov	r9, r0
 800559e:	4607      	mov	r7, r0
 80055a0:	46b2      	mov	sl, r6
 80055a2:	e779      	b.n	8005498 <_dtoa_r+0x8c8>
 80055a4:	f000 f8cc 	bl	8005740 <__multadd>
 80055a8:	4639      	mov	r1, r7
 80055aa:	4681      	mov	r9, r0
 80055ac:	2300      	movs	r3, #0
 80055ae:	220a      	movs	r2, #10
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 f8c5 	bl	8005740 <__multadd>
 80055b6:	4607      	mov	r7, r0
 80055b8:	e7f2      	b.n	80055a0 <_dtoa_r+0x9d0>
 80055ba:	f04f 0900 	mov.w	r9, #0
 80055be:	2201      	movs	r2, #1
 80055c0:	9901      	ldr	r1, [sp, #4]
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 fa32 	bl	8005a2c <__lshift>
 80055c8:	4629      	mov	r1, r5
 80055ca:	9001      	str	r0, [sp, #4]
 80055cc:	f000 fa82 	bl	8005ad4 <__mcmp>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	dcb9      	bgt.n	8005548 <_dtoa_r+0x978>
 80055d4:	d102      	bne.n	80055dc <_dtoa_r+0xa0c>
 80055d6:	f018 0f01 	tst.w	r8, #1
 80055da:	d1b5      	bne.n	8005548 <_dtoa_r+0x978>
 80055dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055e0:	2b30      	cmp	r3, #48	; 0x30
 80055e2:	f106 32ff 	add.w	r2, r6, #4294967295
 80055e6:	f47f af11 	bne.w	800540c <_dtoa_r+0x83c>
 80055ea:	4616      	mov	r6, r2
 80055ec:	e7f6      	b.n	80055dc <_dtoa_r+0xa0c>
 80055ee:	9b04      	ldr	r3, [sp, #16]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d105      	bne.n	8005600 <_dtoa_r+0xa30>
 80055f4:	9a04      	ldr	r2, [sp, #16]
 80055f6:	f10b 0b01 	add.w	fp, fp, #1
 80055fa:	2331      	movs	r3, #49	; 0x31
 80055fc:	7013      	strb	r3, [r2, #0]
 80055fe:	e705      	b.n	800540c <_dtoa_r+0x83c>
 8005600:	4616      	mov	r6, r2
 8005602:	e7a1      	b.n	8005548 <_dtoa_r+0x978>
 8005604:	4b16      	ldr	r3, [pc, #88]	; (8005660 <_dtoa_r+0xa90>)
 8005606:	f7ff bb48 	b.w	8004c9a <_dtoa_r+0xca>
 800560a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800560c:	2b00      	cmp	r3, #0
 800560e:	f47f ab23 	bne.w	8004c58 <_dtoa_r+0x88>
 8005612:	4b14      	ldr	r3, [pc, #80]	; (8005664 <_dtoa_r+0xa94>)
 8005614:	f7ff bb41 	b.w	8004c9a <_dtoa_r+0xca>
 8005618:	9b08      	ldr	r3, [sp, #32]
 800561a:	2b01      	cmp	r3, #1
 800561c:	f77f ae3b 	ble.w	8005296 <_dtoa_r+0x6c6>
 8005620:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005624:	e64f      	b.n	80052c6 <_dtoa_r+0x6f6>
 8005626:	9b06      	ldr	r3, [sp, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	dc03      	bgt.n	8005634 <_dtoa_r+0xa64>
 800562c:	9b08      	ldr	r3, [sp, #32]
 800562e:	2b02      	cmp	r3, #2
 8005630:	f73f aed7 	bgt.w	80053e2 <_dtoa_r+0x812>
 8005634:	9e04      	ldr	r6, [sp, #16]
 8005636:	9801      	ldr	r0, [sp, #4]
 8005638:	4629      	mov	r1, r5
 800563a:	f7ff fa3a 	bl	8004ab2 <quorem>
 800563e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005642:	f806 8b01 	strb.w	r8, [r6], #1
 8005646:	9b04      	ldr	r3, [sp, #16]
 8005648:	9a06      	ldr	r2, [sp, #24]
 800564a:	1af3      	subs	r3, r6, r3
 800564c:	429a      	cmp	r2, r3
 800564e:	ddb4      	ble.n	80055ba <_dtoa_r+0x9ea>
 8005650:	2300      	movs	r3, #0
 8005652:	220a      	movs	r2, #10
 8005654:	9901      	ldr	r1, [sp, #4]
 8005656:	4620      	mov	r0, r4
 8005658:	f000 f872 	bl	8005740 <__multadd>
 800565c:	9001      	str	r0, [sp, #4]
 800565e:	e7ea      	b.n	8005636 <_dtoa_r+0xa66>
 8005660:	08005fec 	.word	0x08005fec
 8005664:	08005fee 	.word	0x08005fee

08005668 <_localeconv_r>:
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <_localeconv_r+0x14>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6a18      	ldr	r0, [r3, #32]
 800566e:	4b04      	ldr	r3, [pc, #16]	; (8005680 <_localeconv_r+0x18>)
 8005670:	2800      	cmp	r0, #0
 8005672:	bf08      	it	eq
 8005674:	4618      	moveq	r0, r3
 8005676:	30f0      	adds	r0, #240	; 0xf0
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000010 	.word	0x20000010
 8005680:	20000074 	.word	0x20000074

08005684 <malloc>:
 8005684:	4b02      	ldr	r3, [pc, #8]	; (8005690 <malloc+0xc>)
 8005686:	4601      	mov	r1, r0
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	f000 baf7 	b.w	8005c7c <_malloc_r>
 800568e:	bf00      	nop
 8005690:	20000010 	.word	0x20000010

08005694 <memcpy>:
 8005694:	b510      	push	{r4, lr}
 8005696:	1e43      	subs	r3, r0, #1
 8005698:	440a      	add	r2, r1
 800569a:	4291      	cmp	r1, r2
 800569c:	d100      	bne.n	80056a0 <memcpy+0xc>
 800569e:	bd10      	pop	{r4, pc}
 80056a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056a8:	e7f7      	b.n	800569a <memcpy+0x6>

080056aa <_Balloc>:
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056ae:	4604      	mov	r4, r0
 80056b0:	460e      	mov	r6, r1
 80056b2:	b93d      	cbnz	r5, 80056c4 <_Balloc+0x1a>
 80056b4:	2010      	movs	r0, #16
 80056b6:	f7ff ffe5 	bl	8005684 <malloc>
 80056ba:	6260      	str	r0, [r4, #36]	; 0x24
 80056bc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056c0:	6005      	str	r5, [r0, #0]
 80056c2:	60c5      	str	r5, [r0, #12]
 80056c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80056c6:	68eb      	ldr	r3, [r5, #12]
 80056c8:	b183      	cbz	r3, 80056ec <_Balloc+0x42>
 80056ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80056d2:	b9b8      	cbnz	r0, 8005704 <_Balloc+0x5a>
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f506 	lsl.w	r5, r1, r6
 80056da:	1d6a      	adds	r2, r5, #5
 80056dc:	0092      	lsls	r2, r2, #2
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 fabe 	bl	8005c60 <_calloc_r>
 80056e4:	b160      	cbz	r0, 8005700 <_Balloc+0x56>
 80056e6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80056ea:	e00e      	b.n	800570a <_Balloc+0x60>
 80056ec:	2221      	movs	r2, #33	; 0x21
 80056ee:	2104      	movs	r1, #4
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 fab5 	bl	8005c60 <_calloc_r>
 80056f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056f8:	60e8      	str	r0, [r5, #12]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e4      	bne.n	80056ca <_Balloc+0x20>
 8005700:	2000      	movs	r0, #0
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	6802      	ldr	r2, [r0, #0]
 8005706:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800570a:	2300      	movs	r3, #0
 800570c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005710:	e7f7      	b.n	8005702 <_Balloc+0x58>

08005712 <_Bfree>:
 8005712:	b570      	push	{r4, r5, r6, lr}
 8005714:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005716:	4606      	mov	r6, r0
 8005718:	460d      	mov	r5, r1
 800571a:	b93c      	cbnz	r4, 800572c <_Bfree+0x1a>
 800571c:	2010      	movs	r0, #16
 800571e:	f7ff ffb1 	bl	8005684 <malloc>
 8005722:	6270      	str	r0, [r6, #36]	; 0x24
 8005724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005728:	6004      	str	r4, [r0, #0]
 800572a:	60c4      	str	r4, [r0, #12]
 800572c:	b13d      	cbz	r5, 800573e <_Bfree+0x2c>
 800572e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005730:	686a      	ldr	r2, [r5, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005738:	6029      	str	r1, [r5, #0]
 800573a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800573e:	bd70      	pop	{r4, r5, r6, pc}

08005740 <__multadd>:
 8005740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005744:	690d      	ldr	r5, [r1, #16]
 8005746:	461f      	mov	r7, r3
 8005748:	4606      	mov	r6, r0
 800574a:	460c      	mov	r4, r1
 800574c:	f101 0c14 	add.w	ip, r1, #20
 8005750:	2300      	movs	r3, #0
 8005752:	f8dc 0000 	ldr.w	r0, [ip]
 8005756:	b281      	uxth	r1, r0
 8005758:	fb02 7101 	mla	r1, r2, r1, r7
 800575c:	0c0f      	lsrs	r7, r1, #16
 800575e:	0c00      	lsrs	r0, r0, #16
 8005760:	fb02 7000 	mla	r0, r2, r0, r7
 8005764:	b289      	uxth	r1, r1
 8005766:	3301      	adds	r3, #1
 8005768:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800576c:	429d      	cmp	r5, r3
 800576e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005772:	f84c 1b04 	str.w	r1, [ip], #4
 8005776:	dcec      	bgt.n	8005752 <__multadd+0x12>
 8005778:	b1d7      	cbz	r7, 80057b0 <__multadd+0x70>
 800577a:	68a3      	ldr	r3, [r4, #8]
 800577c:	42ab      	cmp	r3, r5
 800577e:	dc12      	bgt.n	80057a6 <__multadd+0x66>
 8005780:	6861      	ldr	r1, [r4, #4]
 8005782:	4630      	mov	r0, r6
 8005784:	3101      	adds	r1, #1
 8005786:	f7ff ff90 	bl	80056aa <_Balloc>
 800578a:	6922      	ldr	r2, [r4, #16]
 800578c:	3202      	adds	r2, #2
 800578e:	f104 010c 	add.w	r1, r4, #12
 8005792:	4680      	mov	r8, r0
 8005794:	0092      	lsls	r2, r2, #2
 8005796:	300c      	adds	r0, #12
 8005798:	f7ff ff7c 	bl	8005694 <memcpy>
 800579c:	4621      	mov	r1, r4
 800579e:	4630      	mov	r0, r6
 80057a0:	f7ff ffb7 	bl	8005712 <_Bfree>
 80057a4:	4644      	mov	r4, r8
 80057a6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057aa:	3501      	adds	r5, #1
 80057ac:	615f      	str	r7, [r3, #20]
 80057ae:	6125      	str	r5, [r4, #16]
 80057b0:	4620      	mov	r0, r4
 80057b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057b6 <__hi0bits>:
 80057b6:	0c02      	lsrs	r2, r0, #16
 80057b8:	0412      	lsls	r2, r2, #16
 80057ba:	4603      	mov	r3, r0
 80057bc:	b9b2      	cbnz	r2, 80057ec <__hi0bits+0x36>
 80057be:	0403      	lsls	r3, r0, #16
 80057c0:	2010      	movs	r0, #16
 80057c2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80057c6:	bf04      	itt	eq
 80057c8:	021b      	lsleq	r3, r3, #8
 80057ca:	3008      	addeq	r0, #8
 80057cc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80057d0:	bf04      	itt	eq
 80057d2:	011b      	lsleq	r3, r3, #4
 80057d4:	3004      	addeq	r0, #4
 80057d6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80057da:	bf04      	itt	eq
 80057dc:	009b      	lsleq	r3, r3, #2
 80057de:	3002      	addeq	r0, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	db06      	blt.n	80057f2 <__hi0bits+0x3c>
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	d503      	bpl.n	80057f0 <__hi0bits+0x3a>
 80057e8:	3001      	adds	r0, #1
 80057ea:	4770      	bx	lr
 80057ec:	2000      	movs	r0, #0
 80057ee:	e7e8      	b.n	80057c2 <__hi0bits+0xc>
 80057f0:	2020      	movs	r0, #32
 80057f2:	4770      	bx	lr

080057f4 <__lo0bits>:
 80057f4:	6803      	ldr	r3, [r0, #0]
 80057f6:	f013 0207 	ands.w	r2, r3, #7
 80057fa:	4601      	mov	r1, r0
 80057fc:	d00b      	beq.n	8005816 <__lo0bits+0x22>
 80057fe:	07da      	lsls	r2, r3, #31
 8005800:	d423      	bmi.n	800584a <__lo0bits+0x56>
 8005802:	0798      	lsls	r0, r3, #30
 8005804:	bf49      	itett	mi
 8005806:	085b      	lsrmi	r3, r3, #1
 8005808:	089b      	lsrpl	r3, r3, #2
 800580a:	2001      	movmi	r0, #1
 800580c:	600b      	strmi	r3, [r1, #0]
 800580e:	bf5c      	itt	pl
 8005810:	600b      	strpl	r3, [r1, #0]
 8005812:	2002      	movpl	r0, #2
 8005814:	4770      	bx	lr
 8005816:	b298      	uxth	r0, r3
 8005818:	b9a8      	cbnz	r0, 8005846 <__lo0bits+0x52>
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	2010      	movs	r0, #16
 800581e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005822:	bf04      	itt	eq
 8005824:	0a1b      	lsreq	r3, r3, #8
 8005826:	3008      	addeq	r0, #8
 8005828:	071a      	lsls	r2, r3, #28
 800582a:	bf04      	itt	eq
 800582c:	091b      	lsreq	r3, r3, #4
 800582e:	3004      	addeq	r0, #4
 8005830:	079a      	lsls	r2, r3, #30
 8005832:	bf04      	itt	eq
 8005834:	089b      	lsreq	r3, r3, #2
 8005836:	3002      	addeq	r0, #2
 8005838:	07da      	lsls	r2, r3, #31
 800583a:	d402      	bmi.n	8005842 <__lo0bits+0x4e>
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	d006      	beq.n	800584e <__lo0bits+0x5a>
 8005840:	3001      	adds	r0, #1
 8005842:	600b      	str	r3, [r1, #0]
 8005844:	4770      	bx	lr
 8005846:	4610      	mov	r0, r2
 8005848:	e7e9      	b.n	800581e <__lo0bits+0x2a>
 800584a:	2000      	movs	r0, #0
 800584c:	4770      	bx	lr
 800584e:	2020      	movs	r0, #32
 8005850:	4770      	bx	lr

08005852 <__i2b>:
 8005852:	b510      	push	{r4, lr}
 8005854:	460c      	mov	r4, r1
 8005856:	2101      	movs	r1, #1
 8005858:	f7ff ff27 	bl	80056aa <_Balloc>
 800585c:	2201      	movs	r2, #1
 800585e:	6144      	str	r4, [r0, #20]
 8005860:	6102      	str	r2, [r0, #16]
 8005862:	bd10      	pop	{r4, pc}

08005864 <__multiply>:
 8005864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005868:	4614      	mov	r4, r2
 800586a:	690a      	ldr	r2, [r1, #16]
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	429a      	cmp	r2, r3
 8005870:	bfb8      	it	lt
 8005872:	460b      	movlt	r3, r1
 8005874:	4688      	mov	r8, r1
 8005876:	bfbc      	itt	lt
 8005878:	46a0      	movlt	r8, r4
 800587a:	461c      	movlt	r4, r3
 800587c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005880:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005884:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005888:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800588c:	eb07 0609 	add.w	r6, r7, r9
 8005890:	42b3      	cmp	r3, r6
 8005892:	bfb8      	it	lt
 8005894:	3101      	addlt	r1, #1
 8005896:	f7ff ff08 	bl	80056aa <_Balloc>
 800589a:	f100 0514 	add.w	r5, r0, #20
 800589e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80058a2:	462b      	mov	r3, r5
 80058a4:	2200      	movs	r2, #0
 80058a6:	4573      	cmp	r3, lr
 80058a8:	d316      	bcc.n	80058d8 <__multiply+0x74>
 80058aa:	f104 0214 	add.w	r2, r4, #20
 80058ae:	f108 0114 	add.w	r1, r8, #20
 80058b2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80058b6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	9b00      	ldr	r3, [sp, #0]
 80058be:	9201      	str	r2, [sp, #4]
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d80c      	bhi.n	80058de <__multiply+0x7a>
 80058c4:	2e00      	cmp	r6, #0
 80058c6:	dd03      	ble.n	80058d0 <__multiply+0x6c>
 80058c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d05d      	beq.n	800598c <__multiply+0x128>
 80058d0:	6106      	str	r6, [r0, #16]
 80058d2:	b003      	add	sp, #12
 80058d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d8:	f843 2b04 	str.w	r2, [r3], #4
 80058dc:	e7e3      	b.n	80058a6 <__multiply+0x42>
 80058de:	f8b2 b000 	ldrh.w	fp, [r2]
 80058e2:	f1bb 0f00 	cmp.w	fp, #0
 80058e6:	d023      	beq.n	8005930 <__multiply+0xcc>
 80058e8:	4689      	mov	r9, r1
 80058ea:	46ac      	mov	ip, r5
 80058ec:	f04f 0800 	mov.w	r8, #0
 80058f0:	f859 4b04 	ldr.w	r4, [r9], #4
 80058f4:	f8dc a000 	ldr.w	sl, [ip]
 80058f8:	b2a3      	uxth	r3, r4
 80058fa:	fa1f fa8a 	uxth.w	sl, sl
 80058fe:	fb0b a303 	mla	r3, fp, r3, sl
 8005902:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005906:	f8dc 4000 	ldr.w	r4, [ip]
 800590a:	4443      	add	r3, r8
 800590c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005910:	fb0b 840a 	mla	r4, fp, sl, r8
 8005914:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005918:	46e2      	mov	sl, ip
 800591a:	b29b      	uxth	r3, r3
 800591c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005920:	454f      	cmp	r7, r9
 8005922:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005926:	f84a 3b04 	str.w	r3, [sl], #4
 800592a:	d82b      	bhi.n	8005984 <__multiply+0x120>
 800592c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005930:	9b01      	ldr	r3, [sp, #4]
 8005932:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005936:	3204      	adds	r2, #4
 8005938:	f1ba 0f00 	cmp.w	sl, #0
 800593c:	d020      	beq.n	8005980 <__multiply+0x11c>
 800593e:	682b      	ldr	r3, [r5, #0]
 8005940:	4689      	mov	r9, r1
 8005942:	46a8      	mov	r8, r5
 8005944:	f04f 0b00 	mov.w	fp, #0
 8005948:	f8b9 c000 	ldrh.w	ip, [r9]
 800594c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005950:	fb0a 440c 	mla	r4, sl, ip, r4
 8005954:	445c      	add	r4, fp
 8005956:	46c4      	mov	ip, r8
 8005958:	b29b      	uxth	r3, r3
 800595a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800595e:	f84c 3b04 	str.w	r3, [ip], #4
 8005962:	f859 3b04 	ldr.w	r3, [r9], #4
 8005966:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800596a:	0c1b      	lsrs	r3, r3, #16
 800596c:	fb0a b303 	mla	r3, sl, r3, fp
 8005970:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005974:	454f      	cmp	r7, r9
 8005976:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800597a:	d805      	bhi.n	8005988 <__multiply+0x124>
 800597c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005980:	3504      	adds	r5, #4
 8005982:	e79b      	b.n	80058bc <__multiply+0x58>
 8005984:	46d4      	mov	ip, sl
 8005986:	e7b3      	b.n	80058f0 <__multiply+0x8c>
 8005988:	46e0      	mov	r8, ip
 800598a:	e7dd      	b.n	8005948 <__multiply+0xe4>
 800598c:	3e01      	subs	r6, #1
 800598e:	e799      	b.n	80058c4 <__multiply+0x60>

08005990 <__pow5mult>:
 8005990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005994:	4615      	mov	r5, r2
 8005996:	f012 0203 	ands.w	r2, r2, #3
 800599a:	4606      	mov	r6, r0
 800599c:	460f      	mov	r7, r1
 800599e:	d007      	beq.n	80059b0 <__pow5mult+0x20>
 80059a0:	3a01      	subs	r2, #1
 80059a2:	4c21      	ldr	r4, [pc, #132]	; (8005a28 <__pow5mult+0x98>)
 80059a4:	2300      	movs	r3, #0
 80059a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80059aa:	f7ff fec9 	bl	8005740 <__multadd>
 80059ae:	4607      	mov	r7, r0
 80059b0:	10ad      	asrs	r5, r5, #2
 80059b2:	d035      	beq.n	8005a20 <__pow5mult+0x90>
 80059b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80059b6:	b93c      	cbnz	r4, 80059c8 <__pow5mult+0x38>
 80059b8:	2010      	movs	r0, #16
 80059ba:	f7ff fe63 	bl	8005684 <malloc>
 80059be:	6270      	str	r0, [r6, #36]	; 0x24
 80059c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059c4:	6004      	str	r4, [r0, #0]
 80059c6:	60c4      	str	r4, [r0, #12]
 80059c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059d0:	b94c      	cbnz	r4, 80059e6 <__pow5mult+0x56>
 80059d2:	f240 2171 	movw	r1, #625	; 0x271
 80059d6:	4630      	mov	r0, r6
 80059d8:	f7ff ff3b 	bl	8005852 <__i2b>
 80059dc:	2300      	movs	r3, #0
 80059de:	f8c8 0008 	str.w	r0, [r8, #8]
 80059e2:	4604      	mov	r4, r0
 80059e4:	6003      	str	r3, [r0, #0]
 80059e6:	f04f 0800 	mov.w	r8, #0
 80059ea:	07eb      	lsls	r3, r5, #31
 80059ec:	d50a      	bpl.n	8005a04 <__pow5mult+0x74>
 80059ee:	4639      	mov	r1, r7
 80059f0:	4622      	mov	r2, r4
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7ff ff36 	bl	8005864 <__multiply>
 80059f8:	4639      	mov	r1, r7
 80059fa:	4681      	mov	r9, r0
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7ff fe88 	bl	8005712 <_Bfree>
 8005a02:	464f      	mov	r7, r9
 8005a04:	106d      	asrs	r5, r5, #1
 8005a06:	d00b      	beq.n	8005a20 <__pow5mult+0x90>
 8005a08:	6820      	ldr	r0, [r4, #0]
 8005a0a:	b938      	cbnz	r0, 8005a1c <__pow5mult+0x8c>
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4630      	mov	r0, r6
 8005a12:	f7ff ff27 	bl	8005864 <__multiply>
 8005a16:	6020      	str	r0, [r4, #0]
 8005a18:	f8c0 8000 	str.w	r8, [r0]
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	e7e4      	b.n	80059ea <__pow5mult+0x5a>
 8005a20:	4638      	mov	r0, r7
 8005a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a26:	bf00      	nop
 8005a28:	080060f0 	.word	0x080060f0

08005a2c <__lshift>:
 8005a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a30:	460c      	mov	r4, r1
 8005a32:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	6849      	ldr	r1, [r1, #4]
 8005a3a:	eb0a 0903 	add.w	r9, sl, r3
 8005a3e:	68a3      	ldr	r3, [r4, #8]
 8005a40:	4607      	mov	r7, r0
 8005a42:	4616      	mov	r6, r2
 8005a44:	f109 0501 	add.w	r5, r9, #1
 8005a48:	42ab      	cmp	r3, r5
 8005a4a:	db32      	blt.n	8005ab2 <__lshift+0x86>
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7ff fe2c 	bl	80056aa <_Balloc>
 8005a52:	2300      	movs	r3, #0
 8005a54:	4680      	mov	r8, r0
 8005a56:	f100 0114 	add.w	r1, r0, #20
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4553      	cmp	r3, sl
 8005a5e:	db2b      	blt.n	8005ab8 <__lshift+0x8c>
 8005a60:	6920      	ldr	r0, [r4, #16]
 8005a62:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a66:	f104 0314 	add.w	r3, r4, #20
 8005a6a:	f016 021f 	ands.w	r2, r6, #31
 8005a6e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a72:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a76:	d025      	beq.n	8005ac4 <__lshift+0x98>
 8005a78:	f1c2 0e20 	rsb	lr, r2, #32
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	681e      	ldr	r6, [r3, #0]
 8005a80:	468a      	mov	sl, r1
 8005a82:	4096      	lsls	r6, r2
 8005a84:	4330      	orrs	r0, r6
 8005a86:	f84a 0b04 	str.w	r0, [sl], #4
 8005a8a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a8e:	459c      	cmp	ip, r3
 8005a90:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a94:	d814      	bhi.n	8005ac0 <__lshift+0x94>
 8005a96:	6048      	str	r0, [r1, #4]
 8005a98:	b108      	cbz	r0, 8005a9e <__lshift+0x72>
 8005a9a:	f109 0502 	add.w	r5, r9, #2
 8005a9e:	3d01      	subs	r5, #1
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f8c8 5010 	str.w	r5, [r8, #16]
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	f7ff fe33 	bl	8005712 <_Bfree>
 8005aac:	4640      	mov	r0, r8
 8005aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab2:	3101      	adds	r1, #1
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	e7c7      	b.n	8005a48 <__lshift+0x1c>
 8005ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005abc:	3301      	adds	r3, #1
 8005abe:	e7cd      	b.n	8005a5c <__lshift+0x30>
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	e7dc      	b.n	8005a7e <__lshift+0x52>
 8005ac4:	3904      	subs	r1, #4
 8005ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aca:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ace:	459c      	cmp	ip, r3
 8005ad0:	d8f9      	bhi.n	8005ac6 <__lshift+0x9a>
 8005ad2:	e7e4      	b.n	8005a9e <__lshift+0x72>

08005ad4 <__mcmp>:
 8005ad4:	6903      	ldr	r3, [r0, #16]
 8005ad6:	690a      	ldr	r2, [r1, #16]
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	b530      	push	{r4, r5, lr}
 8005adc:	d10c      	bne.n	8005af8 <__mcmp+0x24>
 8005ade:	0092      	lsls	r2, r2, #2
 8005ae0:	3014      	adds	r0, #20
 8005ae2:	3114      	adds	r1, #20
 8005ae4:	1884      	adds	r4, r0, r2
 8005ae6:	4411      	add	r1, r2
 8005ae8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005aec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005af0:	4295      	cmp	r5, r2
 8005af2:	d003      	beq.n	8005afc <__mcmp+0x28>
 8005af4:	d305      	bcc.n	8005b02 <__mcmp+0x2e>
 8005af6:	2301      	movs	r3, #1
 8005af8:	4618      	mov	r0, r3
 8005afa:	bd30      	pop	{r4, r5, pc}
 8005afc:	42a0      	cmp	r0, r4
 8005afe:	d3f3      	bcc.n	8005ae8 <__mcmp+0x14>
 8005b00:	e7fa      	b.n	8005af8 <__mcmp+0x24>
 8005b02:	f04f 33ff 	mov.w	r3, #4294967295
 8005b06:	e7f7      	b.n	8005af8 <__mcmp+0x24>

08005b08 <__mdiff>:
 8005b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	460d      	mov	r5, r1
 8005b0e:	4607      	mov	r7, r0
 8005b10:	4611      	mov	r1, r2
 8005b12:	4628      	mov	r0, r5
 8005b14:	4614      	mov	r4, r2
 8005b16:	f7ff ffdd 	bl	8005ad4 <__mcmp>
 8005b1a:	1e06      	subs	r6, r0, #0
 8005b1c:	d108      	bne.n	8005b30 <__mdiff+0x28>
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4638      	mov	r0, r7
 8005b22:	f7ff fdc2 	bl	80056aa <_Balloc>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b30:	bfa4      	itt	ge
 8005b32:	4623      	movge	r3, r4
 8005b34:	462c      	movge	r4, r5
 8005b36:	4638      	mov	r0, r7
 8005b38:	6861      	ldr	r1, [r4, #4]
 8005b3a:	bfa6      	itte	ge
 8005b3c:	461d      	movge	r5, r3
 8005b3e:	2600      	movge	r6, #0
 8005b40:	2601      	movlt	r6, #1
 8005b42:	f7ff fdb2 	bl	80056aa <_Balloc>
 8005b46:	692b      	ldr	r3, [r5, #16]
 8005b48:	60c6      	str	r6, [r0, #12]
 8005b4a:	6926      	ldr	r6, [r4, #16]
 8005b4c:	f105 0914 	add.w	r9, r5, #20
 8005b50:	f104 0214 	add.w	r2, r4, #20
 8005b54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005b58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005b5c:	f100 0514 	add.w	r5, r0, #20
 8005b60:	f04f 0e00 	mov.w	lr, #0
 8005b64:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b68:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b6c:	fa1e f18a 	uxtah	r1, lr, sl
 8005b70:	b2a3      	uxth	r3, r4
 8005b72:	1ac9      	subs	r1, r1, r3
 8005b74:	0c23      	lsrs	r3, r4, #16
 8005b76:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005b7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b7e:	b289      	uxth	r1, r1
 8005b80:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005b84:	45c8      	cmp	r8, r9
 8005b86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005b8a:	4694      	mov	ip, r2
 8005b8c:	f845 3b04 	str.w	r3, [r5], #4
 8005b90:	d8e8      	bhi.n	8005b64 <__mdiff+0x5c>
 8005b92:	45bc      	cmp	ip, r7
 8005b94:	d304      	bcc.n	8005ba0 <__mdiff+0x98>
 8005b96:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005b9a:	b183      	cbz	r3, 8005bbe <__mdiff+0xb6>
 8005b9c:	6106      	str	r6, [r0, #16]
 8005b9e:	e7c5      	b.n	8005b2c <__mdiff+0x24>
 8005ba0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005ba4:	fa1e f381 	uxtah	r3, lr, r1
 8005ba8:	141a      	asrs	r2, r3, #16
 8005baa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bb4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005bb8:	f845 3b04 	str.w	r3, [r5], #4
 8005bbc:	e7e9      	b.n	8005b92 <__mdiff+0x8a>
 8005bbe:	3e01      	subs	r6, #1
 8005bc0:	e7e9      	b.n	8005b96 <__mdiff+0x8e>

08005bc2 <__d2b>:
 8005bc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	2101      	movs	r1, #1
 8005bca:	ec59 8b10 	vmov	r8, r9, d0
 8005bce:	4615      	mov	r5, r2
 8005bd0:	f7ff fd6b 	bl	80056aa <_Balloc>
 8005bd4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005bd8:	4607      	mov	r7, r0
 8005bda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bde:	bb34      	cbnz	r4, 8005c2e <__d2b+0x6c>
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	f1b8 0300 	subs.w	r3, r8, #0
 8005be6:	d027      	beq.n	8005c38 <__d2b+0x76>
 8005be8:	a802      	add	r0, sp, #8
 8005bea:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005bee:	f7ff fe01 	bl	80057f4 <__lo0bits>
 8005bf2:	9900      	ldr	r1, [sp, #0]
 8005bf4:	b1f0      	cbz	r0, 8005c34 <__d2b+0x72>
 8005bf6:	9a01      	ldr	r2, [sp, #4]
 8005bf8:	f1c0 0320 	rsb	r3, r0, #32
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	430b      	orrs	r3, r1
 8005c02:	40c2      	lsrs	r2, r0
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	9201      	str	r2, [sp, #4]
 8005c08:	9b01      	ldr	r3, [sp, #4]
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bf14      	ite	ne
 8005c10:	2102      	movne	r1, #2
 8005c12:	2101      	moveq	r1, #1
 8005c14:	6139      	str	r1, [r7, #16]
 8005c16:	b1c4      	cbz	r4, 8005c4a <__d2b+0x88>
 8005c18:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c1c:	4404      	add	r4, r0
 8005c1e:	6034      	str	r4, [r6, #0]
 8005c20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c24:	6028      	str	r0, [r5, #0]
 8005c26:	4638      	mov	r0, r7
 8005c28:	b003      	add	sp, #12
 8005c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c32:	e7d5      	b.n	8005be0 <__d2b+0x1e>
 8005c34:	6179      	str	r1, [r7, #20]
 8005c36:	e7e7      	b.n	8005c08 <__d2b+0x46>
 8005c38:	a801      	add	r0, sp, #4
 8005c3a:	f7ff fddb 	bl	80057f4 <__lo0bits>
 8005c3e:	9b01      	ldr	r3, [sp, #4]
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	2101      	movs	r1, #1
 8005c44:	6139      	str	r1, [r7, #16]
 8005c46:	3020      	adds	r0, #32
 8005c48:	e7e5      	b.n	8005c16 <__d2b+0x54>
 8005c4a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c52:	6030      	str	r0, [r6, #0]
 8005c54:	6918      	ldr	r0, [r3, #16]
 8005c56:	f7ff fdae 	bl	80057b6 <__hi0bits>
 8005c5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c5e:	e7e1      	b.n	8005c24 <__d2b+0x62>

08005c60 <_calloc_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	fb02 f401 	mul.w	r4, r2, r1
 8005c66:	4621      	mov	r1, r4
 8005c68:	f000 f808 	bl	8005c7c <_malloc_r>
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	b118      	cbz	r0, 8005c78 <_calloc_r+0x18>
 8005c70:	4622      	mov	r2, r4
 8005c72:	2100      	movs	r1, #0
 8005c74:	f7fe fbc2 	bl	80043fc <memset>
 8005c78:	4628      	mov	r0, r5
 8005c7a:	bd38      	pop	{r3, r4, r5, pc}

08005c7c <_malloc_r>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	1ccd      	adds	r5, r1, #3
 8005c80:	f025 0503 	bic.w	r5, r5, #3
 8005c84:	3508      	adds	r5, #8
 8005c86:	2d0c      	cmp	r5, #12
 8005c88:	bf38      	it	cc
 8005c8a:	250c      	movcc	r5, #12
 8005c8c:	2d00      	cmp	r5, #0
 8005c8e:	4606      	mov	r6, r0
 8005c90:	db01      	blt.n	8005c96 <_malloc_r+0x1a>
 8005c92:	42a9      	cmp	r1, r5
 8005c94:	d903      	bls.n	8005c9e <_malloc_r+0x22>
 8005c96:	230c      	movs	r3, #12
 8005c98:	6033      	str	r3, [r6, #0]
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	bd70      	pop	{r4, r5, r6, pc}
 8005c9e:	f000 f869 	bl	8005d74 <__malloc_lock>
 8005ca2:	4a21      	ldr	r2, [pc, #132]	; (8005d28 <_malloc_r+0xac>)
 8005ca4:	6814      	ldr	r4, [r2, #0]
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	b991      	cbnz	r1, 8005cd0 <_malloc_r+0x54>
 8005caa:	4c20      	ldr	r4, [pc, #128]	; (8005d2c <_malloc_r+0xb0>)
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	b91b      	cbnz	r3, 8005cb8 <_malloc_r+0x3c>
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f000 f83d 	bl	8005d30 <_sbrk_r>
 8005cb6:	6020      	str	r0, [r4, #0]
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f000 f838 	bl	8005d30 <_sbrk_r>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d124      	bne.n	8005d0e <_malloc_r+0x92>
 8005cc4:	230c      	movs	r3, #12
 8005cc6:	6033      	str	r3, [r6, #0]
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f000 f854 	bl	8005d76 <__malloc_unlock>
 8005cce:	e7e4      	b.n	8005c9a <_malloc_r+0x1e>
 8005cd0:	680b      	ldr	r3, [r1, #0]
 8005cd2:	1b5b      	subs	r3, r3, r5
 8005cd4:	d418      	bmi.n	8005d08 <_malloc_r+0x8c>
 8005cd6:	2b0b      	cmp	r3, #11
 8005cd8:	d90f      	bls.n	8005cfa <_malloc_r+0x7e>
 8005cda:	600b      	str	r3, [r1, #0]
 8005cdc:	50cd      	str	r5, [r1, r3]
 8005cde:	18cc      	adds	r4, r1, r3
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	f000 f848 	bl	8005d76 <__malloc_unlock>
 8005ce6:	f104 000b 	add.w	r0, r4, #11
 8005cea:	1d23      	adds	r3, r4, #4
 8005cec:	f020 0007 	bic.w	r0, r0, #7
 8005cf0:	1ac3      	subs	r3, r0, r3
 8005cf2:	d0d3      	beq.n	8005c9c <_malloc_r+0x20>
 8005cf4:	425a      	negs	r2, r3
 8005cf6:	50e2      	str	r2, [r4, r3]
 8005cf8:	e7d0      	b.n	8005c9c <_malloc_r+0x20>
 8005cfa:	428c      	cmp	r4, r1
 8005cfc:	684b      	ldr	r3, [r1, #4]
 8005cfe:	bf16      	itet	ne
 8005d00:	6063      	strne	r3, [r4, #4]
 8005d02:	6013      	streq	r3, [r2, #0]
 8005d04:	460c      	movne	r4, r1
 8005d06:	e7eb      	b.n	8005ce0 <_malloc_r+0x64>
 8005d08:	460c      	mov	r4, r1
 8005d0a:	6849      	ldr	r1, [r1, #4]
 8005d0c:	e7cc      	b.n	8005ca8 <_malloc_r+0x2c>
 8005d0e:	1cc4      	adds	r4, r0, #3
 8005d10:	f024 0403 	bic.w	r4, r4, #3
 8005d14:	42a0      	cmp	r0, r4
 8005d16:	d005      	beq.n	8005d24 <_malloc_r+0xa8>
 8005d18:	1a21      	subs	r1, r4, r0
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f000 f808 	bl	8005d30 <_sbrk_r>
 8005d20:	3001      	adds	r0, #1
 8005d22:	d0cf      	beq.n	8005cc4 <_malloc_r+0x48>
 8005d24:	6025      	str	r5, [r4, #0]
 8005d26:	e7db      	b.n	8005ce0 <_malloc_r+0x64>
 8005d28:	20000200 	.word	0x20000200
 8005d2c:	20000204 	.word	0x20000204

08005d30 <_sbrk_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4c06      	ldr	r4, [pc, #24]	; (8005d4c <_sbrk_r+0x1c>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4605      	mov	r5, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	6023      	str	r3, [r4, #0]
 8005d3c:	f7fb f9a8 	bl	8001090 <_sbrk>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_sbrk_r+0x1a>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_sbrk_r+0x1a>
 8005d48:	602b      	str	r3, [r5, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	20000720 	.word	0x20000720

08005d50 <__ascii_mbtowc>:
 8005d50:	b082      	sub	sp, #8
 8005d52:	b901      	cbnz	r1, 8005d56 <__ascii_mbtowc+0x6>
 8005d54:	a901      	add	r1, sp, #4
 8005d56:	b142      	cbz	r2, 8005d6a <__ascii_mbtowc+0x1a>
 8005d58:	b14b      	cbz	r3, 8005d6e <__ascii_mbtowc+0x1e>
 8005d5a:	7813      	ldrb	r3, [r2, #0]
 8005d5c:	600b      	str	r3, [r1, #0]
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	1c10      	adds	r0, r2, #0
 8005d62:	bf18      	it	ne
 8005d64:	2001      	movne	r0, #1
 8005d66:	b002      	add	sp, #8
 8005d68:	4770      	bx	lr
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	e7fb      	b.n	8005d66 <__ascii_mbtowc+0x16>
 8005d6e:	f06f 0001 	mvn.w	r0, #1
 8005d72:	e7f8      	b.n	8005d66 <__ascii_mbtowc+0x16>

08005d74 <__malloc_lock>:
 8005d74:	4770      	bx	lr

08005d76 <__malloc_unlock>:
 8005d76:	4770      	bx	lr

08005d78 <__ascii_wctomb>:
 8005d78:	b149      	cbz	r1, 8005d8e <__ascii_wctomb+0x16>
 8005d7a:	2aff      	cmp	r2, #255	; 0xff
 8005d7c:	bf85      	ittet	hi
 8005d7e:	238a      	movhi	r3, #138	; 0x8a
 8005d80:	6003      	strhi	r3, [r0, #0]
 8005d82:	700a      	strbls	r2, [r1, #0]
 8005d84:	f04f 30ff 	movhi.w	r0, #4294967295
 8005d88:	bf98      	it	ls
 8005d8a:	2001      	movls	r0, #1
 8005d8c:	4770      	bx	lr
 8005d8e:	4608      	mov	r0, r1
 8005d90:	4770      	bx	lr
	...

08005d94 <_init>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	bf00      	nop
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr

08005da0 <_fini>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr
