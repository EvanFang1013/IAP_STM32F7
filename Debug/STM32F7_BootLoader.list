
STM32F7_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b4c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08005d48  08005d48  00015d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a0  080061a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a8  080061a8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080061b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200001e0  08006390  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  08006390  00020724  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca70  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000243e  00000000  00000000  0002cc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000998  00000000  00000000  0002f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002fa58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002664d  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009fc3  00000000  00000000  00056915  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed6a4  00000000  00000000  000608d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014df7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b4c  00000000  00000000  0014dff8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001e0 	.word	0x200001e0
 8000214:	00000000 	.word	0x00000000
 8000218:	08005d2c 	.word	0x08005d2c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001e4 	.word	0x200001e4
 8000234:	08005d2c 	.word	0x08005d2c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b972 	b.w	8000544 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	4688      	mov	r8, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14b      	bne.n	800031e <__udivmoddi4+0xa6>
 8000286:	428a      	cmp	r2, r1
 8000288:	4615      	mov	r5, r2
 800028a:	d967      	bls.n	800035c <__udivmoddi4+0xe4>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0720 	rsb	r7, r2, #32
 8000296:	fa01 f302 	lsl.w	r3, r1, r2
 800029a:	fa20 f707 	lsr.w	r7, r0, r7
 800029e:	4095      	lsls	r5, r2
 80002a0:	ea47 0803 	orr.w	r8, r7, r3
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b0:	fa1f fc85 	uxth.w	ip, r5
 80002b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	fb07 f10c 	mul.w	r1, r7, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ca:	f080 811b 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8118 	bls.w	8000504 <__udivmoddi4+0x28c>
 80002d4:	3f02      	subs	r7, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ec:	45a4      	cmp	ip, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	192c      	adds	r4, r5, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8107 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	f240 8104 	bls.w	8000508 <__udivmoddi4+0x290>
 8000300:	3802      	subs	r0, #2
 8000302:	442c      	add	r4, r5
 8000304:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000308:	eba4 040c 	sub.w	r4, r4, ip
 800030c:	2700      	movs	r7, #0
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0xbe>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80eb 	beq.w	80004fe <__udivmoddi4+0x286>
 8000328:	2700      	movs	r7, #0
 800032a:	e9c6 0100 	strd	r0, r1, [r6]
 800032e:	4638      	mov	r0, r7
 8000330:	4639      	mov	r1, r7
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f783 	clz	r7, r3
 800033a:	2f00      	cmp	r7, #0
 800033c:	d147      	bne.n	80003ce <__udivmoddi4+0x156>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xd0>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80fa 	bhi.w	800053c <__udivmoddi4+0x2c4>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0303 	sbc.w	r3, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4698      	mov	r8, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d0e0      	beq.n	8000318 <__udivmoddi4+0xa0>
 8000356:	e9c6 4800 	strd	r4, r8, [r6]
 800035a:	e7dd      	b.n	8000318 <__udivmoddi4+0xa0>
 800035c:	b902      	cbnz	r2, 8000360 <__udivmoddi4+0xe8>
 800035e:	deff      	udf	#255	; 0xff
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	2a00      	cmp	r2, #0
 8000366:	f040 808f 	bne.w	8000488 <__udivmoddi4+0x210>
 800036a:	1b49      	subs	r1, r1, r5
 800036c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000370:	fa1f f885 	uxth.w	r8, r5
 8000374:	2701      	movs	r7, #1
 8000376:	fbb1 fcfe 	udiv	ip, r1, lr
 800037a:	0c23      	lsrs	r3, r4, #16
 800037c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb08 f10c 	mul.w	r1, r8, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x124>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4299      	cmp	r1, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 800039a:	4684      	mov	ip, r0
 800039c:	1a59      	subs	r1, r3, r1
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ac:	fb08 f800 	mul.w	r8, r8, r0
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x14c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80b6 	bhi.w	800052e <__udivmoddi4+0x2b6>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003cc:	e79f      	b.n	800030e <__udivmoddi4+0x96>
 80003ce:	f1c7 0c20 	rsb	ip, r7, #32
 80003d2:	40bb      	lsls	r3, r7
 80003d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003dc:	fa01 f407 	lsl.w	r4, r1, r7
 80003e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ec:	4325      	orrs	r5, r4
 80003ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	fb08 3319 	mls	r3, r8, r9, r3
 80003f8:	fa1f fa8e 	uxth.w	sl, lr
 80003fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000400:	fb09 f40a 	mul.w	r4, r9, sl
 8000404:	429c      	cmp	r4, r3
 8000406:	fa02 f207 	lsl.w	r2, r2, r7
 800040a:	fa00 f107 	lsl.w	r1, r0, r7
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1e 0303 	adds.w	r3, lr, r3
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	f080 8087 	bcs.w	800052a <__udivmoddi4+0x2b2>
 800041c:	429c      	cmp	r4, r3
 800041e:	f240 8084 	bls.w	800052a <__udivmoddi4+0x2b2>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4473      	add	r3, lr
 8000428:	1b1b      	subs	r3, r3, r4
 800042a:	b2ad      	uxth	r5, r5
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3310 	mls	r3, r8, r0, r3
 8000434:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000438:	fb00 fa0a 	mul.w	sl, r0, sl
 800043c:	45a2      	cmp	sl, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1e 0404 	adds.w	r4, lr, r4
 8000444:	f100 33ff 	add.w	r3, r0, #4294967295
 8000448:	d26b      	bcs.n	8000522 <__udivmoddi4+0x2aa>
 800044a:	45a2      	cmp	sl, r4
 800044c:	d969      	bls.n	8000522 <__udivmoddi4+0x2aa>
 800044e:	3802      	subs	r0, #2
 8000450:	4474      	add	r4, lr
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	eba4 040a 	sub.w	r4, r4, sl
 800045e:	454c      	cmp	r4, r9
 8000460:	46c2      	mov	sl, r8
 8000462:	464b      	mov	r3, r9
 8000464:	d354      	bcc.n	8000510 <__udivmoddi4+0x298>
 8000466:	d051      	beq.n	800050c <__udivmoddi4+0x294>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2c8>
 800046c:	ebb1 050a 	subs.w	r5, r1, sl
 8000470:	eb64 0403 	sbc.w	r4, r4, r3
 8000474:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000478:	40fd      	lsrs	r5, r7
 800047a:	40fc      	lsrs	r4, r7
 800047c:	ea4c 0505 	orr.w	r5, ip, r5
 8000480:	e9c6 5400 	strd	r5, r4, [r6]
 8000484:	2700      	movs	r7, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa0>
 8000488:	f1c2 0320 	rsb	r3, r2, #32
 800048c:	fa20 f703 	lsr.w	r7, r0, r3
 8000490:	4095      	lsls	r5, r2
 8000492:	fa01 f002 	lsl.w	r0, r1, r2
 8000496:	fa21 f303 	lsr.w	r3, r1, r3
 800049a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049e:	4338      	orrs	r0, r7
 80004a0:	0c01      	lsrs	r1, r0, #16
 80004a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004a6:	fa1f f885 	uxth.w	r8, r5
 80004aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb07 f308 	mul.w	r3, r7, r8
 80004b6:	428b      	cmp	r3, r1
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x256>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004c4:	d22f      	bcs.n	8000526 <__udivmoddi4+0x2ae>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d92d      	bls.n	8000526 <__udivmoddi4+0x2ae>
 80004ca:	3f02      	subs	r7, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1acb      	subs	r3, r1, r3
 80004d0:	b281      	uxth	r1, r0
 80004d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb00 f308 	mul.w	r3, r0, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x27e>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ec:	d217      	bcs.n	800051e <__udivmoddi4+0x2a6>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d915      	bls.n	800051e <__udivmoddi4+0x2a6>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1ac9      	subs	r1, r1, r3
 80004f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004fc:	e73b      	b.n	8000376 <__udivmoddi4+0xfe>
 80004fe:	4637      	mov	r7, r6
 8000500:	4630      	mov	r0, r6
 8000502:	e709      	b.n	8000318 <__udivmoddi4+0xa0>
 8000504:	4607      	mov	r7, r0
 8000506:	e6e7      	b.n	80002d8 <__udivmoddi4+0x60>
 8000508:	4618      	mov	r0, r3
 800050a:	e6fb      	b.n	8000304 <__udivmoddi4+0x8c>
 800050c:	4541      	cmp	r1, r8
 800050e:	d2ab      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000510:	ebb8 0a02 	subs.w	sl, r8, r2
 8000514:	eb69 020e 	sbc.w	r2, r9, lr
 8000518:	3801      	subs	r0, #1
 800051a:	4613      	mov	r3, r2
 800051c:	e7a4      	b.n	8000468 <__udivmoddi4+0x1f0>
 800051e:	4660      	mov	r0, ip
 8000520:	e7e9      	b.n	80004f6 <__udivmoddi4+0x27e>
 8000522:	4618      	mov	r0, r3
 8000524:	e795      	b.n	8000452 <__udivmoddi4+0x1da>
 8000526:	4667      	mov	r7, ip
 8000528:	e7d1      	b.n	80004ce <__udivmoddi4+0x256>
 800052a:	4681      	mov	r9, r0
 800052c:	e77c      	b.n	8000428 <__udivmoddi4+0x1b0>
 800052e:	3802      	subs	r0, #2
 8000530:	442c      	add	r4, r5
 8000532:	e747      	b.n	80003c4 <__udivmoddi4+0x14c>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	442b      	add	r3, r5
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x124>
 800053c:	4638      	mov	r0, r7
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xda>
 8000540:	4637      	mov	r7, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa0>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8000548:	b480      	push	{r7}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <Int2Str+0xa0>)
 8000554:	613b      	str	r3, [r7, #16]
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	e038      	b.n	80005d6 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	fbb2 f3f3 	udiv	r3, r2, r3
 800056c:	b2da      	uxtb	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	60f9      	str	r1, [r7, #12]
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	440b      	add	r3, r1
 8000578:	3230      	adds	r2, #48	; 0x30
 800057a:	b2d2      	uxtb	r2, r2
 800057c:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	fbb3 f2f2 	udiv	r2, r3, r2
 8000586:	6939      	ldr	r1, [r7, #16]
 8000588:	fb01 f202 	mul.w	r2, r1, r2
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <Int2Str+0xa4>)
 8000594:	fba2 2303 	umull	r2, r3, r2, r3
 8000598:	08db      	lsrs	r3, r3, #3
 800059a:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	3b01      	subs	r3, #1
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b30      	cmp	r3, #48	; 0x30
 80005a8:	bf0c      	ite	eq
 80005aa:	2301      	moveq	r3, #1
 80005ac:	2300      	movne	r3, #0
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf0c      	ite	eq
 80005b6:	2301      	moveq	r3, #1
 80005b8:	2300      	movne	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4013      	ands	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <Int2Str+0x82>
    {
      pos = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e002      	b.n	80005d0 <Int2Str+0x88>
    }
    else
    {
      status++;
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	2b09      	cmp	r3, #9
 80005da:	d9c3      	bls.n	8000564 <Int2Str+0x1c>
    }
  }
}
 80005dc:	bf00      	nop
 80005de:	371c      	adds	r7, #28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	3b9aca00 	.word	0x3b9aca00
 80005ec:	cccccccd 	.word	0xcccccccd

080005f0 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b30      	cmp	r3, #48	; 0x30
 800060c:	f040 80d7 	bne.w	80007be <Str2Int+0x1ce>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b78      	cmp	r3, #120	; 0x78
 8000618:	d005      	beq.n	8000626 <Str2Int+0x36>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3301      	adds	r3, #1
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b58      	cmp	r3, #88	; 0x58
 8000622:	f040 80cc 	bne.w	80007be <Str2Int+0x1ce>
  {
    i = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800062a:	e057      	b.n	80006dc <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b40      	cmp	r3, #64	; 0x40
 8000636:	d905      	bls.n	8000644 <Str2Int+0x54>
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b46      	cmp	r3, #70	; 0x46
 8000642:	d917      	bls.n	8000674 <Str2Int+0x84>
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b60      	cmp	r3, #96	; 0x60
 800064e:	d905      	bls.n	800065c <Str2Int+0x6c>
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b66      	cmp	r3, #102	; 0x66
 800065a:	d90b      	bls.n	8000674 <Str2Int+0x84>
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b2f      	cmp	r3, #47	; 0x2f
 8000666:	d936      	bls.n	80006d6 <Str2Int+0xe6>
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b39      	cmp	r3, #57	; 0x39
 8000672:	d830      	bhi.n	80006d6 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	440a      	add	r2, r1
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	2a2f      	cmp	r2, #47	; 0x2f
 8000682:	d90b      	bls.n	800069c <Str2Int+0xac>
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	440a      	add	r2, r1
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	2a39      	cmp	r2, #57	; 0x39
 800068e:	d805      	bhi.n	800069c <Str2Int+0xac>
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	440a      	add	r2, r1
 8000696:	7812      	ldrb	r2, [r2, #0]
 8000698:	3a30      	subs	r2, #48	; 0x30
 800069a:	e016      	b.n	80006ca <Str2Int+0xda>
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	440a      	add	r2, r1
 80006a2:	7812      	ldrb	r2, [r2, #0]
 80006a4:	2a40      	cmp	r2, #64	; 0x40
 80006a6:	d90b      	bls.n	80006c0 <Str2Int+0xd0>
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	440a      	add	r2, r1
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	2a46      	cmp	r2, #70	; 0x46
 80006b2:	d805      	bhi.n	80006c0 <Str2Int+0xd0>
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	440a      	add	r2, r1
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	3a37      	subs	r2, #55	; 0x37
 80006be:	e004      	b.n	80006ca <Str2Int+0xda>
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	440a      	add	r2, r1
 80006c6:	7812      	ldrb	r2, [r2, #0]
 80006c8:	3a57      	subs	r2, #87	; 0x57
 80006ca:	4413      	add	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e002      	b.n	80006dc <Str2Int+0xec>
        res = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
        break;
 80006da:	e008      	b.n	80006ee <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	d805      	bhi.n	80006ee <Str2Int+0xfe>
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d19e      	bne.n	800062c <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d167      	bne.n	80007ca <Str2Int+0x1da>
    {
      *p_intnum = val;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	601a      	str	r2, [r3, #0]
      res = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8000704:	e061      	b.n	80007ca <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	4413      	add	r3, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <Str2Int+0x12e>
      {
        *p_intnum = val;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	e04c      	b.n	80007b8 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	4413      	add	r3, r2
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b6b      	cmp	r3, #107	; 0x6b
 8000728:	d005      	beq.n	8000736 <Str2Int+0x146>
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b4b      	cmp	r3, #75	; 0x4b
 8000734:	d10b      	bne.n	800074e <Str2Int+0x15e>
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d008      	beq.n	800074e <Str2Int+0x15e>
      {
        val = val << 10;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	029b      	lsls	r3, r3, #10
 8000740:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	601a      	str	r2, [r3, #0]
        res = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	e034      	b.n	80007b8 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b6d      	cmp	r3, #109	; 0x6d
 8000758:	d005      	beq.n	8000766 <Str2Int+0x176>
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b4d      	cmp	r3, #77	; 0x4d
 8000764:	d10b      	bne.n	800077e <Str2Int+0x18e>
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d008      	beq.n	800077e <Str2Int+0x18e>
      {
        val = val << 20;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	051b      	lsls	r3, r3, #20
 8000770:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	601a      	str	r2, [r3, #0]
        res = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	e01c      	b.n	80007b8 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b2f      	cmp	r3, #47	; 0x2f
 8000788:	d913      	bls.n	80007b2 <Str2Int+0x1c2>
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b39      	cmp	r3, #57	; 0x39
 8000794:	d80d      	bhi.n	80007b2 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	440b      	add	r3, r1
 80007ac:	3b30      	subs	r3, #48	; 0x30
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	e002      	b.n	80007b8 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
        break;
 80007b6:	e008      	b.n	80007ca <Str2Int+0x1da>
      }
      i++;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	2b0a      	cmp	r3, #10
 80007c2:	d802      	bhi.n	80007ca <Str2Int+0x1da>
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d19d      	bne.n	8000706 <Str2Int+0x116>
    }
  }

  return res;
 80007ca:	693b      	ldr	r3, [r7, #16]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 80007e4:	e002      	b.n	80007ec <Serial_PutString+0x14>
  {
    length++;
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	3301      	adds	r3, #1
 80007ea:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f6      	bne.n	80007e6 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 80007f8:	89fa      	ldrh	r2, [r7, #14]
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <Serial_PutString+0x3c>)
 8000800:	f002 fdbc 	bl	800337c <HAL_UART_Transmit>
  HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	; 0x64
 8000806:	f000 ff31 	bl	800166c <HAL_Delay>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000224 	.word	0x20000224

08000818 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <Serial_PutByte+0x30>)
 8000824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000826:	2ba0      	cmp	r3, #160	; 0xa0
 8000828:	d102      	bne.n	8000830 <Serial_PutByte+0x18>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <Serial_PutByte+0x30>)
 800082c:	2220      	movs	r2, #32
 800082e:	675a      	str	r2, [r3, #116]	; 0x74
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 8000830:	1df9      	adds	r1, r7, #7
 8000832:	2364      	movs	r3, #100	; 0x64
 8000834:	2201      	movs	r2, #1
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <Serial_PutByte+0x30>)
 8000838:	f002 fda0 	bl	800337c <HAL_UART_Transmit>
 800083c:	4603      	mov	r3, r0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000224 	.word	0x20000224

0800084c <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 8000850:	f001 f8be 	bl	80019d0 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <FLASH_If_Init+0x14>)
 8000856:	2273      	movs	r2, #115	; 0x73
 8000858:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGAERR);
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023c00 	.word	0x40023c00

08000864 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 800086c:	f7ff ffee 	bl	800084c <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(APPLICATION_ADDRESS);
 8000870:	480e      	ldr	r0, [pc, #56]	; (80008ac <FLASH_If_Erase+0x48>)
 8000872:	f000 f85b 	bl	800092c <GetSector>
 8000876:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 10;
 8000880:	230a      	movs	r3, #10
 8000882:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8000884:	2302      	movs	r3, #2
 8000886:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8000888:	f107 0220 	add.w	r2, r7, #32
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f001 f9e6 	bl	8001c64 <HAL_FLASHEx_Erase>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <FLASH_If_Erase+0x40>
  }
  
  return (0);
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	08008000 	.word	0x08008000

080008b0 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e023      	b.n	800090e <FLASH_If_Write+0x5e>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f04f 0400 	mov.w	r4, #0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4623      	mov	r3, r4
 80008d8:	68f9      	ldr	r1, [r7, #12]
 80008da:	2002      	movs	r0, #2
 80008dc:	f001 f81c 	bl	8001918 <HAL_FLASH_Program>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10e      	bne.n	8000904 <FLASH_If_Write+0x54>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	68b9      	ldr	r1, [r7, #8]
 80008f0:	440b      	add	r3, r1
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d001      	beq.n	80008fc <FLASH_If_Write+0x4c>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 80008f8:	2302      	movs	r3, #2
 80008fa:	e011      	b.n	8000920 <FLASH_If_Write+0x70>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3304      	adds	r3, #4
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	e001      	b.n	8000908 <FLASH_If_Write+0x58>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8000904:	2303      	movs	r3, #3
 8000906:	e00b      	b.n	8000920 <FLASH_If_Write+0x70>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	429a      	cmp	r2, r3
 8000914:	d203      	bcs.n	800091e <FLASH_If_Write+0x6e>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <FLASH_If_Write+0x78>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d9d3      	bls.n	80008c6 <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	371c      	adds	r7, #28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	080ffffb 	.word	0x080ffffb

0800092c <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <GetSector+0xb8>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d806      	bhi.n	800094e <GetSector+0x22>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000946:	d302      	bcc.n	800094e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	e043      	b.n	80009d6 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a25      	ldr	r2, [pc, #148]	; (80009e8 <GetSector+0xbc>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d806      	bhi.n	8000964 <GetSector+0x38>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <GetSector+0xb8>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d902      	bls.n	8000964 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 800095e:	2301      	movs	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	e038      	b.n	80009d6 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a21      	ldr	r2, [pc, #132]	; (80009ec <GetSector+0xc0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d806      	bhi.n	800097a <GetSector+0x4e>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <GetSector+0xbc>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d902      	bls.n	800097a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 8000974:	2302      	movs	r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e02d      	b.n	80009d6 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <GetSector+0xc4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d806      	bhi.n	8000990 <GetSector+0x64>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <GetSector+0xc0>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d902      	bls.n	8000990 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 800098a:	2303      	movs	r3, #3
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e022      	b.n	80009d6 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <GetSector+0xc8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d806      	bhi.n	80009a6 <GetSector+0x7a>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <GetSector+0xc4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d902      	bls.n	80009a6 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 80009a0:	2304      	movs	r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e017      	b.n	80009d6 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <GetSector+0xcc>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d806      	bhi.n	80009bc <GetSector+0x90>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <GetSector+0xc8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d902      	bls.n	80009bc <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 80009b6:	2305      	movs	r3, #5
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e00c      	b.n	80009d6 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <GetSector+0xd0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d806      	bhi.n	80009d2 <GetSector+0xa6>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <GetSector+0xcc>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d902      	bls.n	80009d2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 80009cc:	2306      	movs	r3, #6
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e001      	b.n	80009d6 <GetSector+0xaa>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_7;
 80009d2:	2307      	movs	r3, #7
 80009d4:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	08007fff 	.word	0x08007fff
 80009e8:	0800ffff 	.word	0x0800ffff
 80009ec:	08017fff 	.word	0x08017fff
 80009f0:	0801ffff 	.word	0x0801ffff
 80009f4:	0803ffff 	.word	0x0803ffff
 80009f8:	0807ffff 	.word	0x0807ffff
 80009fc:	080bffff 	.word	0x080bffff

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fdd4 	bl	80015b2 <HAL_Init>

  /* USER CODE BEGIN Init */
  flag=0;
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <main+0xb8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a10:	f000 f86a 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a14:	f000 f912 	bl	8000c3c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000a18:	f000 f8e0 	bl	8000bdc <MX_USART6_UART_Init>

  /* USER CODE BEGIN 2 */
  RxCount=0;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	; (8000abc <main+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
  if(HAL_UART_Transmit(&huart6, "RESTART\r\n", 9, 10)==HAL_OK)
 8000a22:	230a      	movs	r3, #10
 8000a24:	2209      	movs	r2, #9
 8000a26:	4926      	ldr	r1, [pc, #152]	; (8000ac0 <main+0xc0>)
 8000a28:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <main+0xc4>)
 8000a2a:	f002 fca7 	bl	800337c <HAL_UART_Transmit>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d108      	bne.n	8000a46 <main+0x46>
  {
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a34:	2101      	movs	r1, #1
 8000a36:	4824      	ldr	r0, [pc, #144]	; (8000ac8 <main+0xc8>)
 8000a38:	f001 fbd1 	bl	80021de <HAL_GPIO_TogglePin>
	  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 7);
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	4923      	ldr	r1, [pc, #140]	; (8000acc <main+0xcc>)
 8000a40:	4820      	ldr	r0, [pc, #128]	; (8000ac4 <main+0xc4>)
 8000a42:	f002 fdf9 	bl	8003638 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag ==1)
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <main+0xb8>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d004      	beq.n	8000a58 <main+0x58>
	  {
		  Main_Menu();
 8000a4e:	f000 fa07 	bl	8000e60 <Main_Menu>
		  flag = 0;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <main+0xb8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(1000);
 8000a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5c:	f000 fe06 	bl	800166c <HAL_Delay>

	  if (flag==0)
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <main+0xb8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	f083 0301 	eor.w	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0eb      	beq.n	8000a46 <main+0x46>
	  {
		  uint32_t ramstart = (*(__IO uint32_t*) APPLICATION_ADDRESS) & 0x2FFE0000;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <main+0xd0>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <main+0xd4>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	607b      	str	r3, [r7, #4]
		  if ( ramstart == 0x20080000 || ramstart == 0x20000000)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <main+0xd8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d003      	beq.n	8000a88 <main+0x88>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a86:	d1de      	bne.n	8000a46 <main+0x46>
		  {
			  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <main+0xdc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <main+0xe0>)
 8000a8e:	6013      	str	r3, [r2, #0]
			  JumpToApplication = (pFunction) JumpAddress;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <main+0xe0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <main+0xe4>)
 8000a98:	601a      	str	r2, [r3, #0]
			  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <main+0xd0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f383 8808 	msr	MSP, r3
			  HAL_Delay(500);
 8000aa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aaa:	f000 fddf 	bl	800166c <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8000aae:	b672      	cpsid	i
			  __disable_irq();
			  JumpToApplication();
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <main+0xe4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4798      	blx	r3
	  if (flag ==1)
 8000ab6:	e7c6      	b.n	8000a46 <main+0x46>
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000208 	.word	0x20000208
 8000ac0:	08005d48 	.word	0x08005d48
 8000ac4:	20000224 	.word	0x20000224
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	200002a4 	.word	0x200002a4
 8000ad0:	08008000 	.word	0x08008000
 8000ad4:	2ffe0000 	.word	0x2ffe0000
 8000ad8:	20080000 	.word	0x20080000
 8000adc:	08008004 	.word	0x08008004
 8000ae0:	200002ac 	.word	0x200002ac
 8000ae4:	200002b0 	.word	0x200002b0

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0b8      	sub	sp, #224	; 0xe0
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000af2:	2234      	movs	r2, #52	; 0x34
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 fc4c 	bl	8004394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2290      	movs	r2, #144	; 0x90
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fc3d 	bl	8004394 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <SystemClock_Config+0xec>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	; (8000bd4 <SystemClock_Config+0xec>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <SystemClock_Config+0xec>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b32:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <SystemClock_Config+0xf0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b3a:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <SystemClock_Config+0xf0>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <SystemClock_Config+0xf0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fb52 	bl	8002214 <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b76:	f000 f8e9 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fdaa 	bl	80026f8 <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000baa:	f000 f8cf 	bl	8000d4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000bae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bb2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 ff69 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000bc8:	f000 f8c0 	bl	8000d4c <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	37e0      	adds	r7, #224	; 0xe0
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000

08000bdc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <MX_USART6_UART_Init+0x5c>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USART6_UART_Init+0x58>)
 8000c20:	f002 fb5e 	bl	80032e0 <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000c2a:	f000 f88f 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000224 	.word	0x20000224
 8000c38:	40011400 	.word	0x40011400

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_GPIO_Init+0x74>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <MX_GPIO_Init+0x74>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_GPIO_Init+0x74>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_GPIO_Init+0x74>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <MX_GPIO_Init+0x74>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_GPIO_Init+0x74>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2181      	movs	r1, #129	; 0x81
 8000c86:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <MX_GPIO_Init+0x78>)
 8000c88:	f001 fa90 	bl	80021ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000c8c:	2381      	movs	r3, #129	; 0x81
 8000c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_GPIO_Init+0x78>)
 8000ca4:	f001 f8d8 	bl	8001e58 <HAL_GPIO_Init>

}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  _Bool command = checkBLECommandFromBLEGateway(aRxBuffer ,"request",7);
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <HAL_UART_RxCpltCallback+0x44>)
 8000cc4:	480e      	ldr	r0, [pc, #56]	; (8000d00 <HAL_UART_RxCpltCallback+0x48>)
 8000cc6:	f000 f821 	bl	8000d0c <checkBLECommandFromBLEGateway>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]


  if (command)
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d00a      	beq.n	8000cea <HAL_UART_RxCpltCallback+0x32>
  {
	  HAL_UART_Transmit(huart, "IAP START", 9,0x2710);
 8000cd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cd8:	2209      	movs	r2, #9
 8000cda:	490a      	ldr	r1, [pc, #40]	; (8000d04 <HAL_UART_RxCpltCallback+0x4c>)
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f002 fb4d 	bl	800337c <HAL_UART_Transmit>
	  flag=1;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
  {
	  HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 7);
  }


}
 8000ce8:	e004      	b.n	8000cf4 <HAL_UART_RxCpltCallback+0x3c>
	  HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 7);
 8000cea:	2207      	movs	r2, #7
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <HAL_UART_RxCpltCallback+0x48>)
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f002 fca2 	bl	8003638 <HAL_UART_Receive_IT>
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	08005d54 	.word	0x08005d54
 8000d00:	200002a4 	.word	0x200002a4
 8000d04:	08005d5c 	.word	0x08005d5c
 8000d08:	20000000 	.word	0x20000000

08000d0c <checkBLECommandFromBLEGateway>:




_Bool checkBLECommandFromBLEGateway(char * BLEcommand,char * index, int len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	if(strlen(BLEcommand) > 0)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d010      	beq.n	8000d42 <checkBLECommandFromBLEGateway+0x36>
	{
		   //Test 比對 function
	   char * pch;
	   /* 找尋 simple 字串 */
	   pch = strstr (BLEcommand,index);
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f003 fe77 	bl	8004a16 <strstr>
 8000d28:	6178      	str	r0, [r7, #20]
	   if(strncmp(pch, index, len) == 0) {
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f003 fe5f 	bl	80049f2 <strncmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <checkBLECommandFromBLEGateway+0x32>
		   return true;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e002      	b.n	8000d44 <checkBLECommandFromBLEGateway+0x38>
	   }
	   else
	   {
		   return false;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <checkBLECommandFromBLEGateway+0x38>

	}
	else
	{

		return false;
 8000d42:	2300      	movs	r3, #0
	}

}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d60:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <__NVIC_SystemReset+0x20>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d6c:	4903      	ldr	r1, [pc, #12]	; (8000d7c <__NVIC_SystemReset+0x20>)
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_SystemReset+0x24>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60cb      	str	r3, [r1, #12]
 8000d74:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <__NVIC_SystemReset+0x1c>
 8000d7c:	e000ed00 	.word	0xe000ed00
 8000d80:	05fa0004 	.word	0x05fa0004

08000d84 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	f8c3 2007 	str.w	r2, [r3, #7]
  uint32_t size = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;
  HAL_Delay(300);
 8000d9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d9e:	f000 fc65 	bl	800166c <HAL_Delay>
  Serial_PutString((uint8_t *)"IAP processing\r\n");
 8000da2:	4825      	ldr	r0, [pc, #148]	; (8000e38 <SerialDownload+0xb4>)
 8000da4:	f7ff fd18 	bl	80007d8 <Serial_PutString>
  HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f000 fc5e 	bl	800166c <HAL_Delay>
  result = Ymodem_Receive( &size );
 8000db0:	463b      	mov	r3, r7
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 faac 	bl	8001310 <Ymodem_Receive>
 8000db8:	4603      	mov	r3, r0
 8000dba:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d119      	bne.n	8000df6 <SerialDownload+0x72>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8000dc2:	481e      	ldr	r0, [pc, #120]	; (8000e3c <SerialDownload+0xb8>)
 8000dc4:	f7ff fd08 	bl	80007d8 <Serial_PutString>
    Serial_PutString(aFileName);
 8000dc8:	481d      	ldr	r0, [pc, #116]	; (8000e40 <SerialDownload+0xbc>)
 8000dca:	f7ff fd05 	bl	80007d8 <Serial_PutString>
    Int2Str(number, size);
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fbb7 	bl	8000548 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8000dda:	481a      	ldr	r0, [pc, #104]	; (8000e44 <SerialDownload+0xc0>)
 8000ddc:	f7ff fcfc 	bl	80007d8 <Serial_PutString>
    Serial_PutString(number);
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fcf8 	bl	80007d8 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8000de8:	4817      	ldr	r0, [pc, #92]	; (8000e48 <SerialDownload+0xc4>)
 8000dea:	f7ff fcf5 	bl	80007d8 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8000dee:	4817      	ldr	r0, [pc, #92]	; (8000e4c <SerialDownload+0xc8>)
 8000df0:	f7ff fcf2 	bl	80007d8 <Serial_PutString>
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
    NVIC_SystemReset();
  }
}
 8000df4:	e01c      	b.n	8000e30 <SerialDownload+0xac>
  else if (result == COM_LIMIT)
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d104      	bne.n	8000e06 <SerialDownload+0x82>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8000dfc:	4814      	ldr	r0, [pc, #80]	; (8000e50 <SerialDownload+0xcc>)
 8000dfe:	f7ff fceb 	bl	80007d8 <Serial_PutString>
    NVIC_SystemReset();
 8000e02:	f7ff ffab 	bl	8000d5c <__NVIC_SystemReset>
  else if (result == COM_DATA)
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d104      	bne.n	8000e16 <SerialDownload+0x92>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <SerialDownload+0xd0>)
 8000e0e:	f7ff fce3 	bl	80007d8 <Serial_PutString>
    NVIC_SystemReset();
 8000e12:	f7ff ffa3 	bl	8000d5c <__NVIC_SystemReset>
  else if (result == COM_ABORT)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d104      	bne.n	8000e26 <SerialDownload+0xa2>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8000e1c:	480e      	ldr	r0, [pc, #56]	; (8000e58 <SerialDownload+0xd4>)
 8000e1e:	f7ff fcdb 	bl	80007d8 <Serial_PutString>
    NVIC_SystemReset();
 8000e22:	f7ff ff9b 	bl	8000d5c <__NVIC_SystemReset>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <SerialDownload+0xd8>)
 8000e28:	f7ff fcd6 	bl	80007d8 <Serial_PutString>
    NVIC_SystemReset();
 8000e2c:	f7ff ff96 	bl	8000d5c <__NVIC_SystemReset>
}
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	08005d68 	.word	0x08005d68
 8000e3c:	08005d7c 	.word	0x08005d7c
 8000e40:	200002b4 	.word	0x200002b4
 8000e44:	08005dd0 	.word	0x08005dd0
 8000e48:	08005ddc 	.word	0x08005ddc
 8000e4c:	08005de8 	.word	0x08005de8
 8000e50:	08005e00 	.word	0x08005e00
 8000e54:	08005e40 	.word	0x08005e40
 8000e58:	08005e5c 	.word	0x08005e5c
 8000e5c:	08005e74 	.word	0x08005e74

08000e60 <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  uint8_t key = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
  HAL_Delay(500);
 8000e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6e:	f000 fbfd 	bl	800166c <HAL_Delay>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
  Serial_PutString((uint8_t *)"\r\n=                       By MCD Application Team                      =");
  Serial_PutString((uint8_t *)"\r\n======================================================================");
  Serial_PutString((uint8_t *)"\r\n\r\n");
  */
  Serial_PutString((uint8_t *)"\r\nUpload image from the internal Flash \r\n");
 8000e72:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <Main_Menu+0x60>)
 8000e74:	f7ff fcb0 	bl	80007d8 <Serial_PutString>
  SerialDownload();
 8000e78:	f7ff ff84 	bl	8000d84 <SerialDownload>
  HAL_Delay(500);
 8000e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e80:	f000 fbf4 	bl	800166c <HAL_Delay>
  Serial_PutString((uint8_t *)"\r\nStart program execution\r\n");
 8000e84:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <Main_Menu+0x64>)
 8000e86:	f7ff fca7 	bl	80007d8 <Serial_PutString>
  /* execute the new program */
  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <Main_Menu+0x68>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <Main_Menu+0x6c>)
 8000e90:	6013      	str	r3, [r2, #0]
  /* Jump to user application */
  JumpToApplication = (pFunction) JumpAddress;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <Main_Menu+0x6c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <Main_Menu+0x70>)
 8000e9a:	601a      	str	r2, [r3, #0]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <Main_Menu+0x74>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	f383 8808 	msr	MSP, r3
  //__disable_irq();
  HAL_Delay(500);
 8000ea8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eac:	f000 fbde 	bl	800166c <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
  __disable_irq();
  JumpToApplication();
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <Main_Menu+0x70>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4798      	blx	r3

}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	08005f14 	.word	0x08005f14
 8000ec4:	08005f40 	.word	0x08005f40
 8000ec8:	08008004 	.word	0x08008004
 8000ecc:	200002ac 	.word	0x200002ac
 8000ed0:	200002b0 	.word	0x200002b0
 8000ed4:	08008000 	.word	0x08008000

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <HAL_UART_MspInit+0x8c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d12f      	bne.n	8000fa2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_UART_MspInit+0x90>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_UART_MspInit+0x90>)
 8000f48:	f043 0320 	orr.w	r3, r3, #32
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_UART_MspInit+0x90>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f003 0320 	and.w	r3, r3, #32
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_UART_MspInit+0x90>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_UART_MspInit+0x90>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_UART_MspInit+0x90>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f72:	23c0      	movs	r3, #192	; 0xc0
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f82:	2308      	movs	r3, #8
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <HAL_UART_MspInit+0x94>)
 8000f8e:	f000 ff63 	bl	8001e58 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2101      	movs	r1, #1
 8000f96:	2047      	movs	r0, #71	; 0x47
 8000f98:	f000 fc65 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f9c:	2047      	movs	r0, #71	; 0x47
 8000f9e:	f000 fc7e 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020800 	.word	0x40020800

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100c:	f000 fb0e 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <USART6_IRQHandler+0x10>)
 800101a:	f002 fbaf 	bl	800377c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000224 	.word	0x20000224

08001028 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x50>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x16>
		heap_end = &end;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <_sbrk+0x50>)
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <_sbrk+0x54>)
 800103c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <_sbrk+0x50>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <_sbrk+0x50>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	466a      	mov	r2, sp
 800104e:	4293      	cmp	r3, r2
 8001050:	d907      	bls.n	8001062 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001052:	f003 f975 	bl	8004340 <__errno>
 8001056:	4602      	mov	r2, r0
 8001058:	230c      	movs	r3, #12
 800105a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	e006      	b.n	8001070 <_sbrk+0x48>
	}

	heap_end += incr;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <_sbrk+0x50>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a03      	ldr	r2, [pc, #12]	; (8001078 <_sbrk+0x50>)
 800106c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200001fc 	.word	0x200001fc
 800107c:	20000728 	.word	0x20000728

08001080 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <SystemInit+0x5c>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <SystemInit+0x5c>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <SystemInit+0x60>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <SystemInit+0x60>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <SystemInit+0x60>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <SystemInit+0x60>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	490d      	ldr	r1, [pc, #52]	; (80010e0 <SystemInit+0x60>)
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <SystemInit+0x64>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <SystemInit+0x60>)
 80010b4:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <SystemInit+0x68>)
 80010b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <SystemInit+0x60>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <SystemInit+0x60>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SystemInit+0x60>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SystemInit+0x5c>)
 80010cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010d0:	609a      	str	r2, [r3, #8]
#endif
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	40023800 	.word	0x40023800
 80010e4:	fef6ffff 	.word	0xfef6ffff
 80010e8:	24003010 	.word	0x24003010

080010ec <__NVIC_SystemReset>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80010f0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <__NVIC_SystemReset+0x20>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010fc:	4903      	ldr	r1, [pc, #12]	; (800110c <__NVIC_SystemReset+0x20>)
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_SystemReset+0x24>)
 8001100:	4313      	orrs	r3, r2
 8001102:	60cb      	str	r3, [r1, #12]
 8001104:	f3bf 8f4f 	dsb	sy
    __NOP();
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <__NVIC_SystemReset+0x1c>
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0004 	.word	0x05fa0004

08001114 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 800112a:	f107 0113 	add.w	r1, r7, #19
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	4844      	ldr	r0, [pc, #272]	; (8001244 <ReceivePacket+0x130>)
 8001134:	f002 f9b3 	bl	800349e <HAL_UART_Receive>
 8001138:	4603      	mov	r3, r0
 800113a:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 800113c:	7efb      	ldrb	r3, [r7, #27]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d177      	bne.n	8001232 <ReceivePacket+0x11e>
  {
    switch (char1)
 8001142:	7cfb      	ldrb	r3, [r7, #19]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d02d      	beq.n	80011a4 <ReceivePacket+0x90>
 8001148:	2b04      	cmp	r3, #4
 800114a:	dc04      	bgt.n	8001156 <ReceivePacket+0x42>
 800114c:	2b01      	cmp	r3, #1
 800114e:	d009      	beq.n	8001164 <ReceivePacket+0x50>
 8001150:	2b02      	cmp	r3, #2
 8001152:	d00a      	beq.n	800116a <ReceivePacket+0x56>
 8001154:	e023      	b.n	800119e <ReceivePacket+0x8a>
 8001156:	2b41      	cmp	r3, #65	; 0x41
 8001158:	d01e      	beq.n	8001198 <ReceivePacket+0x84>
 800115a:	2b61      	cmp	r3, #97	; 0x61
 800115c:	d01c      	beq.n	8001198 <ReceivePacket+0x84>
 800115e:	2b18      	cmp	r3, #24
 8001160:	d007      	beq.n	8001172 <ReceivePacket+0x5e>
 8001162:	e01c      	b.n	800119e <ReceivePacket+0x8a>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	61fb      	str	r3, [r7, #28]
        break;
 8001168:	e01d      	b.n	80011a6 <ReceivePacket+0x92>
      case STX:
        packet_size = PACKET_1K_SIZE;
 800116a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116e:	61fb      	str	r3, [r7, #28]
        break;
 8001170:	e019      	b.n	80011a6 <ReceivePacket+0x92>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8001172:	f107 0113 	add.w	r1, r7, #19
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	4832      	ldr	r0, [pc, #200]	; (8001244 <ReceivePacket+0x130>)
 800117c:	f002 f98f 	bl	800349e <HAL_UART_Receive>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d105      	bne.n	8001192 <ReceivePacket+0x7e>
 8001186:	7cfb      	ldrb	r3, [r7, #19]
 8001188:	2b18      	cmp	r3, #24
 800118a:	d102      	bne.n	8001192 <ReceivePacket+0x7e>
        {
          packet_size = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 8001190:	e009      	b.n	80011a6 <ReceivePacket+0x92>
          status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	76fb      	strb	r3, [r7, #27]
        break;
 8001196:	e006      	b.n	80011a6 <ReceivePacket+0x92>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 8001198:	2302      	movs	r3, #2
 800119a:	76fb      	strb	r3, [r7, #27]
        break;
 800119c:	e003      	b.n	80011a6 <ReceivePacket+0x92>
      default:
        status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	76fb      	strb	r3, [r7, #27]
        break;
 80011a2:	e000      	b.n	80011a6 <ReceivePacket+0x92>
        break;
 80011a4:	bf00      	nop
    }
    *p_data = char1;
 80011a6:	7cfa      	ldrb	r2, [r7, #19]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	2b7f      	cmp	r3, #127	; 0x7f
 80011b0:	d93f      	bls.n	8001232 <ReceivePacket+0x11e>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1c99      	adds	r1, r3, #2
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	3304      	adds	r3, #4
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4820      	ldr	r0, [pc, #128]	; (8001244 <ReceivePacket+0x130>)
 80011c2:	f002 f96c 	bl	800349e <HAL_UART_Receive>
 80011c6:	4603      	mov	r3, r0
 80011c8:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 80011ca:	7efb      	ldrb	r3, [r7, #27]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d12e      	bne.n	800122e <ReceivePacket+0x11a>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3302      	adds	r3, #2
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3303      	adds	r3, #3
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	43db      	mvns	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d004      	beq.n	80011ee <ReceivePacket+0xda>
        {
          packet_size = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	76fb      	strb	r3, [r7, #27]
 80011ec:	e021      	b.n	8001232 <ReceivePacket+0x11e>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	3305      	adds	r3, #5
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4413      	add	r3, r2
 800120c:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3304      	adds	r3, #4
 8001212:	69f9      	ldr	r1, [r7, #28]
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f84a 	bl	80012ae <Cal_CRC16>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	4293      	cmp	r3, r2
 8001222:	d006      	beq.n	8001232 <ReceivePacket+0x11e>
          {
            packet_size = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	76fb      	strb	r3, [r7, #27]
 800122c:	e001      	b.n	8001232 <ReceivePacket+0x11e>
          }
        }
      }
      else
      {
        packet_size = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	601a      	str	r2, [r3, #0]
  return status;
 8001238:	7efb      	ldrb	r3, [r7, #27]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000224 	.word	0x20000224

08001248 <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	80fb      	strh	r3, [r7, #6]
 8001254:	4613      	mov	r3, r2
 8001256:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 800125c:	797b      	ldrb	r3, [r7, #5]
 800125e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001262:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <UpdateCRC16+0x38>
      ++crc;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <UpdateCRC16+0x4c>
      crc ^= 0x1021;
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	f241 0321 	movw	r3, #4129	; 0x1021
 8001290:	4053      	eors	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0e2      	beq.n	8001264 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	b29b      	uxth	r3, r3
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 80012c4:	e00a      	b.n	80012dc <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	b298      	uxth	r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff ffb8 	bl	8001248 <UpdateCRC16>
 80012d8:	4603      	mov	r3, r0
 80012da:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d3f0      	bcc.n	80012c6 <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ffac 	bl	8001248 <UpdateCRC16>
 80012f0:	4603      	mov	r3, r0
 80012f2:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ffa4 	bl	8001248 <UpdateCRC16>
 8001300:	4603      	mov	r3, r0
 8001302:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29b      	uxth	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b092      	sub	sp, #72	; 0x48
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
 800131c:	2300      	movs	r3, #0
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001320:	2300      	movs	r3, #0
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
 // uint32_t flashdestination;
  uint32_t ramsource, filesize, packets_received;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp;
  COM_StatusTypeDef result = COM_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 800132a:	4b86      	ldr	r3, [pc, #536]	; (8001544 <Ymodem_Receive+0x234>)
 800132c:	4a86      	ldr	r2, [pc, #536]	; (8001548 <Ymodem_Receive+0x238>)
 800132e:	601a      	str	r2, [r3, #0]

  while ((session_done == 0) && (result == COM_OK))
 8001330:	e0fa      	b.n	8001528 <Ymodem_Receive+0x218>
  {
    packets_received = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
    file_done = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 800133a:	e0ed      	b.n	8001518 <Ymodem_Receive+0x208>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	f241 3288 	movw	r2, #5000	; 0x1388
 8001344:	4619      	mov	r1, r3
 8001346:	4881      	ldr	r0, [pc, #516]	; (800154c <Ymodem_Receive+0x23c>)
 8001348:	f7ff fee4 	bl	8001114 <ReceivePacket>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <Ymodem_Receive+0x4a>
 8001352:	2b02      	cmp	r3, #2
 8001354:	f000 80c1 	beq.w	80014da <Ymodem_Receive+0x1ca>
 8001358:	e0c9      	b.n	80014ee <Ymodem_Receive+0x1de>
      {
        case HAL_OK:
          errors = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <Ymodem_Receive+0x66>
 8001364:	2b02      	cmp	r3, #2
 8001366:	d10c      	bne.n	8001382 <Ymodem_Receive+0x72>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 8001368:	2006      	movs	r0, #6
 800136a:	f7ff fa55 	bl	8000818 <Serial_PutByte>
              result = COM_ABORT;
 800136e:	2302      	movs	r3, #2
 8001370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
              break;
 8001374:	e0b0      	b.n	80014d8 <Ymodem_Receive+0x1c8>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 8001376:	2006      	movs	r0, #6
 8001378:	f7ff fa4e 	bl	8000818 <Serial_PutByte>
              file_done = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 8001380:	e0aa      	b.n	80014d8 <Ymodem_Receive+0x1c8>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != (uint8_t)packets_received)
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <Ymodem_Receive+0x23c>)
 8001384:	789a      	ldrb	r2, [r3, #2]
 8001386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001388:	b2db      	uxtb	r3, r3
 800138a:	429a      	cmp	r2, r3
 800138c:	d003      	beq.n	8001396 <Ymodem_Receive+0x86>
              {
                Serial_PutByte(NAK);
 800138e:	2015      	movs	r0, #21
 8001390:	f7ff fa42 	bl	8000818 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 8001394:	e09f      	b.n	80014d6 <Ymodem_Receive+0x1c6>
                if (packets_received == 0)
 8001396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001398:	2b00      	cmp	r3, #0
 800139a:	d177      	bne.n	800148c <Ymodem_Receive+0x17c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <Ymodem_Receive+0x23c>)
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d06b      	beq.n	800147c <Ymodem_Receive+0x16c>
                    i = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 80013a8:	4b69      	ldr	r3, [pc, #420]	; (8001550 <Ymodem_Receive+0x240>)
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80013ac:	e008      	b.n	80013c0 <Ymodem_Receive+0xb0>
                      aFileName[i++] = *file_ptr++;
 80013ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b0:	1c53      	adds	r3, r2, #1
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b6:	1c59      	adds	r1, r3, #1
 80013b8:	6479      	str	r1, [r7, #68]	; 0x44
 80013ba:	7811      	ldrb	r1, [r2, #0]
 80013bc:	4a65      	ldr	r2, [pc, #404]	; (8001554 <Ymodem_Receive+0x244>)
 80013be:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <Ymodem_Receive+0xbe>
 80013c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ca:	2b3f      	cmp	r3, #63	; 0x3f
 80013cc:	d9ef      	bls.n	80013ae <Ymodem_Receive+0x9e>
                    aFileName[i++] = '\0';
 80013ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	647a      	str	r2, [r7, #68]	; 0x44
 80013d4:	4a5f      	ldr	r2, [pc, #380]	; (8001554 <Ymodem_Receive+0x244>)
 80013d6:	2100      	movs	r1, #0
 80013d8:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	3301      	adds	r3, #1
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80013e4:	e00b      	b.n	80013fe <Ymodem_Receive+0xee>
                      file_size[i++] = *file_ptr++;
 80013e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e8:	1c53      	adds	r3, r2, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ee:	1c59      	adds	r1, r3, #1
 80013f0:	6479      	str	r1, [r7, #68]	; 0x44
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013f8:	440b      	add	r3, r1
 80013fa:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b20      	cmp	r3, #32
 8001404:	d002      	beq.n	800140c <Ymodem_Receive+0xfc>
 8001406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d9ec      	bls.n	80013e6 <Ymodem_Receive+0xd6>
                    file_size[i++] = '\0';
 800140c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	647a      	str	r2, [r7, #68]	; 0x44
 8001412:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001416:	4413      	add	r3, r2
 8001418:	2200      	movs	r2, #0
 800141a:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 800141e:	f107 021c 	add.w	r2, r7, #28
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f8e1 	bl	80005f0 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a49      	ldr	r2, [pc, #292]	; (8001558 <Ymodem_Receive+0x248>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d914      	bls.n	8001462 <Ymodem_Receive+0x152>
                      tmp = CA;
 8001438:	2318      	movs	r3, #24
 800143a:	72fb      	strb	r3, [r7, #11]
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 800143c:	f107 010b 	add.w	r1, r7, #11
 8001440:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001444:	2201      	movs	r2, #1
 8001446:	4845      	ldr	r0, [pc, #276]	; (800155c <Ymodem_Receive+0x24c>)
 8001448:	f001 ff98 	bl	800337c <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 800144c:	f107 010b 	add.w	r1, r7, #11
 8001450:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001454:	2201      	movs	r2, #1
 8001456:	4841      	ldr	r0, [pc, #260]	; (800155c <Ymodem_Receive+0x24c>)
 8001458:	f001 ff90 	bl	800337c <HAL_UART_Transmit>
                      result = COM_LIMIT;
 800145c:	2305      	movs	r3, #5
 800145e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 8001462:	4839      	ldr	r0, [pc, #228]	; (8001548 <Ymodem_Receive+0x238>)
 8001464:	f7ff f9fe 	bl	8000864 <FLASH_If_Erase>
                    *p_size = filesize;
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800146e:	2006      	movs	r0, #6
 8001470:	f7ff f9d2 	bl	8000818 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 8001474:	2043      	movs	r0, #67	; 0x43
 8001476:	f7ff f9cf 	bl	8000818 <Serial_PutByte>
 800147a:	e027      	b.n	80014cc <Ymodem_Receive+0x1bc>
                    Serial_PutByte(ACK);
 800147c:	2006      	movs	r0, #6
 800147e:	f7ff f9cb 	bl	8000818 <Serial_PutByte>
                    file_done = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 800148a:	e025      	b.n	80014d8 <Ymodem_Receive+0x1c8>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <Ymodem_Receive+0x240>)
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)
 8001490:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <Ymodem_Receive+0x234>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	461a      	mov	r2, r3
 800149c:	f7ff fa08 	bl	80008b0 <FLASH_If_Write>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <Ymodem_Receive+0x1aa>
                    flashdestination += packet_length;
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <Ymodem_Receive+0x234>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a25      	ldr	r2, [pc, #148]	; (8001544 <Ymodem_Receive+0x234>)
 80014b0:	6013      	str	r3, [r2, #0]
                    Serial_PutByte(ACK);
 80014b2:	2006      	movs	r0, #6
 80014b4:	f7ff f9b0 	bl	8000818 <Serial_PutByte>
 80014b8:	e008      	b.n	80014cc <Ymodem_Receive+0x1bc>
                    Serial_PutByte(CA);
 80014ba:	2018      	movs	r0, #24
 80014bc:	f7ff f9ac 	bl	8000818 <Serial_PutByte>
                    Serial_PutByte(CA);
 80014c0:	2018      	movs	r0, #24
 80014c2:	f7ff f9a9 	bl	8000818 <Serial_PutByte>
                    result = COM_DATA;
 80014c6:	2304      	movs	r3, #4
 80014c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                packets_received ++;
 80014cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ce:	3301      	adds	r3, #1
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
                session_begin = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80014d6:	bf00      	nop
          }
          break;
 80014d8:	e01e      	b.n	8001518 <Ymodem_Receive+0x208>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 80014da:	2018      	movs	r0, #24
 80014dc:	f7ff f99c 	bl	8000818 <Serial_PutByte>
          Serial_PutByte(CA);
 80014e0:	2018      	movs	r0, #24
 80014e2:	f7ff f999 	bl	8000818 <Serial_PutByte>
          result = COM_ABORT;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          break;
 80014ec:	e014      	b.n	8001518 <Ymodem_Receive+0x208>
        default:
          if (session_begin > 0)
 80014ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <Ymodem_Receive+0x1ea>
          {
            errors ++;
 80014f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f6:	3301      	adds	r3, #1
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 80014fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	d907      	bls.n	8001510 <Ymodem_Receive+0x200>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 8001500:	2018      	movs	r0, #24
 8001502:	f7ff f989 	bl	8000818 <Serial_PutByte>
            Serial_PutByte(CA);
 8001506:	2018      	movs	r0, #24
 8001508:	f7ff f986 	bl	8000818 <Serial_PutByte>
            NVIC_SystemReset();
 800150c:	f7ff fdee 	bl	80010ec <__NVIC_SystemReset>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 8001510:	2043      	movs	r0, #67	; 0x43
 8001512:	f7ff f981 	bl	8000818 <Serial_PutByte>
          }
          break;
 8001516:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 8001518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800151a:	2b00      	cmp	r3, #0
 800151c:	d104      	bne.n	8001528 <Ymodem_Receive+0x218>
 800151e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001522:	2b00      	cmp	r3, #0
 8001524:	f43f af0a 	beq.w	800133c <Ymodem_Receive+0x2c>
  while ((session_done == 0) && (result == COM_OK))
 8001528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152a:	2b00      	cmp	r3, #0
 800152c:	d104      	bne.n	8001538 <Ymodem_Receive+0x228>
 800152e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001532:	2b00      	cmp	r3, #0
 8001534:	f43f aefd 	beq.w	8001332 <Ymodem_Receive+0x22>
      }
    }
  }
  return result;
 8001538:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800153c:	4618      	mov	r0, r3
 800153e:	3748      	adds	r7, #72	; 0x48
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200006fc 	.word	0x200006fc
 8001548:	08008000 	.word	0x08008000
 800154c:	200002f4 	.word	0x200002f4
 8001550:	200002f8 	.word	0x200002f8
 8001554:	200002b4 	.word	0x200002b4
 8001558:	000f8001 	.word	0x000f8001
 800155c:	20000224 	.word	0x20000224

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001598 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001564:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001566:	e003      	b.n	8001570 <LoopCopyDataInit>

08001568 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800156a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800156c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800156e:	3104      	adds	r1, #4

08001570 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001574:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001576:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001578:	d3f6      	bcc.n	8001568 <CopyDataInit>
  ldr  r2, =_sbss
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800157c:	e002      	b.n	8001584 <LoopFillZerobss>

0800157e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800157e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001580:	f842 3b04 	str.w	r3, [r2], #4

08001584 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001586:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001588:	d3f9      	bcc.n	800157e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158a:	f7ff fd79 	bl	8001080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158e:	f002 fedd 	bl	800434c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff fa35 	bl	8000a00 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001598:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800159c:	080061b0 	.word	0x080061b0
  ldr  r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015a4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80015a8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80015ac:	20000724 	.word	0x20000724

080015b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>

080015b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b6:	2003      	movs	r0, #3
 80015b8:	f000 f94a 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 f805 	bl	80015cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80015c2:	f7ff fc89 	bl	8000ed8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f965 	bl	80018ba <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f92d 	bl	8001866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000004 	.word	0x20000004
 8001624:	2000000c 	.word	0x2000000c
 8001628:	20000008 	.word	0x20000008

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	2000000c 	.word	0x2000000c
 8001650:	20000700 	.word	0x20000700

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000700 	.word	0x20000700

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_Delay+0x40>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000000c 	.word	0x2000000c

080016b0 <__NVIC_SetPriorityGrouping>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <__NVIC_SetPriorityGrouping+0x40>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x40>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	05fa0000 	.word	0x05fa0000

080016f8 <__NVIC_GetPriorityGrouping>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <__NVIC_EnableIRQ+0x38>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100

08001750 <__NVIC_SetPriority>:
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0a      	blt.n	800177a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <__NVIC_SetPriority+0x4c>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	440b      	add	r3, r1
 8001774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001778:	e00a      	b.n	8001790 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4908      	ldr	r1, [pc, #32]	; (80017a0 <__NVIC_SetPriority+0x50>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3b04      	subs	r3, #4
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	440b      	add	r3, r1
 800178e:	761a      	strb	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_EncodePriority>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	2b04      	cmp	r3, #4
 80017c0:	bf28      	it	cs
 80017c2:	2304      	movcs	r3, #4
 80017c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d902      	bls.n	80017d4 <NVIC_EncodePriority+0x30>
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3b03      	subs	r3, #3
 80017d2:	e000      	b.n	80017d6 <NVIC_EncodePriority+0x32>
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	4313      	orrs	r3, r2
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f7ff ff8e 	bl	8001750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff29 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff3e 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff8e 	bl	80017a4 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5d 	bl	8001750 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff31 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa2 	bl	800180c <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d004      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e00c      	b.n	800190a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2205      	movs	r2, #5
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_FLASH_Program+0xb0>)
 800192c:	7d1b      	ldrb	r3, [r3, #20]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_FLASH_Program+0x1e>
 8001932:	2302      	movs	r3, #2
 8001934:	e043      	b.n	80019be <HAL_FLASH_Program+0xa6>
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_FLASH_Program+0xb0>)
 8001938:	2201      	movs	r2, #1
 800193a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800193c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001940:	f000 f868 	bl	8001a14 <FLASH_WaitForLastOperation>
 8001944:	4603      	mov	r3, r0
 8001946:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d133      	bne.n	80019b6 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d823      	bhi.n	800199c <HAL_FLASH_Program+0x84>
 8001954:	a201      	add	r2, pc, #4	; (adr r2, 800195c <HAL_FLASH_Program+0x44>)
 8001956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195a:	bf00      	nop
 800195c:	0800196d 	.word	0x0800196d
 8001960:	08001979 	.word	0x08001979
 8001964:	08001985 	.word	0x08001985
 8001968:	08001991 	.word	0x08001991
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800196c:	783b      	ldrb	r3, [r7, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	68b8      	ldr	r0, [r7, #8]
 8001972:	f000 f909 	bl	8001b88 <FLASH_Program_Byte>
        break;
 8001976:	e012      	b.n	800199e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001978:	883b      	ldrh	r3, [r7, #0]
 800197a:	4619      	mov	r1, r3
 800197c:	68b8      	ldr	r0, [r7, #8]
 800197e:	f000 f8dd 	bl	8001b3c <FLASH_Program_HalfWord>
        break;
 8001982:	e00c      	b.n	800199e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	68b8      	ldr	r0, [r7, #8]
 800198a:	f000 f8b3 	bl	8001af4 <FLASH_Program_Word>
        break;
 800198e:	e006      	b.n	800199e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001994:	68b8      	ldr	r0, [r7, #8]
 8001996:	f000 f87d 	bl	8001a94 <FLASH_Program_DoubleWord>
        break;
 800199a:	e000      	b.n	800199e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 800199c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800199e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019a2:	f000 f837 	bl	8001a14 <FLASH_WaitForLastOperation>
 80019a6:	4603      	mov	r3, r0
 80019a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_FLASH_Program+0xb4>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_FLASH_Program+0xb4>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HAL_FLASH_Program+0xb0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	751a      	strb	r2, [r3, #20]

  return status;
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000704 	.word	0x20000704
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_FLASH_Unlock+0x38>)
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da0b      	bge.n	80019fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_FLASH_Unlock+0x38>)
 80019e4:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_FLASH_Unlock+0x3c>)
 80019e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_FLASH_Unlock+0x38>)
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_FLASH_Unlock+0x40>)
 80019ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_FLASH_Unlock+0x38>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da01      	bge.n	80019fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80019fa:	79fb      	ldrb	r3, [r7, #7]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40023c00 	.word	0x40023c00
 8001a0c:	45670123 	.word	0x45670123
 8001a10:	cdef89ab 	.word	0xcdef89ab

08001a14 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <FLASH_WaitForLastOperation+0x78>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a26:	f7ff fe15 	bl	8001654 <HAL_GetTick>
 8001a2a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a2c:	e010      	b.n	8001a50 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d00c      	beq.n	8001a50 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <FLASH_WaitForLastOperation+0x38>
 8001a3c:	f7ff fe0a 	bl	8001654 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d201      	bcs.n	8001a50 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e019      	b.n	8001a84 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <FLASH_WaitForLastOperation+0x7c>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e8      	bne.n	8001a2e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <FLASH_WaitForLastOperation+0x7c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001a68:	f000 f8b2 	bl	8001bd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e009      	b.n	8001a84 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <FLASH_WaitForLastOperation+0x7c>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <FLASH_WaitForLastOperation+0x7c>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
  
}  
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000704 	.word	0x20000704
 8001a90:	40023c00 	.word	0x40023c00

08001a94 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001a94:	b490      	push	{r4, r7}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <FLASH_Program_DoubleWord+0x5c>)
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <FLASH_Program_DoubleWord+0x5c>)
 8001aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <FLASH_Program_DoubleWord+0x5c>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <FLASH_Program_DoubleWord+0x5c>)
 8001ab2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ab6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <FLASH_Program_DoubleWord+0x5c>)
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <FLASH_Program_DoubleWord+0x5c>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001aca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	f04f 0400 	mov.w	r4, #0
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	2400      	movs	r4, #0
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	3204      	adds	r2, #4
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc90      	pop	{r4, r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <FLASH_Program_Word+0x44>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <FLASH_Program_Word+0x44>)
 8001b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <FLASH_Program_Word+0x44>)
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <FLASH_Program_Word+0x44>)
 8001b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <FLASH_Program_Word+0x44>)
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <FLASH_Program_Word+0x44>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <FLASH_Program_HalfWord+0x48>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <FLASH_Program_HalfWord+0x48>)
 8001b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <FLASH_Program_HalfWord+0x48>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <FLASH_Program_HalfWord+0x48>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <FLASH_Program_HalfWord+0x48>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <FLASH_Program_HalfWord+0x48>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	801a      	strh	r2, [r3, #0]
 8001b72:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <FLASH_Program_Byte+0x44>)
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <FLASH_Program_Byte+0x44>)
 8001b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <FLASH_Program_Byte+0x44>)
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <FLASH_Program_Byte+0x44>)
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <FLASH_Program_Byte+0x44>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <FLASH_Program_Byte+0x44>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <FLASH_SetErrorCode+0x8c>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f043 0320 	orr.w	r3, r3, #32
 8001be8:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001bea:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <FLASH_SetErrorCode+0x8c>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f043 0310 	orr.w	r3, r3, #16
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001c02:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <FLASH_SetErrorCode+0x8c>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f043 0308 	orr.w	r3, r3, #8
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001c1a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <FLASH_SetErrorCode+0x8c>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001c32:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <FLASH_SetErrorCode+0x8c>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <FLASH_SetErrorCode+0x90>)
 8001c4a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <FLASH_SetErrorCode+0x8c>)
 8001c4e:	22f2      	movs	r2, #242	; 0xf2
 8001c50:	60da      	str	r2, [r3, #12]
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40023c00 	.word	0x40023c00
 8001c60:	20000704 	.word	0x20000704

08001c64 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_FLASHEx_Erase+0xd4>)
 8001c78:	7d1b      	ldrb	r3, [r3, #20]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_FLASHEx_Erase+0x1e>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e056      	b.n	8001d30 <HAL_FLASHEx_Erase+0xcc>
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_FLASHEx_Erase+0xd4>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c8c:	f7ff fec2 	bl	8001a14 <FLASH_WaitForLastOperation>
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d146      	bne.n	8001d28 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d115      	bne.n	8001cd6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f000 f844 	bl	8001d44 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cc0:	f7ff fea8 	bl	8001a14 <FLASH_WaitForLastOperation>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_FLASHEx_Erase+0xd8>)
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	491b      	ldr	r1, [pc, #108]	; (8001d3c <HAL_FLASHEx_Erase+0xd8>)
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_FLASHEx_Erase+0xdc>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	610b      	str	r3, [r1, #16]
 8001cd4:	e028      	b.n	8001d28 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	e01c      	b.n	8001d18 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	f000 f866 	bl	8001db8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cf0:	f7ff fe90 	bl	8001a14 <FLASH_WaitForLastOperation>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_FLASHEx_Erase+0xd8>)
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_FLASHEx_Erase+0xd8>)
 8001cfe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001d02:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	601a      	str	r2, [r3, #0]
          break;
 8001d10:	e00a      	b.n	8001d28 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4413      	add	r3, r2
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3da      	bcc.n	8001cde <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_FLASHEx_Erase+0xd4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	751a      	strb	r2, [r3, #20]

  return status;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000704 	.word	0x20000704
 8001d3c:	40023c00 	.word	0x40023c00
 8001d40:	ffff7ffb 	.word	0xffff7ffb

08001d44 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d5a:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d107      	bne.n	8001d72 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	4913      	ldr	r1, [pc, #76]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d68:	f248 0304 	movw	r3, #32772	; 0x8004
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	610b      	str	r3, [r1, #16]
 8001d70:	e00f      	b.n	8001d92 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d106      	bne.n	8001d86 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d82:	6113      	str	r3, [r2, #16]
 8001d84:	e005      	b.n	8001d92 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <FLASH_MassErase+0x70>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da2:	6113      	str	r3, [r2, #16]
 8001da4:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	e010      	b.n	8001df6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d103      	bne.n	8001de2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e009      	b.n	8001df6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d103      	bne.n	8001df0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e002      	b.n	8001df6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001df0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001df4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0b      	cmp	r3, #11
 8001dfa:	d902      	bls.n	8001e02 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	4910      	ldr	r1, [pc, #64]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <FLASH_Erase_Sector+0x9c>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e42:	6113      	str	r3, [r2, #16]
 8001e44:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40023c00 	.word	0x40023c00

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e175      	b.n	8002164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e78:	2201      	movs	r2, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8164 	bne.w	800215e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x4e>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b12      	cmp	r3, #18
 8001ea4:	d123      	bne.n	8001eee <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	08da      	lsrs	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3208      	adds	r2, #8
 8001eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	08da      	lsrs	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3208      	adds	r2, #8
 8001ee8:	69b9      	ldr	r1, [r7, #24]
 8001eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0203 	and.w	r2, r3, #3
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d00b      	beq.n	8001f42 <HAL_GPIO_Init+0xea>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f36:	2b11      	cmp	r3, #17
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d130      	bne.n	8001fa4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0201 	and.w	r2, r3, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80be 	beq.w	800215e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	4b65      	ldr	r3, [pc, #404]	; (8002178 <HAL_GPIO_Init+0x320>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a64      	ldr	r2, [pc, #400]	; (8002178 <HAL_GPIO_Init+0x320>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b62      	ldr	r3, [pc, #392]	; (8002178 <HAL_GPIO_Init+0x320>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ffa:	4a60      	ldr	r2, [pc, #384]	; (800217c <HAL_GPIO_Init+0x324>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a57      	ldr	r2, [pc, #348]	; (8002180 <HAL_GPIO_Init+0x328>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d037      	beq.n	8002096 <HAL_GPIO_Init+0x23e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_GPIO_Init+0x32c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d031      	beq.n	8002092 <HAL_GPIO_Init+0x23a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a55      	ldr	r2, [pc, #340]	; (8002188 <HAL_GPIO_Init+0x330>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <HAL_GPIO_Init+0x236>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a54      	ldr	r2, [pc, #336]	; (800218c <HAL_GPIO_Init+0x334>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d025      	beq.n	800208a <HAL_GPIO_Init+0x232>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a53      	ldr	r2, [pc, #332]	; (8002190 <HAL_GPIO_Init+0x338>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <HAL_GPIO_Init+0x22e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_GPIO_Init+0x33c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x22a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a51      	ldr	r2, [pc, #324]	; (8002198 <HAL_GPIO_Init+0x340>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x226>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a50      	ldr	r2, [pc, #320]	; (800219c <HAL_GPIO_Init+0x344>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x222>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4f      	ldr	r2, [pc, #316]	; (80021a0 <HAL_GPIO_Init+0x348>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x21e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4e      	ldr	r2, [pc, #312]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x21a>
 800206e:	2309      	movs	r3, #9
 8002070:	e012      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002072:	230a      	movs	r3, #10
 8002074:	e010      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002076:	2308      	movs	r3, #8
 8002078:	e00e      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800207a:	2307      	movs	r3, #7
 800207c:	e00c      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800207e:	2306      	movs	r3, #6
 8002080:	e00a      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002082:	2305      	movs	r3, #5
 8002084:	e008      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002086:	2304      	movs	r3, #4
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800208a:	2303      	movs	r3, #3
 800208c:	e004      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800208e:	2302      	movs	r3, #2
 8002090:	e002      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002096:	2300      	movs	r3, #0
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4093      	lsls	r3, r2
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020a8:	4934      	ldr	r1, [pc, #208]	; (800217c <HAL_GPIO_Init+0x324>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b6:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <HAL_GPIO_Init+0x350>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020da:	4a33      	ldr	r2, [pc, #204]	; (80021a8 <HAL_GPIO_Init+0x350>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_GPIO_Init+0x350>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002104:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <HAL_GPIO_Init+0x350>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_GPIO_Init+0x350>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212e:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <HAL_GPIO_Init+0x350>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_GPIO_Init+0x350>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002158:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <HAL_GPIO_Init+0x350>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	f67f ae86 	bls.w	8001e78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800216c:	bf00      	nop
 800216e:	3724      	adds	r7, #36	; 0x24
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40023800 	.word	0x40023800
 800217c:	40013800 	.word	0x40013800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40021400 	.word	0x40021400
 8002198:	40021800 	.word	0x40021800
 800219c:	40021c00 	.word	0x40021c00
 80021a0:	40022000 	.word	0x40022000
 80021a4:	40022400 	.word	0x40022400
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021bc:	787b      	ldrb	r3, [r7, #1]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	041a      	lsls	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	401a      	ands	r2, r3
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d104      	bne.n	8002202 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	041a      	lsls	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002200:	e002      	b.n	8002208 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	619a      	str	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e25e      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8087 	beq.w	8002346 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002238:	4b96      	ldr	r3, [pc, #600]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b04      	cmp	r3, #4
 8002242:	d00c      	beq.n	800225e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002244:	4b93      	ldr	r3, [pc, #588]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d112      	bne.n	8002276 <HAL_RCC_OscConfig+0x62>
 8002250:	4b90      	ldr	r3, [pc, #576]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225c:	d10b      	bne.n	8002276 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225e:	4b8d      	ldr	r3, [pc, #564]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d06c      	beq.n	8002344 <HAL_RCC_OscConfig+0x130>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d168      	bne.n	8002344 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e238      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x7a>
 8002280:	4b84      	ldr	r3, [pc, #528]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a83      	ldr	r2, [pc, #524]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e02e      	b.n	80022ec <HAL_RCC_OscConfig+0xd8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x9c>
 8002296:	4b7f      	ldr	r3, [pc, #508]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7e      	ldr	r2, [pc, #504]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 800229c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b7c      	ldr	r3, [pc, #496]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7b      	ldr	r2, [pc, #492]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e01d      	b.n	80022ec <HAL_RCC_OscConfig+0xd8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0xc0>
 80022ba:	4b76      	ldr	r3, [pc, #472]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a75      	ldr	r2, [pc, #468]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b73      	ldr	r3, [pc, #460]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a72      	ldr	r2, [pc, #456]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0xd8>
 80022d4:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b6c      	ldr	r3, [pc, #432]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6b      	ldr	r2, [pc, #428]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80022e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff f9ae 	bl	8001654 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff f9aa 	bl	8001654 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1ec      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b61      	ldr	r3, [pc, #388]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0xe8>
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff f99a 	bl	8001654 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002324:	f7ff f996 	bl	8001654 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1d8      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	4b57      	ldr	r3, [pc, #348]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x110>
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d069      	beq.n	8002426 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002352:	4b50      	ldr	r3, [pc, #320]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b08      	cmp	r3, #8
 8002368:	d11c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x190>
 800236a:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d116      	bne.n	80023a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_RCC_OscConfig+0x17a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e1ac      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b41      	ldr	r3, [pc, #260]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	493d      	ldr	r1, [pc, #244]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	e040      	b.n	8002426 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a38      	ldr	r2, [pc, #224]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7ff f94c 	bl	8001654 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c0:	f7ff f948 	bl	8001654 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e18a      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023de:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4929      	ldr	r1, [pc, #164]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
 80023f2:	e018      	b.n	8002426 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a26      	ldr	r2, [pc, #152]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7ff f928 	bl	8001654 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002408:	f7ff f924 	bl	8001654 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e166      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d038      	beq.n	80024a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d019      	beq.n	800246e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	4a15      	ldr	r2, [pc, #84]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7ff f905 	bl	8001654 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff f901 	bl	8001654 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e143      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x23a>
 800246c:	e01a      	b.n	80024a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_RCC_OscConfig+0x280>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7ff f8eb 	bl	8001654 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff f8e7 	bl	8001654 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d903      	bls.n	8002498 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e129      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
 8002494:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002498:	4b95      	ldr	r3, [pc, #596]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800249a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ee      	bne.n	8002482 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80a4 	beq.w	80025fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b8f      	ldr	r3, [pc, #572]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b8c      	ldr	r3, [pc, #560]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a8b      	ldr	r2, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b89      	ldr	r3, [pc, #548]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	4b86      	ldr	r3, [pc, #536]	; (80026f4 <HAL_RCC_OscConfig+0x4e0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024e6:	4b83      	ldr	r3, [pc, #524]	; (80026f4 <HAL_RCC_OscConfig+0x4e0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a82      	ldr	r2, [pc, #520]	; (80026f4 <HAL_RCC_OscConfig+0x4e0>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7ff f8af 	bl	8001654 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7ff f8ab 	bl	8001654 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b64      	cmp	r3, #100	; 0x64
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0ed      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250c:	4b79      	ldr	r3, [pc, #484]	; (80026f4 <HAL_RCC_OscConfig+0x4e0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x31a>
 8002520:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a72      	ldr	r2, [pc, #456]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
 800252c:	e02d      	b.n	800258a <HAL_RCC_OscConfig+0x376>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x33c>
 8002536:	4b6e      	ldr	r3, [pc, #440]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a6d      	ldr	r2, [pc, #436]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	4b6b      	ldr	r3, [pc, #428]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a6a      	ldr	r2, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
 800254e:	e01c      	b.n	800258a <HAL_RCC_OscConfig+0x376>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d10c      	bne.n	8002572 <HAL_RCC_OscConfig+0x35e>
 8002558:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a64      	ldr	r2, [pc, #400]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	4a61      	ldr	r2, [pc, #388]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6713      	str	r3, [r2, #112]	; 0x70
 8002570:	e00b      	b.n	800258a <HAL_RCC_OscConfig+0x376>
 8002572:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a5e      	ldr	r2, [pc, #376]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6713      	str	r3, [r2, #112]	; 0x70
 800257e:	4b5c      	ldr	r3, [pc, #368]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4a5b      	ldr	r2, [pc, #364]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d015      	beq.n	80025be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7ff f85f 	bl	8001654 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7ff f85b 	bl	8001654 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e09b      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	4b4f      	ldr	r3, [pc, #316]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ee      	beq.n	800259a <HAL_RCC_OscConfig+0x386>
 80025bc:	e014      	b.n	80025e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7ff f849 	bl	8001654 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7ff f845 	bl	8001654 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e085      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ee      	bne.n	80025c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a3f      	ldr	r2, [pc, #252]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d071      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002602:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	d069      	beq.n	80026e2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d14b      	bne.n	80026ae <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a35      	ldr	r2, [pc, #212]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800261c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7ff f817 	bl	8001654 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262a:	f7ff f813 	bl	8001654 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e055      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263c:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	019b      	lsls	r3, r3, #6
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	085b      	lsrs	r3, r3, #1
 8002660:	3b01      	subs	r3, #1
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	061b      	lsls	r3, r3, #24
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	071b      	lsls	r3, r3, #28
 8002674:	491e      	ldr	r1, [pc, #120]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 8002680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe ffe5 	bl	8001654 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe ffe1 	bl	8001654 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e023      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x47a>
 80026ac:	e01b      	b.n	80026e6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe ffcb 	bl	8001654 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe ffc7 	bl	8001654 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e009      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x4dc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x4ae>
 80026e0:	e001      	b.n	80026e6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000

080026f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0ce      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b69      	ldr	r3, [pc, #420]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 020f 	bic.w	r2, r3, #15
 8002726:	4964      	ldr	r1, [pc, #400]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b62      	ldr	r3, [pc, #392]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b6      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b58      	ldr	r3, [pc, #352]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a57      	ldr	r2, [pc, #348]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a51      	ldr	r2, [pc, #324]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800277a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494c      	ldr	r1, [pc, #304]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d040      	beq.n	800281c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b46      	ldr	r3, [pc, #280]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07d      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e071      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e069      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4935      	ldr	r1, [pc, #212]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe ff32 	bl	8001654 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe ff2e 	bl	8001654 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e051      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d210      	bcs.n	800284c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 020f 	bic.w	r2, r3, #15
 8002832:	4921      	ldr	r1, [pc, #132]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e030      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4915      	ldr	r1, [pc, #84]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490d      	ldr	r1, [pc, #52]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f81d 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 800288e:	4601      	mov	r1, r0
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	fa21 f303 	lsr.w	r3, r1, r3
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_RCC_ClockConfig+0x1cc>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7fe fe90 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023c00 	.word	0x40023c00
 80028bc:	40023800 	.word	0x40023800
 80028c0:	08005f5c 	.word	0x08005f5c
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	2300      	movs	r3, #0
 80028d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028de:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x158>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d007      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x32>
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d008      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x38>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 808d 	bne.w	8002a0e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x15c>)
 80028f6:	60bb      	str	r3, [r7, #8]
       break;
 80028f8:	e08c      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028fa:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x160>)
 80028fc:	60bb      	str	r3, [r7, #8]
      break;
 80028fe:	e089      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002900:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x158>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002908:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800290a:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x158>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d023      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002916:	4b42      	ldr	r3, [pc, #264]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x158>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	f04f 0400 	mov.w	r4, #0
 8002920:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	ea03 0501 	and.w	r5, r3, r1
 800292c:	ea04 0602 	and.w	r6, r4, r2
 8002930:	4a3d      	ldr	r2, [pc, #244]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x160>)
 8002932:	fb02 f106 	mul.w	r1, r2, r6
 8002936:	2200      	movs	r2, #0
 8002938:	fb02 f205 	mul.w	r2, r2, r5
 800293c:	440a      	add	r2, r1
 800293e:	493a      	ldr	r1, [pc, #232]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x160>)
 8002940:	fba5 0101 	umull	r0, r1, r5, r1
 8002944:	1853      	adds	r3, r2, r1
 8002946:	4619      	mov	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f04f 0400 	mov.w	r4, #0
 800294e:	461a      	mov	r2, r3
 8002950:	4623      	mov	r3, r4
 8002952:	f7fd fc79 	bl	8000248 <__aeabi_uldivmod>
 8002956:	4603      	mov	r3, r0
 8002958:	460c      	mov	r4, r1
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e049      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x158>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	f04f 0400 	mov.w	r4, #0
 8002968:	f240 11ff 	movw	r1, #511	; 0x1ff
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	ea03 0501 	and.w	r5, r3, r1
 8002974:	ea04 0602 	and.w	r6, r4, r2
 8002978:	4629      	mov	r1, r5
 800297a:	4632      	mov	r2, r6
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	f04f 0400 	mov.w	r4, #0
 8002984:	0154      	lsls	r4, r2, #5
 8002986:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800298a:	014b      	lsls	r3, r1, #5
 800298c:	4619      	mov	r1, r3
 800298e:	4622      	mov	r2, r4
 8002990:	1b49      	subs	r1, r1, r5
 8002992:	eb62 0206 	sbc.w	r2, r2, r6
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	f04f 0400 	mov.w	r4, #0
 800299e:	0194      	lsls	r4, r2, #6
 80029a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029a4:	018b      	lsls	r3, r1, #6
 80029a6:	1a5b      	subs	r3, r3, r1
 80029a8:	eb64 0402 	sbc.w	r4, r4, r2
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	00e2      	lsls	r2, r4, #3
 80029b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029ba:	00d9      	lsls	r1, r3, #3
 80029bc:	460b      	mov	r3, r1
 80029be:	4614      	mov	r4, r2
 80029c0:	195b      	adds	r3, r3, r5
 80029c2:	eb44 0406 	adc.w	r4, r4, r6
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	02a2      	lsls	r2, r4, #10
 80029d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029d4:	0299      	lsls	r1, r3, #10
 80029d6:	460b      	mov	r3, r1
 80029d8:	4614      	mov	r4, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	4621      	mov	r1, r4
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f04f 0400 	mov.w	r4, #0
 80029e4:	461a      	mov	r2, r3
 80029e6:	4623      	mov	r3, r4
 80029e8:	f7fd fc2e 	bl	8000248 <__aeabi_uldivmod>
 80029ec:	4603      	mov	r3, r0
 80029ee:	460c      	mov	r4, r1
 80029f0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x158>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	3301      	adds	r3, #1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	60bb      	str	r3, [r7, #8]
      break;
 8002a0c:	e002      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a10:	60bb      	str	r3, [r7, #8]
      break;
 8002a12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a14:	68bb      	ldr	r3, [r7, #8]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	017d7840 	.word	0x017d7840

08002a2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5a:	5cd3      	ldrb	r3, [r2, r3]
 8002a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08005f6c 	.word	0x08005f6c

08002a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a70:	f7ff ffdc 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a74:	4601      	mov	r1, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0b5b      	lsrs	r3, r3, #13
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08005f6c 	.word	0x08005f6c

08002a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002abc:	4b69      	ldr	r3, [pc, #420]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a68      	ldr	r2, [pc, #416]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ac6:	6093      	str	r3, [r2, #8]
 8002ac8:	4b66      	ldr	r3, [pc, #408]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	4964      	ldr	r1, [pc, #400]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d017      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aee:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	4959      	ldr	r1, [pc, #356]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d017      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	494a      	ldr	r1, [pc, #296]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b48:	d101      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 808b 	beq.w	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a39      	ldr	r2, [pc, #228]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fd5a 	bl	8001654 <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba4:	f7fe fd56 	bl	8001654 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e38d      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d035      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d02e      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d114      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fd1e 	bl	8001654 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fd1a 	bl	8001654 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e34f      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ee      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	4901      	ldr	r1, [pc, #4]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	0ffffcff 	.word	0x0ffffcff
 8002c70:	4bb3      	ldr	r3, [pc, #716]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4ab2      	ldr	r2, [pc, #712]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c7a:	6093      	str	r3, [r2, #8]
 8002c7c:	4bb0      	ldr	r3, [pc, #704]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	49ad      	ldr	r1, [pc, #692]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c9a:	4ba9      	ldr	r3, [pc, #676]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca0:	4aa7      	ldr	r2, [pc, #668]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002caa:	4ba5      	ldr	r3, [pc, #660]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	49a2      	ldr	r1, [pc, #648]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc8:	4b9d      	ldr	r3, [pc, #628]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd6:	499a      	ldr	r1, [pc, #616]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cea:	4b95      	ldr	r3, [pc, #596]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf8:	4991      	ldr	r1, [pc, #580]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1a:	4989      	ldr	r1, [pc, #548]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d2e:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4980      	ldr	r1, [pc, #512]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d50:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4978      	ldr	r1, [pc, #480]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d72:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f023 020c 	bic.w	r2, r3, #12
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d80:	496f      	ldr	r1, [pc, #444]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d94:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	4967      	ldr	r1, [pc, #412]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002db6:	4b62      	ldr	r3, [pc, #392]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc4:	495e      	ldr	r1, [pc, #376]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	4956      	ldr	r1, [pc, #344]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dfa:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	494d      	ldr	r1, [pc, #308]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e1c:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	4945      	ldr	r1, [pc, #276]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e3e:	4b40      	ldr	r3, [pc, #256]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4c:	493c      	ldr	r1, [pc, #240]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e60:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6e:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d011      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e90:	492b      	ldr	r1, [pc, #172]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	491b      	ldr	r1, [pc, #108]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f18:	4909      	ldr	r1, [pc, #36]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	e002      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	4985      	ldr	r1, [pc, #532]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f68:	497c      	ldr	r1, [pc, #496]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d005      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f7e:	f040 80d6 	bne.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f82:	4b76      	ldr	r3, [pc, #472]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a75      	ldr	r2, [pc, #468]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f8e:	f7fe fb61 	bl	8001654 <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f96:	f7fe fb5d 	bl	8001654 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b64      	cmp	r3, #100	; 0x64
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e194      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d021      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11d      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fc8:	4b64      	ldr	r3, [pc, #400]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fd6:	4b61      	ldr	r3, [pc, #388]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fdc:	0e1b      	lsrs	r3, r3, #24
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	019a      	lsls	r2, r3, #6
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	071b      	lsls	r3, r3, #28
 8002ffc:	4957      	ldr	r1, [pc, #348]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003022:	2b00      	cmp	r3, #0
 8003024:	d02e      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302e:	d129      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003030:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003036:	0c1b      	lsrs	r3, r3, #16
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003044:	0f1b      	lsrs	r3, r3, #28
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	019a      	lsls	r2, r3, #6
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	071b      	lsls	r3, r3, #28
 8003064:	493d      	ldr	r1, [pc, #244]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800306c:	4b3b      	ldr	r3, [pc, #236]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800306e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003072:	f023 021f 	bic.w	r2, r3, #31
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	3b01      	subs	r3, #1
 800307c:	4937      	ldr	r1, [pc, #220]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01d      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003096:	0e1b      	lsrs	r3, r3, #24
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a4:	0f1b      	lsrs	r3, r3, #28
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	019a      	lsls	r2, r3, #6
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	431a      	orrs	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	071b      	lsls	r3, r3, #28
 80030c4:	4925      	ldr	r1, [pc, #148]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d011      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	019a      	lsls	r2, r3, #6
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	071b      	lsls	r3, r3, #28
 80030f4:	4919      	ldr	r1, [pc, #100]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a16      	ldr	r2, [pc, #88]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003102:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003108:	f7fe faa4 	bl	8001654 <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003110:	f7fe faa0 	bl	8001654 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0d7      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b01      	cmp	r3, #1
 8003132:	f040 80cd 	bne.w	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a08      	ldr	r2, [pc, #32]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800313c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003142:	f7fe fa87 	bl	8001654 <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800314a:	f7fe fa83 	bl	8001654 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d903      	bls.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0ba      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800315c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003160:	4b5e      	ldr	r3, [pc, #376]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800316c:	d0ed      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02e      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d12a      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031a4:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	0f1b      	lsrs	r3, r3, #28
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	019a      	lsls	r2, r3, #6
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	041b      	lsls	r3, r3, #16
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	061b      	lsls	r3, r3, #24
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	071b      	lsls	r3, r3, #28
 80031ca:	4944      	ldr	r1, [pc, #272]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031d2:	4b42      	ldr	r3, [pc, #264]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	3b01      	subs	r3, #1
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	493d      	ldr	r1, [pc, #244]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d022      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003200:	d11d      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003202:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	0e1b      	lsrs	r3, r3, #24
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003210:	4b32      	ldr	r3, [pc, #200]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	0f1b      	lsrs	r3, r3, #28
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	019a      	lsls	r2, r3, #6
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	4929      	ldr	r1, [pc, #164]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d028      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	0e1b      	lsrs	r3, r3, #24
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	019a      	lsls	r2, r3, #6
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	431a      	orrs	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	071b      	lsls	r3, r3, #28
 800327e:	4917      	ldr	r1, [pc, #92]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	4911      	ldr	r1, [pc, #68]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a8:	f7fe f9d4 	bl	8001654 <HAL_GetTick>
 80032ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032b0:	f7fe f9d0 	bl	8001654 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e007      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ce:	d1ef      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800

080032e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e040      	b.n	8003374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd fe0c 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2224      	movs	r2, #36	; 0x24
 800330c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fb5c 	bl	80039dc <UART_SetConfig>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e022      	b.n	8003374 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fdf4 	bl	8003f24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800334a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fe7b 	bl	8004068 <UART_CheckIdleState>
 8003372:	4603      	mov	r3, r0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003390:	2b20      	cmp	r3, #32
 8003392:	d17f      	bne.n	8003494 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <HAL_UART_Transmit+0x24>
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e078      	b.n	8003496 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_UART_Transmit+0x36>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e071      	b.n	8003496 <HAL_UART_Transmit+0x11a>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2221      	movs	r2, #33	; 0x21
 80033c4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80033c6:	f7fe f945 	bl	8001654 <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	88fa      	ldrh	r2, [r7, #6]
 80033d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e4:	d108      	bne.n	80033f8 <HAL_UART_Transmit+0x7c>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d104      	bne.n	80033f8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e003      	b.n	8003400 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003400:	e02c      	b.n	800345c <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2200      	movs	r2, #0
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fe5a 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e03c      	b.n	8003496 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10b      	bne.n	800343a <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003430:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	3302      	adds	r3, #2
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	e007      	b.n	800344a <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	781a      	ldrb	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	3301      	adds	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1cc      	bne.n	8003402 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2200      	movs	r2, #0
 8003470:	2140      	movs	r1, #64	; 0x40
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fe27 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e009      	b.n	8003496 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b08a      	sub	sp, #40	; 0x28
 80034a2:	af02      	add	r7, sp, #8
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	f040 80ba 	bne.w	800362c <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_UART_Receive+0x26>
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0b2      	b.n	800362e <HAL_UART_Receive+0x190>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Receive+0x38>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e0ab      	b.n	800362e <HAL_UART_Receive+0x190>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2222      	movs	r2, #34	; 0x22
 80034e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80034ea:	f7fe f8b3 	bl	8001654 <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003508:	d10e      	bne.n	8003528 <HAL_UART_Receive+0x8a>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d105      	bne.n	800351e <HAL_UART_Receive+0x80>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003518:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800351c:	e02d      	b.n	800357a <HAL_UART_Receive+0xdc>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	22ff      	movs	r2, #255	; 0xff
 8003522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003526:	e028      	b.n	800357a <HAL_UART_Receive+0xdc>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10d      	bne.n	800354c <HAL_UART_Receive+0xae>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <HAL_UART_Receive+0xa4>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003540:	e01b      	b.n	800357a <HAL_UART_Receive+0xdc>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	227f      	movs	r2, #127	; 0x7f
 8003546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800354a:	e016      	b.n	800357a <HAL_UART_Receive+0xdc>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003554:	d10d      	bne.n	8003572 <HAL_UART_Receive+0xd4>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d104      	bne.n	8003568 <HAL_UART_Receive+0xca>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	227f      	movs	r2, #127	; 0x7f
 8003562:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003566:	e008      	b.n	800357a <HAL_UART_Receive+0xdc>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	223f      	movs	r2, #63	; 0x3f
 800356c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003570:	e003      	b.n	800357a <HAL_UART_Receive+0xdc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003580:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	d108      	bne.n	800359e <HAL_UART_Receive+0x100>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e003      	b.n	80035a6 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80035a6:	e032      	b.n	800360e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2200      	movs	r2, #0
 80035b0:	2120      	movs	r1, #32
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fd87 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e035      	b.n	800362e <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10c      	bne.n	80035e2 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	8a7b      	ldrh	r3, [r7, #18]
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3302      	adds	r3, #2
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	e00c      	b.n	80035fc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	8a7b      	ldrh	r3, [r7, #18]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	4013      	ands	r3, r2
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3301      	adds	r3, #1
 80035fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1c6      	bne.n	80035a8 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800364a:	2b20      	cmp	r3, #32
 800364c:	f040 808a 	bne.w	8003764 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_UART_Receive_IT+0x24>
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e082      	b.n	8003766 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_UART_Receive_IT+0x36>
 800366a:	2302      	movs	r3, #2
 800366c:	e07b      	b.n	8003766 <HAL_UART_Receive_IT+0x12e>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369a:	d10e      	bne.n	80036ba <HAL_UART_Receive_IT+0x82>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_UART_Receive_IT+0x78>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036ae:	e02d      	b.n	800370c <HAL_UART_Receive_IT+0xd4>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	22ff      	movs	r2, #255	; 0xff
 80036b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b8:	e028      	b.n	800370c <HAL_UART_Receive_IT+0xd4>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10d      	bne.n	80036de <HAL_UART_Receive_IT+0xa6>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d104      	bne.n	80036d4 <HAL_UART_Receive_IT+0x9c>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	22ff      	movs	r2, #255	; 0xff
 80036ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d2:	e01b      	b.n	800370c <HAL_UART_Receive_IT+0xd4>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	227f      	movs	r2, #127	; 0x7f
 80036d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036dc:	e016      	b.n	800370c <HAL_UART_Receive_IT+0xd4>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036e6:	d10d      	bne.n	8003704 <HAL_UART_Receive_IT+0xcc>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_UART_Receive_IT+0xc2>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	227f      	movs	r2, #127	; 0x7f
 80036f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036f8:	e008      	b.n	800370c <HAL_UART_Receive_IT+0xd4>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	223f      	movs	r2, #63	; 0x3f
 80036fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003702:	e003      	b.n	800370c <HAL_UART_Receive_IT+0xd4>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2222      	movs	r2, #34	; 0x22
 8003716:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	d107      	bne.n	8003742 <HAL_UART_Receive_IT+0x10a>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <HAL_UART_Receive_IT+0x13c>)
 800373e:	661a      	str	r2, [r3, #96]	; 0x60
 8003740:	e002      	b.n	8003748 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <HAL_UART_Receive_IT+0x140>)
 8003746:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800375e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	0800429b 	.word	0x0800429b
 8003778:	080041f5 	.word	0x080041f5

0800377c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d113      	bne.n	80037d2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80eb 	beq.w	800399e <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
      }
      return;
 80037d0:	e0e5      	b.n	800399e <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80c0 	beq.w	800395a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80b5 	beq.w	800395a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <HAL_UART_IRQHandler+0x9c>
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d009      	beq.n	8003818 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003810:	f043 0201 	orr.w	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <HAL_UART_IRQHandler+0xc4>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2202      	movs	r2, #2
 8003832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003838:	f043 0204 	orr.w	r2, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <HAL_UART_IRQHandler+0xec>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2204      	movs	r2, #4
 800385a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003860:	f043 0202 	orr.w	r2, r3, #2
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d013      	beq.n	800389a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d104      	bne.n	8003886 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2208      	movs	r2, #8
 800388c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003892:	f043 0208 	orr.w	r2, r3, #8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d07f      	beq.n	80039a2 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00c      	beq.n	80038c6 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ca:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d004      	beq.n	80038e4 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d031      	beq.n	8003948 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fc36 	bl	8004156 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d123      	bne.n	8003940 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003906:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003914:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <HAL_UART_IRQHandler+0x234>)
 8003916:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd ffd8 	bl	80018d2 <HAL_DMA_Abort_IT>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d016      	beq.n	8003956 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003932:	4610      	mov	r0, r2
 8003934:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003936:	e00e      	b.n	8003956 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f845 	bl	80039c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393e:	e00a      	b.n	8003956 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f841 	bl	80039c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003946:	e006      	b.n	8003956 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f83d 	bl	80039c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003954:	e025      	b.n	80039a2 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003956:	bf00      	nop
    return;
 8003958:	e023      	b.n	80039a2 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003972:	2b00      	cmp	r3, #0
 8003974:	d017      	beq.n	80039a6 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
    }
    return;
 800397e:	e012      	b.n	80039a6 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00e      	beq.n	80039a8 <HAL_UART_IRQHandler+0x22c>
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fc14 	bl	80041c2 <UART_EndTransmit_IT>
    return;
 800399a:	bf00      	nop
 800399c:	e004      	b.n	80039a8 <HAL_UART_IRQHandler+0x22c>
      return;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <HAL_UART_IRQHandler+0x22c>
    return;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <HAL_UART_IRQHandler+0x22c>
    return;
 80039a6:	bf00      	nop
  }

}
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	08004197 	.word	0x08004197

080039b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4bb1      	ldr	r3, [pc, #708]	; (8003cd0 <UART_SetConfig+0x2f4>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	6939      	ldr	r1, [r7, #16]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a9f      	ldr	r2, [pc, #636]	; (8003cd4 <UART_SetConfig+0x2f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d121      	bne.n	8003aa0 <UART_SetConfig+0xc4>
 8003a5c:	4b9e      	ldr	r3, [pc, #632]	; (8003cd8 <UART_SetConfig+0x2fc>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d816      	bhi.n	8003a98 <UART_SetConfig+0xbc>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <UART_SetConfig+0x94>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a8d 	.word	0x08003a8d
 8003a78:	08003a87 	.word	0x08003a87
 8003a7c:	08003a93 	.word	0x08003a93
 8003a80:	2301      	movs	r3, #1
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e151      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e14e      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e14b      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003a92:	2308      	movs	r3, #8
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e148      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	bf00      	nop
 8003a9e:	e144      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a8d      	ldr	r2, [pc, #564]	; (8003cdc <UART_SetConfig+0x300>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d134      	bne.n	8003b14 <UART_SetConfig+0x138>
 8003aaa:	4b8b      	ldr	r3, [pc, #556]	; (8003cd8 <UART_SetConfig+0x2fc>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d829      	bhi.n	8003b0c <UART_SetConfig+0x130>
 8003ab8:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <UART_SetConfig+0xe4>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003af5 	.word	0x08003af5
 8003ac4:	08003b0d 	.word	0x08003b0d
 8003ac8:	08003b0d 	.word	0x08003b0d
 8003acc:	08003b0d 	.word	0x08003b0d
 8003ad0:	08003b01 	.word	0x08003b01
 8003ad4:	08003b0d 	.word	0x08003b0d
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003b0d 	.word	0x08003b0d
 8003ae0:	08003afb 	.word	0x08003afb
 8003ae4:	08003b0d 	.word	0x08003b0d
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b0d 	.word	0x08003b0d
 8003af0:	08003b07 	.word	0x08003b07
 8003af4:	2300      	movs	r3, #0
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e117      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003afa:	2302      	movs	r3, #2
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e114      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b00:	2304      	movs	r3, #4
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e111      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b06:	2308      	movs	r3, #8
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e10e      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	bf00      	nop
 8003b12:	e10a      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a71      	ldr	r2, [pc, #452]	; (8003ce0 <UART_SetConfig+0x304>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d120      	bne.n	8003b60 <UART_SetConfig+0x184>
 8003b1e:	4b6e      	ldr	r3, [pc, #440]	; (8003cd8 <UART_SetConfig+0x2fc>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d00f      	beq.n	8003b4c <UART_SetConfig+0x170>
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d802      	bhi.n	8003b36 <UART_SetConfig+0x15a>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <UART_SetConfig+0x164>
 8003b34:	e010      	b.n	8003b58 <UART_SetConfig+0x17c>
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d005      	beq.n	8003b46 <UART_SetConfig+0x16a>
 8003b3a:	2b30      	cmp	r3, #48	; 0x30
 8003b3c:	d009      	beq.n	8003b52 <UART_SetConfig+0x176>
 8003b3e:	e00b      	b.n	8003b58 <UART_SetConfig+0x17c>
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e0f1      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b46:	2302      	movs	r3, #2
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e0ee      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e0eb      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b52:	2308      	movs	r3, #8
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e0e8      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	bf00      	nop
 8003b5e:	e0e4      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5f      	ldr	r2, [pc, #380]	; (8003ce4 <UART_SetConfig+0x308>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d120      	bne.n	8003bac <UART_SetConfig+0x1d0>
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <UART_SetConfig+0x2fc>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d00f      	beq.n	8003b98 <UART_SetConfig+0x1bc>
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d802      	bhi.n	8003b82 <UART_SetConfig+0x1a6>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <UART_SetConfig+0x1b0>
 8003b80:	e010      	b.n	8003ba4 <UART_SetConfig+0x1c8>
 8003b82:	2b80      	cmp	r3, #128	; 0x80
 8003b84:	d005      	beq.n	8003b92 <UART_SetConfig+0x1b6>
 8003b86:	2bc0      	cmp	r3, #192	; 0xc0
 8003b88:	d009      	beq.n	8003b9e <UART_SetConfig+0x1c2>
 8003b8a:	e00b      	b.n	8003ba4 <UART_SetConfig+0x1c8>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e0cb      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e0c8      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e0c5      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e0c2      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	bf00      	nop
 8003baa:	e0be      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4d      	ldr	r2, [pc, #308]	; (8003ce8 <UART_SetConfig+0x30c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d124      	bne.n	8003c00 <UART_SetConfig+0x224>
 8003bb6:	4b48      	ldr	r3, [pc, #288]	; (8003cd8 <UART_SetConfig+0x2fc>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc4:	d012      	beq.n	8003bec <UART_SetConfig+0x210>
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bca:	d802      	bhi.n	8003bd2 <UART_SetConfig+0x1f6>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <UART_SetConfig+0x204>
 8003bd0:	e012      	b.n	8003bf8 <UART_SetConfig+0x21c>
 8003bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd6:	d006      	beq.n	8003be6 <UART_SetConfig+0x20a>
 8003bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bdc:	d009      	beq.n	8003bf2 <UART_SetConfig+0x216>
 8003bde:	e00b      	b.n	8003bf8 <UART_SetConfig+0x21c>
 8003be0:	2300      	movs	r3, #0
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e0a1      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003be6:	2302      	movs	r3, #2
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e09e      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003bec:	2304      	movs	r3, #4
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e09b      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e098      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	bf00      	nop
 8003bfe:	e094      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a39      	ldr	r2, [pc, #228]	; (8003cec <UART_SetConfig+0x310>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d124      	bne.n	8003c54 <UART_SetConfig+0x278>
 8003c0a:	4b33      	ldr	r3, [pc, #204]	; (8003cd8 <UART_SetConfig+0x2fc>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c18:	d012      	beq.n	8003c40 <UART_SetConfig+0x264>
 8003c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1e:	d802      	bhi.n	8003c26 <UART_SetConfig+0x24a>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <UART_SetConfig+0x258>
 8003c24:	e012      	b.n	8003c4c <UART_SetConfig+0x270>
 8003c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2a:	d006      	beq.n	8003c3a <UART_SetConfig+0x25e>
 8003c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c30:	d009      	beq.n	8003c46 <UART_SetConfig+0x26a>
 8003c32:	e00b      	b.n	8003c4c <UART_SetConfig+0x270>
 8003c34:	2301      	movs	r3, #1
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e077      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e074      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003c40:	2304      	movs	r3, #4
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e071      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003c46:	2308      	movs	r3, #8
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e06e      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	bf00      	nop
 8003c52:	e06a      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <UART_SetConfig+0x314>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d124      	bne.n	8003ca8 <UART_SetConfig+0x2cc>
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <UART_SetConfig+0x2fc>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d012      	beq.n	8003c94 <UART_SetConfig+0x2b8>
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c72:	d802      	bhi.n	8003c7a <UART_SetConfig+0x29e>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d007      	beq.n	8003c88 <UART_SetConfig+0x2ac>
 8003c78:	e012      	b.n	8003ca0 <UART_SetConfig+0x2c4>
 8003c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7e:	d006      	beq.n	8003c8e <UART_SetConfig+0x2b2>
 8003c80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c84:	d009      	beq.n	8003c9a <UART_SetConfig+0x2be>
 8003c86:	e00b      	b.n	8003ca0 <UART_SetConfig+0x2c4>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e04d      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e04a      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003c94:	2304      	movs	r3, #4
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e047      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e044      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	bf00      	nop
 8003ca6:	e040      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <UART_SetConfig+0x318>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d139      	bne.n	8003d26 <UART_SetConfig+0x34a>
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <UART_SetConfig+0x2fc>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc0:	d027      	beq.n	8003d12 <UART_SetConfig+0x336>
 8003cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc6:	d817      	bhi.n	8003cf8 <UART_SetConfig+0x31c>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01c      	beq.n	8003d06 <UART_SetConfig+0x32a>
 8003ccc:	e027      	b.n	8003d1e <UART_SetConfig+0x342>
 8003cce:	bf00      	nop
 8003cd0:	efff69f3 	.word	0xefff69f3
 8003cd4:	40011000 	.word	0x40011000
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40004400 	.word	0x40004400
 8003ce0:	40004800 	.word	0x40004800
 8003ce4:	40004c00 	.word	0x40004c00
 8003ce8:	40005000 	.word	0x40005000
 8003cec:	40011400 	.word	0x40011400
 8003cf0:	40007800 	.word	0x40007800
 8003cf4:	40007c00 	.word	0x40007c00
 8003cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfc:	d006      	beq.n	8003d0c <UART_SetConfig+0x330>
 8003cfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d02:	d009      	beq.n	8003d18 <UART_SetConfig+0x33c>
 8003d04:	e00b      	b.n	8003d1e <UART_SetConfig+0x342>
 8003d06:	2300      	movs	r3, #0
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e00e      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e00b      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003d12:	2304      	movs	r3, #4
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e008      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003d18:	2308      	movs	r3, #8
 8003d1a:	77fb      	strb	r3, [r7, #31]
 8003d1c:	e005      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003d1e:	2310      	movs	r3, #16
 8003d20:	77fb      	strb	r3, [r7, #31]
 8003d22:	bf00      	nop
 8003d24:	e001      	b.n	8003d2a <UART_SetConfig+0x34e>
 8003d26:	2310      	movs	r3, #16
 8003d28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d32:	d17c      	bne.n	8003e2e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003d34:	7ffb      	ldrb	r3, [r7, #31]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d859      	bhi.n	8003dee <UART_SetConfig+0x412>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <UART_SetConfig+0x364>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003d83 	.word	0x08003d83
 8003d48:	08003da1 	.word	0x08003da1
 8003d4c:	08003def 	.word	0x08003def
 8003d50:	08003db9 	.word	0x08003db9
 8003d54:	08003def 	.word	0x08003def
 8003d58:	08003def 	.word	0x08003def
 8003d5c:	08003def 	.word	0x08003def
 8003d60:	08003dd7 	.word	0x08003dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d64:	f7fe fe6e 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	005a      	lsls	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	441a      	add	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	61bb      	str	r3, [r7, #24]
        break;
 8003d80:	e038      	b.n	8003df4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d82:	f7fe fe73 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8003d86:	4603      	mov	r3, r0
 8003d88:	005a      	lsls	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	441a      	add	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	61bb      	str	r3, [r7, #24]
        break;
 8003d9e:	e029      	b.n	8003df4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	085a      	lsrs	r2, r3, #1
 8003da6:	4b5d      	ldr	r3, [pc, #372]	; (8003f1c <UART_SetConfig+0x540>)
 8003da8:	4413      	add	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6852      	ldr	r2, [r2, #4]
 8003dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	61bb      	str	r3, [r7, #24]
        break;
 8003db6:	e01d      	b.n	8003df4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003db8:	f7fe fd86 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	005a      	lsls	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	441a      	add	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	61bb      	str	r3, [r7, #24]
        break;
 8003dd4:	e00e      	b.n	8003df4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	61bb      	str	r3, [r7, #24]
        break;
 8003dec:	e002      	b.n	8003df4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
        break;
 8003df2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b0f      	cmp	r3, #15
 8003df8:	d916      	bls.n	8003e28 <UART_SetConfig+0x44c>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d212      	bcs.n	8003e28 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f023 030f 	bic.w	r3, r3, #15
 8003e0a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	89fb      	ldrh	r3, [r7, #14]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	89fa      	ldrh	r2, [r7, #14]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	e06e      	b.n	8003f06 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
 8003e2c:	e06b      	b.n	8003f06 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003e2e:	7ffb      	ldrb	r3, [r7, #31]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d857      	bhi.n	8003ee4 <UART_SetConfig+0x508>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x460>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e7d 	.word	0x08003e7d
 8003e44:	08003e99 	.word	0x08003e99
 8003e48:	08003ee5 	.word	0x08003ee5
 8003e4c:	08003eb1 	.word	0x08003eb1
 8003e50:	08003ee5 	.word	0x08003ee5
 8003e54:	08003ee5 	.word	0x08003ee5
 8003e58:	08003ee5 	.word	0x08003ee5
 8003e5c:	08003ecd 	.word	0x08003ecd
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e60:	f7fe fdf0 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	441a      	add	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	61bb      	str	r3, [r7, #24]
        break;
 8003e7a:	e036      	b.n	8003eea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e7c:	f7fe fdf6 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	441a      	add	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	61bb      	str	r3, [r7, #24]
        break;
 8003e96:	e028      	b.n	8003eea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	085a      	lsrs	r2, r3, #1
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <UART_SetConfig+0x544>)
 8003ea0:	4413      	add	r3, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6852      	ldr	r2, [r2, #4]
 8003ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	61bb      	str	r3, [r7, #24]
        break;
 8003eae:	e01c      	b.n	8003eea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003eb0:	f7fe fd0a 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	61bb      	str	r3, [r7, #24]
        break;
 8003eca:	e00e      	b.n	8003eea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	61bb      	str	r3, [r7, #24]
        break;
 8003ee2:	e002      	b.n	8003eea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	75fb      	strb	r3, [r7, #23]
        break;
 8003ee8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b0f      	cmp	r3, #15
 8003eee:	d908      	bls.n	8003f02 <UART_SetConfig+0x526>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef6:	d204      	bcs.n	8003f02 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	e001      	b.n	8003f06 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	01e84800 	.word	0x01e84800
 8003f20:	00f42400 	.word	0x00f42400

08003f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01a      	beq.n	800403a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004022:	d10a      	bne.n	800403a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
  }
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af02      	add	r7, sp, #8
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004076:	f7fd faed 	bl	8001654 <HAL_GetTick>
 800407a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b08      	cmp	r3, #8
 8004088:	d10e      	bne.n	80040a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800408a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f814 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e00a      	b.n	80040be <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d6:	e02a      	b.n	800412e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d026      	beq.n	800412e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e0:	f7fd fab8 	bl	8001654 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d302      	bcc.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11b      	bne.n	800412e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004104:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e00f      	b.n	800414e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4013      	ands	r3, r2
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	bf0c      	ite	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	2300      	movne	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	429a      	cmp	r2, r3
 800414a:	d0c5      	beq.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800416c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	661a      	str	r2, [r3, #96]	; 0x60
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7ff fc07 	bl	80039c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff fbe4 	bl	80039b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004202:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004208:	2b22      	cmp	r3, #34	; 0x22
 800420a:	d13a      	bne.n	8004282 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004214:	89bb      	ldrh	r3, [r7, #12]
 8004216:	b2d9      	uxtb	r1, r3
 8004218:	89fb      	ldrh	r3, [r7, #14]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	400a      	ands	r2, r1
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d121      	bne.n	8004292 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800425c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc fd1c 	bl	8000cb8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004280:	e007      	b.n	8004292 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0208 	orr.w	r2, r2, #8
 8004290:	619a      	str	r2, [r3, #24]
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042a8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ae:	2b22      	cmp	r3, #34	; 0x22
 80042b0:	d13a      	bne.n	8004328 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80042c0:	89ba      	ldrh	r2, [r7, #12]
 80042c2:	89fb      	ldrh	r3, [r7, #14]
 80042c4:	4013      	ands	r3, r2
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	1c9a      	adds	r2, r3, #2
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d121      	bne.n	8004338 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004302:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fc fcc9 	bl	8000cb8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004326:	e007      	b.n	8004338 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0208 	orr.w	r2, r2, #8
 8004336:	619a      	str	r2, [r3, #24]
}
 8004338:	bf00      	nop
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <__errno>:
 8004340:	4b01      	ldr	r3, [pc, #4]	; (8004348 <__errno+0x8>)
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000010 	.word	0x20000010

0800434c <__libc_init_array>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	4e0d      	ldr	r6, [pc, #52]	; (8004384 <__libc_init_array+0x38>)
 8004350:	4c0d      	ldr	r4, [pc, #52]	; (8004388 <__libc_init_array+0x3c>)
 8004352:	1ba4      	subs	r4, r4, r6
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	2500      	movs	r5, #0
 8004358:	42a5      	cmp	r5, r4
 800435a:	d109      	bne.n	8004370 <__libc_init_array+0x24>
 800435c:	4e0b      	ldr	r6, [pc, #44]	; (800438c <__libc_init_array+0x40>)
 800435e:	4c0c      	ldr	r4, [pc, #48]	; (8004390 <__libc_init_array+0x44>)
 8004360:	f001 fce4 	bl	8005d2c <_init>
 8004364:	1ba4      	subs	r4, r4, r6
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	2500      	movs	r5, #0
 800436a:	42a5      	cmp	r5, r4
 800436c:	d105      	bne.n	800437a <__libc_init_array+0x2e>
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004374:	4798      	blx	r3
 8004376:	3501      	adds	r5, #1
 8004378:	e7ee      	b.n	8004358 <__libc_init_array+0xc>
 800437a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800437e:	4798      	blx	r3
 8004380:	3501      	adds	r5, #1
 8004382:	e7f2      	b.n	800436a <__libc_init_array+0x1e>
 8004384:	080061a8 	.word	0x080061a8
 8004388:	080061a8 	.word	0x080061a8
 800438c:	080061a8 	.word	0x080061a8
 8004390:	080061ac 	.word	0x080061ac

08004394 <memset>:
 8004394:	4402      	add	r2, r0
 8004396:	4603      	mov	r3, r0
 8004398:	4293      	cmp	r3, r2
 800439a:	d100      	bne.n	800439e <memset+0xa>
 800439c:	4770      	bx	lr
 800439e:	f803 1b01 	strb.w	r1, [r3], #1
 80043a2:	e7f9      	b.n	8004398 <memset+0x4>

080043a4 <__cvt>:
 80043a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043a6:	ed2d 8b02 	vpush	{d8}
 80043aa:	eeb0 8b40 	vmov.f64	d8, d0
 80043ae:	b085      	sub	sp, #20
 80043b0:	4617      	mov	r7, r2
 80043b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80043b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80043b6:	ee18 2a90 	vmov	r2, s17
 80043ba:	f025 0520 	bic.w	r5, r5, #32
 80043be:	2a00      	cmp	r2, #0
 80043c0:	bfb6      	itet	lt
 80043c2:	222d      	movlt	r2, #45	; 0x2d
 80043c4:	2200      	movge	r2, #0
 80043c6:	eeb1 8b40 	vneglt.f64	d8, d0
 80043ca:	2d46      	cmp	r5, #70	; 0x46
 80043cc:	460c      	mov	r4, r1
 80043ce:	701a      	strb	r2, [r3, #0]
 80043d0:	d004      	beq.n	80043dc <__cvt+0x38>
 80043d2:	2d45      	cmp	r5, #69	; 0x45
 80043d4:	d100      	bne.n	80043d8 <__cvt+0x34>
 80043d6:	3401      	adds	r4, #1
 80043d8:	2102      	movs	r1, #2
 80043da:	e000      	b.n	80043de <__cvt+0x3a>
 80043dc:	2103      	movs	r1, #3
 80043de:	ab03      	add	r3, sp, #12
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	ab02      	add	r3, sp, #8
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	4622      	mov	r2, r4
 80043e8:	4633      	mov	r3, r6
 80043ea:	eeb0 0b48 	vmov.f64	d0, d8
 80043ee:	f000 fbbb 	bl	8004b68 <_dtoa_r>
 80043f2:	2d47      	cmp	r5, #71	; 0x47
 80043f4:	d101      	bne.n	80043fa <__cvt+0x56>
 80043f6:	07fb      	lsls	r3, r7, #31
 80043f8:	d51e      	bpl.n	8004438 <__cvt+0x94>
 80043fa:	2d46      	cmp	r5, #70	; 0x46
 80043fc:	eb00 0304 	add.w	r3, r0, r4
 8004400:	d10c      	bne.n	800441c <__cvt+0x78>
 8004402:	7802      	ldrb	r2, [r0, #0]
 8004404:	2a30      	cmp	r2, #48	; 0x30
 8004406:	d107      	bne.n	8004418 <__cvt+0x74>
 8004408:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800440c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004410:	bf1c      	itt	ne
 8004412:	f1c4 0401 	rsbne	r4, r4, #1
 8004416:	6034      	strne	r4, [r6, #0]
 8004418:	6832      	ldr	r2, [r6, #0]
 800441a:	4413      	add	r3, r2
 800441c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	d007      	beq.n	8004436 <__cvt+0x92>
 8004426:	2130      	movs	r1, #48	; 0x30
 8004428:	9a03      	ldr	r2, [sp, #12]
 800442a:	429a      	cmp	r2, r3
 800442c:	d204      	bcs.n	8004438 <__cvt+0x94>
 800442e:	1c54      	adds	r4, r2, #1
 8004430:	9403      	str	r4, [sp, #12]
 8004432:	7011      	strb	r1, [r2, #0]
 8004434:	e7f8      	b.n	8004428 <__cvt+0x84>
 8004436:	9303      	str	r3, [sp, #12]
 8004438:	9b03      	ldr	r3, [sp, #12]
 800443a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800443c:	1a1b      	subs	r3, r3, r0
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	b005      	add	sp, #20
 8004442:	ecbd 8b02 	vpop	{d8}
 8004446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004448 <__exponent>:
 8004448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800444a:	2900      	cmp	r1, #0
 800444c:	4604      	mov	r4, r0
 800444e:	bfba      	itte	lt
 8004450:	4249      	neglt	r1, r1
 8004452:	232d      	movlt	r3, #45	; 0x2d
 8004454:	232b      	movge	r3, #43	; 0x2b
 8004456:	2909      	cmp	r1, #9
 8004458:	f804 2b02 	strb.w	r2, [r4], #2
 800445c:	7043      	strb	r3, [r0, #1]
 800445e:	dd20      	ble.n	80044a2 <__exponent+0x5a>
 8004460:	f10d 0307 	add.w	r3, sp, #7
 8004464:	461f      	mov	r7, r3
 8004466:	260a      	movs	r6, #10
 8004468:	fb91 f5f6 	sdiv	r5, r1, r6
 800446c:	fb06 1115 	mls	r1, r6, r5, r1
 8004470:	3130      	adds	r1, #48	; 0x30
 8004472:	2d09      	cmp	r5, #9
 8004474:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004478:	f103 32ff 	add.w	r2, r3, #4294967295
 800447c:	4629      	mov	r1, r5
 800447e:	dc09      	bgt.n	8004494 <__exponent+0x4c>
 8004480:	3130      	adds	r1, #48	; 0x30
 8004482:	3b02      	subs	r3, #2
 8004484:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004488:	42bb      	cmp	r3, r7
 800448a:	4622      	mov	r2, r4
 800448c:	d304      	bcc.n	8004498 <__exponent+0x50>
 800448e:	1a10      	subs	r0, r2, r0
 8004490:	b003      	add	sp, #12
 8004492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004494:	4613      	mov	r3, r2
 8004496:	e7e7      	b.n	8004468 <__exponent+0x20>
 8004498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800449c:	f804 2b01 	strb.w	r2, [r4], #1
 80044a0:	e7f2      	b.n	8004488 <__exponent+0x40>
 80044a2:	2330      	movs	r3, #48	; 0x30
 80044a4:	4419      	add	r1, r3
 80044a6:	7083      	strb	r3, [r0, #2]
 80044a8:	1d02      	adds	r2, r0, #4
 80044aa:	70c1      	strb	r1, [r0, #3]
 80044ac:	e7ef      	b.n	800448e <__exponent+0x46>
	...

080044b0 <_printf_float>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	b08d      	sub	sp, #52	; 0x34
 80044b6:	460c      	mov	r4, r1
 80044b8:	4616      	mov	r6, r2
 80044ba:	461f      	mov	r7, r3
 80044bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80044c0:	4605      	mov	r5, r0
 80044c2:	f001 f89d 	bl	8005600 <_localeconv_r>
 80044c6:	f8d0 b000 	ldr.w	fp, [r0]
 80044ca:	4658      	mov	r0, fp
 80044cc:	f7fb feb4 	bl	8000238 <strlen>
 80044d0:	2300      	movs	r3, #0
 80044d2:	930a      	str	r3, [sp, #40]	; 0x28
 80044d4:	f8d8 3000 	ldr.w	r3, [r8]
 80044d8:	9005      	str	r0, [sp, #20]
 80044da:	3307      	adds	r3, #7
 80044dc:	f023 0307 	bic.w	r3, r3, #7
 80044e0:	f103 0108 	add.w	r1, r3, #8
 80044e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044e8:	6822      	ldr	r2, [r4, #0]
 80044ea:	f8c8 1000 	str.w	r1, [r8]
 80044ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80044f6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8004780 <_printf_float+0x2d0>
 80044fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80044fe:	eeb0 6bc0 	vabs.f64	d6, d0
 8004502:	eeb4 6b47 	vcmp.f64	d6, d7
 8004506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450a:	dd24      	ble.n	8004556 <_printf_float+0xa6>
 800450c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004514:	d502      	bpl.n	800451c <_printf_float+0x6c>
 8004516:	232d      	movs	r3, #45	; 0x2d
 8004518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800451c:	499a      	ldr	r1, [pc, #616]	; (8004788 <_printf_float+0x2d8>)
 800451e:	4b9b      	ldr	r3, [pc, #620]	; (800478c <_printf_float+0x2dc>)
 8004520:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004524:	bf8c      	ite	hi
 8004526:	4688      	movhi	r8, r1
 8004528:	4698      	movls	r8, r3
 800452a:	f022 0204 	bic.w	r2, r2, #4
 800452e:	2303      	movs	r3, #3
 8004530:	6123      	str	r3, [r4, #16]
 8004532:	6022      	str	r2, [r4, #0]
 8004534:	f04f 0a00 	mov.w	sl, #0
 8004538:	9700      	str	r7, [sp, #0]
 800453a:	4633      	mov	r3, r6
 800453c:	aa0b      	add	r2, sp, #44	; 0x2c
 800453e:	4621      	mov	r1, r4
 8004540:	4628      	mov	r0, r5
 8004542:	f000 f9e1 	bl	8004908 <_printf_common>
 8004546:	3001      	adds	r0, #1
 8004548:	f040 8089 	bne.w	800465e <_printf_float+0x1ae>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	b00d      	add	sp, #52	; 0x34
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	eeb4 0b40 	vcmp.f64	d0, d0
 800455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455e:	d702      	bvc.n	8004566 <_printf_float+0xb6>
 8004560:	498b      	ldr	r1, [pc, #556]	; (8004790 <_printf_float+0x2e0>)
 8004562:	4b8c      	ldr	r3, [pc, #560]	; (8004794 <_printf_float+0x2e4>)
 8004564:	e7dc      	b.n	8004520 <_printf_float+0x70>
 8004566:	6861      	ldr	r1, [r4, #4]
 8004568:	1c4b      	adds	r3, r1, #1
 800456a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800456e:	ab0a      	add	r3, sp, #40	; 0x28
 8004570:	a809      	add	r0, sp, #36	; 0x24
 8004572:	d13b      	bne.n	80045ec <_printf_float+0x13c>
 8004574:	2106      	movs	r1, #6
 8004576:	6061      	str	r1, [r4, #4]
 8004578:	f04f 0c00 	mov.w	ip, #0
 800457c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8004580:	e9cd 0900 	strd	r0, r9, [sp]
 8004584:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004588:	6022      	str	r2, [r4, #0]
 800458a:	6861      	ldr	r1, [r4, #4]
 800458c:	4628      	mov	r0, r5
 800458e:	f7ff ff09 	bl	80043a4 <__cvt>
 8004592:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8004596:	2b47      	cmp	r3, #71	; 0x47
 8004598:	4680      	mov	r8, r0
 800459a:	d109      	bne.n	80045b0 <_printf_float+0x100>
 800459c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800459e:	1cd8      	adds	r0, r3, #3
 80045a0:	db02      	blt.n	80045a8 <_printf_float+0xf8>
 80045a2:	6862      	ldr	r2, [r4, #4]
 80045a4:	4293      	cmp	r3, r2
 80045a6:	dd47      	ble.n	8004638 <_printf_float+0x188>
 80045a8:	f1a9 0902 	sub.w	r9, r9, #2
 80045ac:	fa5f f989 	uxtb.w	r9, r9
 80045b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045b6:	d824      	bhi.n	8004602 <_printf_float+0x152>
 80045b8:	3901      	subs	r1, #1
 80045ba:	464a      	mov	r2, r9
 80045bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045c0:	9109      	str	r1, [sp, #36]	; 0x24
 80045c2:	f7ff ff41 	bl	8004448 <__exponent>
 80045c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045c8:	1813      	adds	r3, r2, r0
 80045ca:	2a01      	cmp	r2, #1
 80045cc:	4682      	mov	sl, r0
 80045ce:	6123      	str	r3, [r4, #16]
 80045d0:	dc02      	bgt.n	80045d8 <_printf_float+0x128>
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	07d1      	lsls	r1, r2, #31
 80045d6:	d501      	bpl.n	80045dc <_printf_float+0x12c>
 80045d8:	3301      	adds	r3, #1
 80045da:	6123      	str	r3, [r4, #16]
 80045dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0a9      	beq.n	8004538 <_printf_float+0x88>
 80045e4:	232d      	movs	r3, #45	; 0x2d
 80045e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ea:	e7a5      	b.n	8004538 <_printf_float+0x88>
 80045ec:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80045f0:	f000 8178 	beq.w	80048e4 <_printf_float+0x434>
 80045f4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80045f8:	d1be      	bne.n	8004578 <_printf_float+0xc8>
 80045fa:	2900      	cmp	r1, #0
 80045fc:	d1bc      	bne.n	8004578 <_printf_float+0xc8>
 80045fe:	2101      	movs	r1, #1
 8004600:	e7b9      	b.n	8004576 <_printf_float+0xc6>
 8004602:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004606:	d119      	bne.n	800463c <_printf_float+0x18c>
 8004608:	2900      	cmp	r1, #0
 800460a:	6863      	ldr	r3, [r4, #4]
 800460c:	dd0c      	ble.n	8004628 <_printf_float+0x178>
 800460e:	6121      	str	r1, [r4, #16]
 8004610:	b913      	cbnz	r3, 8004618 <_printf_float+0x168>
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	07d2      	lsls	r2, r2, #31
 8004616:	d502      	bpl.n	800461e <_printf_float+0x16e>
 8004618:	3301      	adds	r3, #1
 800461a:	440b      	add	r3, r1
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004620:	65a3      	str	r3, [r4, #88]	; 0x58
 8004622:	f04f 0a00 	mov.w	sl, #0
 8004626:	e7d9      	b.n	80045dc <_printf_float+0x12c>
 8004628:	b913      	cbnz	r3, 8004630 <_printf_float+0x180>
 800462a:	6822      	ldr	r2, [r4, #0]
 800462c:	07d0      	lsls	r0, r2, #31
 800462e:	d501      	bpl.n	8004634 <_printf_float+0x184>
 8004630:	3302      	adds	r3, #2
 8004632:	e7f3      	b.n	800461c <_printf_float+0x16c>
 8004634:	2301      	movs	r3, #1
 8004636:	e7f1      	b.n	800461c <_printf_float+0x16c>
 8004638:	f04f 0967 	mov.w	r9, #103	; 0x67
 800463c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004640:	4293      	cmp	r3, r2
 8004642:	db05      	blt.n	8004650 <_printf_float+0x1a0>
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	6123      	str	r3, [r4, #16]
 8004648:	07d1      	lsls	r1, r2, #31
 800464a:	d5e8      	bpl.n	800461e <_printf_float+0x16e>
 800464c:	3301      	adds	r3, #1
 800464e:	e7e5      	b.n	800461c <_printf_float+0x16c>
 8004650:	2b00      	cmp	r3, #0
 8004652:	bfd4      	ite	le
 8004654:	f1c3 0302 	rsble	r3, r3, #2
 8004658:	2301      	movgt	r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	e7de      	b.n	800461c <_printf_float+0x16c>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	055a      	lsls	r2, r3, #21
 8004662:	d407      	bmi.n	8004674 <_printf_float+0x1c4>
 8004664:	6923      	ldr	r3, [r4, #16]
 8004666:	4642      	mov	r2, r8
 8004668:	4631      	mov	r1, r6
 800466a:	4628      	mov	r0, r5
 800466c:	47b8      	blx	r7
 800466e:	3001      	adds	r0, #1
 8004670:	d12a      	bne.n	80046c8 <_printf_float+0x218>
 8004672:	e76b      	b.n	800454c <_printf_float+0x9c>
 8004674:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004678:	f240 80de 	bls.w	8004838 <_printf_float+0x388>
 800467c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004680:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004688:	d133      	bne.n	80046f2 <_printf_float+0x242>
 800468a:	2301      	movs	r3, #1
 800468c:	4a42      	ldr	r2, [pc, #264]	; (8004798 <_printf_float+0x2e8>)
 800468e:	4631      	mov	r1, r6
 8004690:	4628      	mov	r0, r5
 8004692:	47b8      	blx	r7
 8004694:	3001      	adds	r0, #1
 8004696:	f43f af59 	beq.w	800454c <_printf_float+0x9c>
 800469a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800469e:	429a      	cmp	r2, r3
 80046a0:	db02      	blt.n	80046a8 <_printf_float+0x1f8>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	07d8      	lsls	r0, r3, #31
 80046a6:	d50f      	bpl.n	80046c8 <_printf_float+0x218>
 80046a8:	9b05      	ldr	r3, [sp, #20]
 80046aa:	465a      	mov	r2, fp
 80046ac:	4631      	mov	r1, r6
 80046ae:	4628      	mov	r0, r5
 80046b0:	47b8      	blx	r7
 80046b2:	3001      	adds	r0, #1
 80046b4:	f43f af4a 	beq.w	800454c <_printf_float+0x9c>
 80046b8:	f04f 0800 	mov.w	r8, #0
 80046bc:	f104 091a 	add.w	r9, r4, #26
 80046c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c2:	3b01      	subs	r3, #1
 80046c4:	4543      	cmp	r3, r8
 80046c6:	dc09      	bgt.n	80046dc <_printf_float+0x22c>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	079b      	lsls	r3, r3, #30
 80046cc:	f100 8105 	bmi.w	80048da <_printf_float+0x42a>
 80046d0:	68e0      	ldr	r0, [r4, #12]
 80046d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046d4:	4298      	cmp	r0, r3
 80046d6:	bfb8      	it	lt
 80046d8:	4618      	movlt	r0, r3
 80046da:	e739      	b.n	8004550 <_printf_float+0xa0>
 80046dc:	2301      	movs	r3, #1
 80046de:	464a      	mov	r2, r9
 80046e0:	4631      	mov	r1, r6
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	f43f af30 	beq.w	800454c <_printf_float+0x9c>
 80046ec:	f108 0801 	add.w	r8, r8, #1
 80046f0:	e7e6      	b.n	80046c0 <_printf_float+0x210>
 80046f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	dc2b      	bgt.n	8004750 <_printf_float+0x2a0>
 80046f8:	2301      	movs	r3, #1
 80046fa:	4a27      	ldr	r2, [pc, #156]	; (8004798 <_printf_float+0x2e8>)
 80046fc:	4631      	mov	r1, r6
 80046fe:	4628      	mov	r0, r5
 8004700:	47b8      	blx	r7
 8004702:	3001      	adds	r0, #1
 8004704:	f43f af22 	beq.w	800454c <_printf_float+0x9c>
 8004708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470a:	b923      	cbnz	r3, 8004716 <_printf_float+0x266>
 800470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800470e:	b913      	cbnz	r3, 8004716 <_printf_float+0x266>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	07d9      	lsls	r1, r3, #31
 8004714:	d5d8      	bpl.n	80046c8 <_printf_float+0x218>
 8004716:	9b05      	ldr	r3, [sp, #20]
 8004718:	465a      	mov	r2, fp
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	f43f af13 	beq.w	800454c <_printf_float+0x9c>
 8004726:	f04f 0900 	mov.w	r9, #0
 800472a:	f104 0a1a 	add.w	sl, r4, #26
 800472e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004730:	425b      	negs	r3, r3
 8004732:	454b      	cmp	r3, r9
 8004734:	dc01      	bgt.n	800473a <_printf_float+0x28a>
 8004736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004738:	e795      	b.n	8004666 <_printf_float+0x1b6>
 800473a:	2301      	movs	r3, #1
 800473c:	4652      	mov	r2, sl
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	f43f af01 	beq.w	800454c <_printf_float+0x9c>
 800474a:	f109 0901 	add.w	r9, r9, #1
 800474e:	e7ee      	b.n	800472e <_printf_float+0x27e>
 8004750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004754:	429a      	cmp	r2, r3
 8004756:	bfa8      	it	ge
 8004758:	461a      	movge	r2, r3
 800475a:	2a00      	cmp	r2, #0
 800475c:	4691      	mov	r9, r2
 800475e:	dd07      	ble.n	8004770 <_printf_float+0x2c0>
 8004760:	4613      	mov	r3, r2
 8004762:	4631      	mov	r1, r6
 8004764:	4642      	mov	r2, r8
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f aeee 	beq.w	800454c <_printf_float+0x9c>
 8004770:	f104 031a 	add.w	r3, r4, #26
 8004774:	f04f 0a00 	mov.w	sl, #0
 8004778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800477c:	9307      	str	r3, [sp, #28]
 800477e:	e017      	b.n	80047b0 <_printf_float+0x300>
 8004780:	ffffffff 	.word	0xffffffff
 8004784:	7fefffff 	.word	0x7fefffff
 8004788:	08005f78 	.word	0x08005f78
 800478c:	08005f74 	.word	0x08005f74
 8004790:	08005f80 	.word	0x08005f80
 8004794:	08005f7c 	.word	0x08005f7c
 8004798:	08005f84 	.word	0x08005f84
 800479c:	2301      	movs	r3, #1
 800479e:	9a07      	ldr	r2, [sp, #28]
 80047a0:	4631      	mov	r1, r6
 80047a2:	4628      	mov	r0, r5
 80047a4:	47b8      	blx	r7
 80047a6:	3001      	adds	r0, #1
 80047a8:	f43f aed0 	beq.w	800454c <_printf_float+0x9c>
 80047ac:	f10a 0a01 	add.w	sl, sl, #1
 80047b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047b2:	9306      	str	r3, [sp, #24]
 80047b4:	eba3 0309 	sub.w	r3, r3, r9
 80047b8:	4553      	cmp	r3, sl
 80047ba:	dcef      	bgt.n	800479c <_printf_float+0x2ec>
 80047bc:	9b06      	ldr	r3, [sp, #24]
 80047be:	4498      	add	r8, r3
 80047c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047c4:	429a      	cmp	r2, r3
 80047c6:	db15      	blt.n	80047f4 <_printf_float+0x344>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	07da      	lsls	r2, r3, #31
 80047cc:	d412      	bmi.n	80047f4 <_printf_float+0x344>
 80047ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047d0:	9a06      	ldr	r2, [sp, #24]
 80047d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047d4:	1a9a      	subs	r2, r3, r2
 80047d6:	eba3 0a01 	sub.w	sl, r3, r1
 80047da:	4592      	cmp	sl, r2
 80047dc:	bfa8      	it	ge
 80047de:	4692      	movge	sl, r2
 80047e0:	f1ba 0f00 	cmp.w	sl, #0
 80047e4:	dc0e      	bgt.n	8004804 <_printf_float+0x354>
 80047e6:	f04f 0800 	mov.w	r8, #0
 80047ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80047ee:	f104 091a 	add.w	r9, r4, #26
 80047f2:	e019      	b.n	8004828 <_printf_float+0x378>
 80047f4:	9b05      	ldr	r3, [sp, #20]
 80047f6:	465a      	mov	r2, fp
 80047f8:	4631      	mov	r1, r6
 80047fa:	4628      	mov	r0, r5
 80047fc:	47b8      	blx	r7
 80047fe:	3001      	adds	r0, #1
 8004800:	d1e5      	bne.n	80047ce <_printf_float+0x31e>
 8004802:	e6a3      	b.n	800454c <_printf_float+0x9c>
 8004804:	4653      	mov	r3, sl
 8004806:	4642      	mov	r2, r8
 8004808:	4631      	mov	r1, r6
 800480a:	4628      	mov	r0, r5
 800480c:	47b8      	blx	r7
 800480e:	3001      	adds	r0, #1
 8004810:	d1e9      	bne.n	80047e6 <_printf_float+0x336>
 8004812:	e69b      	b.n	800454c <_printf_float+0x9c>
 8004814:	2301      	movs	r3, #1
 8004816:	464a      	mov	r2, r9
 8004818:	4631      	mov	r1, r6
 800481a:	4628      	mov	r0, r5
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	f43f ae94 	beq.w	800454c <_printf_float+0x9c>
 8004824:	f108 0801 	add.w	r8, r8, #1
 8004828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	eba3 030a 	sub.w	r3, r3, sl
 8004832:	4543      	cmp	r3, r8
 8004834:	dcee      	bgt.n	8004814 <_printf_float+0x364>
 8004836:	e747      	b.n	80046c8 <_printf_float+0x218>
 8004838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800483a:	2a01      	cmp	r2, #1
 800483c:	dc01      	bgt.n	8004842 <_printf_float+0x392>
 800483e:	07db      	lsls	r3, r3, #31
 8004840:	d539      	bpl.n	80048b6 <_printf_float+0x406>
 8004842:	2301      	movs	r3, #1
 8004844:	4642      	mov	r2, r8
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	f43f ae7d 	beq.w	800454c <_printf_float+0x9c>
 8004852:	9b05      	ldr	r3, [sp, #20]
 8004854:	465a      	mov	r2, fp
 8004856:	4631      	mov	r1, r6
 8004858:	4628      	mov	r0, r5
 800485a:	47b8      	blx	r7
 800485c:	3001      	adds	r0, #1
 800485e:	f108 0801 	add.w	r8, r8, #1
 8004862:	f43f ae73 	beq.w	800454c <_printf_float+0x9c>
 8004866:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800486a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800486c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004874:	f103 33ff 	add.w	r3, r3, #4294967295
 8004878:	d018      	beq.n	80048ac <_printf_float+0x3fc>
 800487a:	4642      	mov	r2, r8
 800487c:	4631      	mov	r1, r6
 800487e:	4628      	mov	r0, r5
 8004880:	47b8      	blx	r7
 8004882:	3001      	adds	r0, #1
 8004884:	d10e      	bne.n	80048a4 <_printf_float+0x3f4>
 8004886:	e661      	b.n	800454c <_printf_float+0x9c>
 8004888:	2301      	movs	r3, #1
 800488a:	464a      	mov	r2, r9
 800488c:	4631      	mov	r1, r6
 800488e:	4628      	mov	r0, r5
 8004890:	47b8      	blx	r7
 8004892:	3001      	adds	r0, #1
 8004894:	f43f ae5a 	beq.w	800454c <_printf_float+0x9c>
 8004898:	f108 0801 	add.w	r8, r8, #1
 800489c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	4543      	cmp	r3, r8
 80048a2:	dcf1      	bgt.n	8004888 <_printf_float+0x3d8>
 80048a4:	4653      	mov	r3, sl
 80048a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048aa:	e6dd      	b.n	8004668 <_printf_float+0x1b8>
 80048ac:	f04f 0800 	mov.w	r8, #0
 80048b0:	f104 091a 	add.w	r9, r4, #26
 80048b4:	e7f2      	b.n	800489c <_printf_float+0x3ec>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e7df      	b.n	800487a <_printf_float+0x3ca>
 80048ba:	2301      	movs	r3, #1
 80048bc:	464a      	mov	r2, r9
 80048be:	4631      	mov	r1, r6
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b8      	blx	r7
 80048c4:	3001      	adds	r0, #1
 80048c6:	f43f ae41 	beq.w	800454c <_printf_float+0x9c>
 80048ca:	f108 0801 	add.w	r8, r8, #1
 80048ce:	68e3      	ldr	r3, [r4, #12]
 80048d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	4543      	cmp	r3, r8
 80048d6:	dcf0      	bgt.n	80048ba <_printf_float+0x40a>
 80048d8:	e6fa      	b.n	80046d0 <_printf_float+0x220>
 80048da:	f04f 0800 	mov.w	r8, #0
 80048de:	f104 0919 	add.w	r9, r4, #25
 80048e2:	e7f4      	b.n	80048ce <_printf_float+0x41e>
 80048e4:	2900      	cmp	r1, #0
 80048e6:	f43f ae8a 	beq.w	80045fe <_printf_float+0x14e>
 80048ea:	f04f 0c00 	mov.w	ip, #0
 80048ee:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80048f2:	e9cd 0900 	strd	r0, r9, [sp]
 80048f6:	6022      	str	r2, [r4, #0]
 80048f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048fc:	4628      	mov	r0, r5
 80048fe:	f7ff fd51 	bl	80043a4 <__cvt>
 8004902:	4680      	mov	r8, r0
 8004904:	e64a      	b.n	800459c <_printf_float+0xec>
 8004906:	bf00      	nop

08004908 <_printf_common>:
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	4691      	mov	r9, r2
 800490e:	461f      	mov	r7, r3
 8004910:	688a      	ldr	r2, [r1, #8]
 8004912:	690b      	ldr	r3, [r1, #16]
 8004914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004918:	4293      	cmp	r3, r2
 800491a:	bfb8      	it	lt
 800491c:	4613      	movlt	r3, r2
 800491e:	f8c9 3000 	str.w	r3, [r9]
 8004922:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004926:	4606      	mov	r6, r0
 8004928:	460c      	mov	r4, r1
 800492a:	b112      	cbz	r2, 8004932 <_printf_common+0x2a>
 800492c:	3301      	adds	r3, #1
 800492e:	f8c9 3000 	str.w	r3, [r9]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	0699      	lsls	r1, r3, #26
 8004936:	bf42      	ittt	mi
 8004938:	f8d9 3000 	ldrmi.w	r3, [r9]
 800493c:	3302      	addmi	r3, #2
 800493e:	f8c9 3000 	strmi.w	r3, [r9]
 8004942:	6825      	ldr	r5, [r4, #0]
 8004944:	f015 0506 	ands.w	r5, r5, #6
 8004948:	d107      	bne.n	800495a <_printf_common+0x52>
 800494a:	f104 0a19 	add.w	sl, r4, #25
 800494e:	68e3      	ldr	r3, [r4, #12]
 8004950:	f8d9 2000 	ldr.w	r2, [r9]
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	42ab      	cmp	r3, r5
 8004958:	dc28      	bgt.n	80049ac <_printf_common+0xa4>
 800495a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800495e:	6822      	ldr	r2, [r4, #0]
 8004960:	3300      	adds	r3, #0
 8004962:	bf18      	it	ne
 8004964:	2301      	movne	r3, #1
 8004966:	0692      	lsls	r2, r2, #26
 8004968:	d42d      	bmi.n	80049c6 <_printf_common+0xbe>
 800496a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800496e:	4639      	mov	r1, r7
 8004970:	4630      	mov	r0, r6
 8004972:	47c0      	blx	r8
 8004974:	3001      	adds	r0, #1
 8004976:	d020      	beq.n	80049ba <_printf_common+0xb2>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	68e5      	ldr	r5, [r4, #12]
 800497c:	f8d9 2000 	ldr.w	r2, [r9]
 8004980:	f003 0306 	and.w	r3, r3, #6
 8004984:	2b04      	cmp	r3, #4
 8004986:	bf08      	it	eq
 8004988:	1aad      	subeq	r5, r5, r2
 800498a:	68a3      	ldr	r3, [r4, #8]
 800498c:	6922      	ldr	r2, [r4, #16]
 800498e:	bf0c      	ite	eq
 8004990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004994:	2500      	movne	r5, #0
 8004996:	4293      	cmp	r3, r2
 8004998:	bfc4      	itt	gt
 800499a:	1a9b      	subgt	r3, r3, r2
 800499c:	18ed      	addgt	r5, r5, r3
 800499e:	f04f 0900 	mov.w	r9, #0
 80049a2:	341a      	adds	r4, #26
 80049a4:	454d      	cmp	r5, r9
 80049a6:	d11a      	bne.n	80049de <_printf_common+0xd6>
 80049a8:	2000      	movs	r0, #0
 80049aa:	e008      	b.n	80049be <_printf_common+0xb6>
 80049ac:	2301      	movs	r3, #1
 80049ae:	4652      	mov	r2, sl
 80049b0:	4639      	mov	r1, r7
 80049b2:	4630      	mov	r0, r6
 80049b4:	47c0      	blx	r8
 80049b6:	3001      	adds	r0, #1
 80049b8:	d103      	bne.n	80049c2 <_printf_common+0xba>
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c2:	3501      	adds	r5, #1
 80049c4:	e7c3      	b.n	800494e <_printf_common+0x46>
 80049c6:	18e1      	adds	r1, r4, r3
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	2030      	movs	r0, #48	; 0x30
 80049cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049d0:	4422      	add	r2, r4
 80049d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049da:	3302      	adds	r3, #2
 80049dc:	e7c5      	b.n	800496a <_printf_common+0x62>
 80049de:	2301      	movs	r3, #1
 80049e0:	4622      	mov	r2, r4
 80049e2:	4639      	mov	r1, r7
 80049e4:	4630      	mov	r0, r6
 80049e6:	47c0      	blx	r8
 80049e8:	3001      	adds	r0, #1
 80049ea:	d0e6      	beq.n	80049ba <_printf_common+0xb2>
 80049ec:	f109 0901 	add.w	r9, r9, #1
 80049f0:	e7d8      	b.n	80049a4 <_printf_common+0x9c>

080049f2 <strncmp>:
 80049f2:	b510      	push	{r4, lr}
 80049f4:	b16a      	cbz	r2, 8004a12 <strncmp+0x20>
 80049f6:	3901      	subs	r1, #1
 80049f8:	1884      	adds	r4, r0, r2
 80049fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80049fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d103      	bne.n	8004a0e <strncmp+0x1c>
 8004a06:	42a0      	cmp	r0, r4
 8004a08:	d001      	beq.n	8004a0e <strncmp+0x1c>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f5      	bne.n	80049fa <strncmp+0x8>
 8004a0e:	1a98      	subs	r0, r3, r2
 8004a10:	bd10      	pop	{r4, pc}
 8004a12:	4610      	mov	r0, r2
 8004a14:	e7fc      	b.n	8004a10 <strncmp+0x1e>

08004a16 <strstr>:
 8004a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a18:	7803      	ldrb	r3, [r0, #0]
 8004a1a:	b17b      	cbz	r3, 8004a3c <strstr+0x26>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	7823      	ldrb	r3, [r4, #0]
 8004a20:	4620      	mov	r0, r4
 8004a22:	1c66      	adds	r6, r4, #1
 8004a24:	b17b      	cbz	r3, 8004a46 <strstr+0x30>
 8004a26:	1e4a      	subs	r2, r1, #1
 8004a28:	1e63      	subs	r3, r4, #1
 8004a2a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004a2e:	b14d      	cbz	r5, 8004a44 <strstr+0x2e>
 8004a30:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004a34:	42af      	cmp	r7, r5
 8004a36:	4634      	mov	r4, r6
 8004a38:	d0f7      	beq.n	8004a2a <strstr+0x14>
 8004a3a:	e7f0      	b.n	8004a1e <strstr+0x8>
 8004a3c:	780b      	ldrb	r3, [r1, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bf18      	it	ne
 8004a42:	2000      	movne	r0, #0
 8004a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a46:	4618      	mov	r0, r3
 8004a48:	e7fc      	b.n	8004a44 <strstr+0x2e>

08004a4a <quorem>:
 8004a4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4e:	6903      	ldr	r3, [r0, #16]
 8004a50:	690c      	ldr	r4, [r1, #16]
 8004a52:	42a3      	cmp	r3, r4
 8004a54:	4680      	mov	r8, r0
 8004a56:	f2c0 8082 	blt.w	8004b5e <quorem+0x114>
 8004a5a:	3c01      	subs	r4, #1
 8004a5c:	f101 0714 	add.w	r7, r1, #20
 8004a60:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a64:	f100 0614 	add.w	r6, r0, #20
 8004a68:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a6c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a70:	eb06 030c 	add.w	r3, r6, ip
 8004a74:	3501      	adds	r5, #1
 8004a76:	eb07 090c 	add.w	r9, r7, ip
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a80:	b395      	cbz	r5, 8004ae8 <quorem+0x9e>
 8004a82:	f04f 0a00 	mov.w	sl, #0
 8004a86:	4638      	mov	r0, r7
 8004a88:	46b6      	mov	lr, r6
 8004a8a:	46d3      	mov	fp, sl
 8004a8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a90:	b293      	uxth	r3, r2
 8004a92:	fb05 a303 	mla	r3, r5, r3, sl
 8004a96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	ebab 0303 	sub.w	r3, fp, r3
 8004aa0:	0c12      	lsrs	r2, r2, #16
 8004aa2:	f8de b000 	ldr.w	fp, [lr]
 8004aa6:	fb05 a202 	mla	r2, r5, r2, sl
 8004aaa:	fa13 f38b 	uxtah	r3, r3, fp
 8004aae:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004ab2:	fa1f fb82 	uxth.w	fp, r2
 8004ab6:	f8de 2000 	ldr.w	r2, [lr]
 8004aba:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004abe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ac8:	4581      	cmp	r9, r0
 8004aca:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ace:	f84e 3b04 	str.w	r3, [lr], #4
 8004ad2:	d2db      	bcs.n	8004a8c <quorem+0x42>
 8004ad4:	f856 300c 	ldr.w	r3, [r6, ip]
 8004ad8:	b933      	cbnz	r3, 8004ae8 <quorem+0x9e>
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	3b04      	subs	r3, #4
 8004ade:	429e      	cmp	r6, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	d330      	bcc.n	8004b46 <quorem+0xfc>
 8004ae4:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ae8:	4640      	mov	r0, r8
 8004aea:	f000 ffbf 	bl	8005a6c <__mcmp>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	db25      	blt.n	8004b3e <quorem+0xf4>
 8004af2:	3501      	adds	r5, #1
 8004af4:	4630      	mov	r0, r6
 8004af6:	f04f 0c00 	mov.w	ip, #0
 8004afa:	f857 2b04 	ldr.w	r2, [r7], #4
 8004afe:	f8d0 e000 	ldr.w	lr, [r0]
 8004b02:	b293      	uxth	r3, r2
 8004b04:	ebac 0303 	sub.w	r3, ip, r3
 8004b08:	0c12      	lsrs	r2, r2, #16
 8004b0a:	fa13 f38e 	uxtah	r3, r3, lr
 8004b0e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b1c:	45b9      	cmp	r9, r7
 8004b1e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b22:	f840 3b04 	str.w	r3, [r0], #4
 8004b26:	d2e8      	bcs.n	8004afa <quorem+0xb0>
 8004b28:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b2c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b30:	b92a      	cbnz	r2, 8004b3e <quorem+0xf4>
 8004b32:	3b04      	subs	r3, #4
 8004b34:	429e      	cmp	r6, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	d30b      	bcc.n	8004b52 <quorem+0x108>
 8004b3a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b3e:	4628      	mov	r0, r5
 8004b40:	b003      	add	sp, #12
 8004b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	3b04      	subs	r3, #4
 8004b4a:	2a00      	cmp	r2, #0
 8004b4c:	d1ca      	bne.n	8004ae4 <quorem+0x9a>
 8004b4e:	3c01      	subs	r4, #1
 8004b50:	e7c5      	b.n	8004ade <quorem+0x94>
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	d1ef      	bne.n	8004b3a <quorem+0xf0>
 8004b5a:	3c01      	subs	r4, #1
 8004b5c:	e7ea      	b.n	8004b34 <quorem+0xea>
 8004b5e:	2000      	movs	r0, #0
 8004b60:	e7ee      	b.n	8004b40 <quorem+0xf6>
 8004b62:	0000      	movs	r0, r0
 8004b64:	0000      	movs	r0, r0
	...

08004b68 <_dtoa_r>:
 8004b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	ec57 6b10 	vmov	r6, r7, d0
 8004b70:	b095      	sub	sp, #84	; 0x54
 8004b72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b74:	9108      	str	r1, [sp, #32]
 8004b76:	4604      	mov	r4, r0
 8004b78:	920a      	str	r2, [sp, #40]	; 0x28
 8004b7a:	9311      	str	r3, [sp, #68]	; 0x44
 8004b7c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004b80:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b84:	b93d      	cbnz	r5, 8004b96 <_dtoa_r+0x2e>
 8004b86:	2010      	movs	r0, #16
 8004b88:	f000 fd48 	bl	800561c <malloc>
 8004b8c:	6260      	str	r0, [r4, #36]	; 0x24
 8004b8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b92:	6005      	str	r5, [r0, #0]
 8004b94:	60c5      	str	r5, [r0, #12]
 8004b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	b151      	cbz	r1, 8004bb2 <_dtoa_r+0x4a>
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	604a      	str	r2, [r1, #4]
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	4093      	lsls	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f000 fd7f 	bl	80056aa <_Bfree>
 8004bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	1e3b      	subs	r3, r7, #0
 8004bb4:	bfb9      	ittee	lt
 8004bb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bba:	9303      	strlt	r3, [sp, #12]
 8004bbc:	2300      	movge	r3, #0
 8004bbe:	f8c8 3000 	strge.w	r3, [r8]
 8004bc2:	9d03      	ldr	r5, [sp, #12]
 8004bc4:	4bac      	ldr	r3, [pc, #688]	; (8004e78 <_dtoa_r+0x310>)
 8004bc6:	bfbc      	itt	lt
 8004bc8:	2201      	movlt	r2, #1
 8004bca:	f8c8 2000 	strlt.w	r2, [r8]
 8004bce:	43ab      	bics	r3, r5
 8004bd0:	d11b      	bne.n	8004c0a <_dtoa_r+0xa2>
 8004bd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004bd4:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	9b02      	ldr	r3, [sp, #8]
 8004bdc:	b923      	cbnz	r3, 8004be8 <_dtoa_r+0x80>
 8004bde:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	f000 84dd 	beq.w	80055a2 <_dtoa_r+0xa3a>
 8004be8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004bea:	b953      	cbnz	r3, 8004c02 <_dtoa_r+0x9a>
 8004bec:	4ba3      	ldr	r3, [pc, #652]	; (8004e7c <_dtoa_r+0x314>)
 8004bee:	e020      	b.n	8004c32 <_dtoa_r+0xca>
 8004bf0:	4ba3      	ldr	r3, [pc, #652]	; (8004e80 <_dtoa_r+0x318>)
 8004bf2:	9304      	str	r3, [sp, #16]
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	9804      	ldr	r0, [sp, #16]
 8004bfc:	b015      	add	sp, #84	; 0x54
 8004bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c02:	4b9e      	ldr	r3, [pc, #632]	; (8004e7c <_dtoa_r+0x314>)
 8004c04:	9304      	str	r3, [sp, #16]
 8004c06:	3303      	adds	r3, #3
 8004c08:	e7f5      	b.n	8004bf6 <_dtoa_r+0x8e>
 8004c0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c16:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004c1a:	d10c      	bne.n	8004c36 <_dtoa_r+0xce>
 8004c1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c1e:	2301      	movs	r3, #1
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 84b9 	beq.w	800559c <_dtoa_r+0xa34>
 8004c2a:	4b96      	ldr	r3, [pc, #600]	; (8004e84 <_dtoa_r+0x31c>)
 8004c2c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	e7e1      	b.n	8004bfa <_dtoa_r+0x92>
 8004c36:	a913      	add	r1, sp, #76	; 0x4c
 8004c38:	aa12      	add	r2, sp, #72	; 0x48
 8004c3a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 ff8b 	bl	8005b5a <__d2b>
 8004c44:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8004c48:	9001      	str	r0, [sp, #4]
 8004c4a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	d046      	beq.n	8004cde <_dtoa_r+0x176>
 8004c50:	9805      	ldr	r0, [sp, #20]
 8004c52:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8004c56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c5a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8004c5e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004c62:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8004c66:	2700      	movs	r7, #0
 8004c68:	ee07 aa90 	vmov	s15, sl
 8004c6c:	ec43 2b16 	vmov	d6, r2, r3
 8004c70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8004c74:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8004e60 <_dtoa_r+0x2f8>
 8004c78:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8004c7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c80:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8004e68 <_dtoa_r+0x300>
 8004c84:	eea7 6b04 	vfma.f64	d6, d7, d4
 8004c88:	eeb0 7b46 	vmov.f64	d7, d6
 8004c8c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8004e70 <_dtoa_r+0x308>
 8004c90:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004c94:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004c98:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca0:	ee16 ba90 	vmov	fp, s13
 8004ca4:	d508      	bpl.n	8004cb8 <_dtoa_r+0x150>
 8004ca6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004caa:	eeb4 6b47 	vcmp.f64	d6, d7
 8004cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb2:	bf18      	it	ne
 8004cb4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004cb8:	f1bb 0f16 	cmp.w	fp, #22
 8004cbc:	d834      	bhi.n	8004d28 <_dtoa_r+0x1c0>
 8004cbe:	4b72      	ldr	r3, [pc, #456]	; (8004e88 <_dtoa_r+0x320>)
 8004cc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004cc4:	ed93 7b00 	vldr	d7, [r3]
 8004cc8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004ccc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd4:	dd01      	ble.n	8004cda <_dtoa_r+0x172>
 8004cd6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e025      	b.n	8004d2a <_dtoa_r+0x1c2>
 8004cde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ce0:	eb01 0a03 	add.w	sl, r1, r3
 8004ce4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	dd17      	ble.n	8004d1c <_dtoa_r+0x1b4>
 8004cec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004cf0:	9a02      	ldr	r2, [sp, #8]
 8004cf2:	409d      	lsls	r5, r3
 8004cf4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfc:	432b      	orrs	r3, r5
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004d06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d0a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004d0e:	9805      	ldr	r0, [sp, #20]
 8004d10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d14:	2701      	movs	r7, #1
 8004d16:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8004d1a:	e7a5      	b.n	8004c68 <_dtoa_r+0x100>
 8004d1c:	9a02      	ldr	r2, [sp, #8]
 8004d1e:	f1c3 0320 	rsb	r3, r3, #32
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	e7ea      	b.n	8004cfe <_dtoa_r+0x196>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	eba1 0a0a 	sub.w	sl, r1, sl
 8004d2e:	9310      	str	r3, [sp, #64]	; 0x40
 8004d30:	f1ba 0301 	subs.w	r3, sl, #1
 8004d34:	9307      	str	r3, [sp, #28]
 8004d36:	bf43      	ittte	mi
 8004d38:	2300      	movmi	r3, #0
 8004d3a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8004d3e:	9307      	strmi	r3, [sp, #28]
 8004d40:	f04f 0a00 	movpl.w	sl, #0
 8004d44:	f1bb 0f00 	cmp.w	fp, #0
 8004d48:	db19      	blt.n	8004d7e <_dtoa_r+0x216>
 8004d4a:	9b07      	ldr	r3, [sp, #28]
 8004d4c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004d50:	445b      	add	r3, fp
 8004d52:	9307      	str	r3, [sp, #28]
 8004d54:	f04f 0800 	mov.w	r8, #0
 8004d58:	9b08      	ldr	r3, [sp, #32]
 8004d5a:	2b09      	cmp	r3, #9
 8004d5c:	d866      	bhi.n	8004e2c <_dtoa_r+0x2c4>
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	bfc4      	itt	gt
 8004d62:	3b04      	subgt	r3, #4
 8004d64:	9308      	strgt	r3, [sp, #32]
 8004d66:	9b08      	ldr	r3, [sp, #32]
 8004d68:	f1a3 0302 	sub.w	r3, r3, #2
 8004d6c:	bfcc      	ite	gt
 8004d6e:	2500      	movgt	r5, #0
 8004d70:	2501      	movle	r5, #1
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d866      	bhi.n	8004e44 <_dtoa_r+0x2dc>
 8004d76:	e8df f003 	tbb	[pc, r3]
 8004d7a:	5755      	.short	0x5755
 8004d7c:	4909      	.short	0x4909
 8004d7e:	2300      	movs	r3, #0
 8004d80:	ebaa 0a0b 	sub.w	sl, sl, fp
 8004d84:	f1cb 0800 	rsb	r8, fp, #0
 8004d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d8a:	e7e5      	b.n	8004d58 <_dtoa_r+0x1f0>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	dd59      	ble.n	8004e4a <_dtoa_r+0x2e2>
 8004d96:	9306      	str	r3, [sp, #24]
 8004d98:	4699      	mov	r9, r3
 8004d9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	6072      	str	r2, [r6, #4]
 8004da0:	2204      	movs	r2, #4
 8004da2:	f102 0014 	add.w	r0, r2, #20
 8004da6:	4298      	cmp	r0, r3
 8004da8:	6871      	ldr	r1, [r6, #4]
 8004daa:	d953      	bls.n	8004e54 <_dtoa_r+0x2ec>
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 fc48 	bl	8005642 <_Balloc>
 8004db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db4:	6030      	str	r0, [r6, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	9304      	str	r3, [sp, #16]
 8004dba:	f1b9 0f0e 	cmp.w	r9, #14
 8004dbe:	f200 80c2 	bhi.w	8004f46 <_dtoa_r+0x3de>
 8004dc2:	2d00      	cmp	r5, #0
 8004dc4:	f000 80bf 	beq.w	8004f46 <_dtoa_r+0x3de>
 8004dc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004dcc:	f1bb 0f00 	cmp.w	fp, #0
 8004dd0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004dd4:	f340 80e6 	ble.w	8004fa4 <_dtoa_r+0x43c>
 8004dd8:	4a2b      	ldr	r2, [pc, #172]	; (8004e88 <_dtoa_r+0x320>)
 8004dda:	f00b 030f 	and.w	r3, fp, #15
 8004dde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004de2:	ed93 7b00 	vldr	d7, [r3]
 8004de6:	ea4f 132b 	mov.w	r3, fp, asr #4
 8004dea:	06da      	lsls	r2, r3, #27
 8004dec:	f140 80d8 	bpl.w	8004fa0 <_dtoa_r+0x438>
 8004df0:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <_dtoa_r+0x324>)
 8004df2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8004df6:	ed92 6b08 	vldr	d6, [r2, #32]
 8004dfa:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004dfe:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	2203      	movs	r2, #3
 8004e08:	4920      	ldr	r1, [pc, #128]	; (8004e8c <_dtoa_r+0x324>)
 8004e0a:	e04a      	b.n	8004ea2 <_dtoa_r+0x33a>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e12:	445b      	add	r3, fp
 8004e14:	f103 0901 	add.w	r9, r3, #1
 8004e18:	9306      	str	r3, [sp, #24]
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bfb8      	it	lt
 8004e20:	2301      	movlt	r3, #1
 8004e22:	e7ba      	b.n	8004d9a <_dtoa_r+0x232>
 8004e24:	2300      	movs	r3, #0
 8004e26:	e7b2      	b.n	8004d8e <_dtoa_r+0x226>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e7f0      	b.n	8004e0e <_dtoa_r+0x2a6>
 8004e2c:	2501      	movs	r5, #1
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295
 8004e38:	9306      	str	r3, [sp, #24]
 8004e3a:	4699      	mov	r9, r3
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2312      	movs	r3, #18
 8004e40:	920a      	str	r2, [sp, #40]	; 0x28
 8004e42:	e7aa      	b.n	8004d9a <_dtoa_r+0x232>
 8004e44:	2301      	movs	r3, #1
 8004e46:	9309      	str	r3, [sp, #36]	; 0x24
 8004e48:	e7f4      	b.n	8004e34 <_dtoa_r+0x2cc>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	9306      	str	r3, [sp, #24]
 8004e4e:	4699      	mov	r9, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	e7f5      	b.n	8004e40 <_dtoa_r+0x2d8>
 8004e54:	3101      	adds	r1, #1
 8004e56:	6071      	str	r1, [r6, #4]
 8004e58:	0052      	lsls	r2, r2, #1
 8004e5a:	e7a2      	b.n	8004da2 <_dtoa_r+0x23a>
 8004e5c:	f3af 8000 	nop.w
 8004e60:	636f4361 	.word	0x636f4361
 8004e64:	3fd287a7 	.word	0x3fd287a7
 8004e68:	8b60c8b3 	.word	0x8b60c8b3
 8004e6c:	3fc68a28 	.word	0x3fc68a28
 8004e70:	509f79fb 	.word	0x509f79fb
 8004e74:	3fd34413 	.word	0x3fd34413
 8004e78:	7ff00000 	.word	0x7ff00000
 8004e7c:	08005f8f 	.word	0x08005f8f
 8004e80:	08005f86 	.word	0x08005f86
 8004e84:	08005f85 	.word	0x08005f85
 8004e88:	08005fc0 	.word	0x08005fc0
 8004e8c:	08005f98 	.word	0x08005f98
 8004e90:	07de      	lsls	r6, r3, #31
 8004e92:	d504      	bpl.n	8004e9e <_dtoa_r+0x336>
 8004e94:	ed91 6b00 	vldr	d6, [r1]
 8004e98:	3201      	adds	r2, #1
 8004e9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e9e:	105b      	asrs	r3, r3, #1
 8004ea0:	3108      	adds	r1, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f4      	bne.n	8004e90 <_dtoa_r+0x328>
 8004ea6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004eaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004eae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004eb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a7 	beq.w	8005008 <_dtoa_r+0x4a0>
 8004eba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004ebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ec2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	f140 809d 	bpl.w	8005008 <_dtoa_r+0x4a0>
 8004ece:	f1b9 0f00 	cmp.w	r9, #0
 8004ed2:	f000 8099 	beq.w	8005008 <_dtoa_r+0x4a0>
 8004ed6:	9b06      	ldr	r3, [sp, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	dd30      	ble.n	8004f3e <_dtoa_r+0x3d6>
 8004edc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004ee0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ee4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ee8:	9d06      	ldr	r5, [sp, #24]
 8004eea:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004eee:	3201      	adds	r2, #1
 8004ef0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004ef4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004ef8:	ee07 2a90 	vmov	s15, r2
 8004efc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f00:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004f04:	ed8d 5b02 	vstr	d5, [sp, #8]
 8004f08:	9a03      	ldr	r2, [sp, #12]
 8004f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f0e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8004f12:	2d00      	cmp	r5, #0
 8004f14:	d17b      	bne.n	800500e <_dtoa_r+0x4a6>
 8004f16:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004f1a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f1e:	ec41 0b17 	vmov	d7, r0, r1
 8004f22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2a:	f300 8253 	bgt.w	80053d4 <_dtoa_r+0x86c>
 8004f2e:	eeb1 7b47 	vneg.f64	d7, d7
 8004f32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3a:	f100 8249 	bmi.w	80053d0 <_dtoa_r+0x868>
 8004f3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004f42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f2c0 8119 	blt.w	8005180 <_dtoa_r+0x618>
 8004f4e:	f1bb 0f0e 	cmp.w	fp, #14
 8004f52:	f300 8115 	bgt.w	8005180 <_dtoa_r+0x618>
 8004f56:	4bc3      	ldr	r3, [pc, #780]	; (8005264 <_dtoa_r+0x6fc>)
 8004f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f5c:	ed93 6b00 	vldr	d6, [r3]
 8004f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f280 80ba 	bge.w	80050dc <_dtoa_r+0x574>
 8004f68:	f1b9 0f00 	cmp.w	r9, #0
 8004f6c:	f300 80b6 	bgt.w	80050dc <_dtoa_r+0x574>
 8004f70:	f040 822d 	bne.w	80053ce <_dtoa_r+0x866>
 8004f74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004f78:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004f7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	464d      	mov	r5, r9
 8004f8a:	464f      	mov	r7, r9
 8004f8c:	f280 8204 	bge.w	8005398 <_dtoa_r+0x830>
 8004f90:	9b04      	ldr	r3, [sp, #16]
 8004f92:	9a04      	ldr	r2, [sp, #16]
 8004f94:	1c5e      	adds	r6, r3, #1
 8004f96:	2331      	movs	r3, #49	; 0x31
 8004f98:	7013      	strb	r3, [r2, #0]
 8004f9a:	f10b 0b01 	add.w	fp, fp, #1
 8004f9e:	e1ff      	b.n	80053a0 <_dtoa_r+0x838>
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	e731      	b.n	8004e08 <_dtoa_r+0x2a0>
 8004fa4:	d02e      	beq.n	8005004 <_dtoa_r+0x49c>
 8004fa6:	f1cb 0300 	rsb	r3, fp, #0
 8004faa:	4aae      	ldr	r2, [pc, #696]	; (8005264 <_dtoa_r+0x6fc>)
 8004fac:	f003 010f 	and.w	r1, r3, #15
 8004fb0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004fb4:	ed92 7b00 	vldr	d7, [r2]
 8004fb8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8004fbc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fc0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004fc4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8004fc8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004fcc:	49a6      	ldr	r1, [pc, #664]	; (8005268 <_dtoa_r+0x700>)
 8004fce:	111b      	asrs	r3, r3, #4
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	b93b      	cbnz	r3, 8004fe6 <_dtoa_r+0x47e>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	f43f af6b 	beq.w	8004eb2 <_dtoa_r+0x34a>
 8004fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fe4:	e765      	b.n	8004eb2 <_dtoa_r+0x34a>
 8004fe6:	07dd      	lsls	r5, r3, #31
 8004fe8:	d509      	bpl.n	8004ffe <_dtoa_r+0x496>
 8004fea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004fee:	ed91 7b00 	vldr	d7, [r1]
 8004ff2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ff6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004ffa:	3201      	adds	r2, #1
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	105b      	asrs	r3, r3, #1
 8005000:	3108      	adds	r1, #8
 8005002:	e7e7      	b.n	8004fd4 <_dtoa_r+0x46c>
 8005004:	2202      	movs	r2, #2
 8005006:	e754      	b.n	8004eb2 <_dtoa_r+0x34a>
 8005008:	465b      	mov	r3, fp
 800500a:	464d      	mov	r5, r9
 800500c:	e770      	b.n	8004ef0 <_dtoa_r+0x388>
 800500e:	4a95      	ldr	r2, [pc, #596]	; (8005264 <_dtoa_r+0x6fc>)
 8005010:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8005014:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800501a:	ec41 0b17 	vmov	d7, r0, r1
 800501e:	b35a      	cbz	r2, 8005078 <_dtoa_r+0x510>
 8005020:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005024:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005028:	9e04      	ldr	r6, [sp, #16]
 800502a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800502e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005032:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005036:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800503a:	ee14 2a90 	vmov	r2, s9
 800503e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005042:	3230      	adds	r2, #48	; 0x30
 8005044:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005048:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800504c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005050:	f806 2b01 	strb.w	r2, [r6], #1
 8005054:	d43b      	bmi.n	80050ce <_dtoa_r+0x566>
 8005056:	ee32 5b46 	vsub.f64	d5, d2, d6
 800505a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	d472      	bmi.n	800514a <_dtoa_r+0x5e2>
 8005064:	9a04      	ldr	r2, [sp, #16]
 8005066:	1ab2      	subs	r2, r6, r2
 8005068:	4295      	cmp	r5, r2
 800506a:	f77f af68 	ble.w	8004f3e <_dtoa_r+0x3d6>
 800506e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005072:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005076:	e7de      	b.n	8005036 <_dtoa_r+0x4ce>
 8005078:	9a04      	ldr	r2, [sp, #16]
 800507a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800507e:	1956      	adds	r6, r2, r5
 8005080:	4611      	mov	r1, r2
 8005082:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005086:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800508a:	ee14 2a90 	vmov	r2, s9
 800508e:	3230      	adds	r2, #48	; 0x30
 8005090:	f801 2b01 	strb.w	r2, [r1], #1
 8005094:	42b1      	cmp	r1, r6
 8005096:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800509a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800509e:	d11a      	bne.n	80050d6 <_dtoa_r+0x56e>
 80050a0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80050a4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80050a8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	dc4b      	bgt.n	800514a <_dtoa_r+0x5e2>
 80050b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80050b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050be:	f57f af3e 	bpl.w	8004f3e <_dtoa_r+0x3d6>
 80050c2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80050c6:	2a30      	cmp	r2, #48	; 0x30
 80050c8:	f106 31ff 	add.w	r1, r6, #4294967295
 80050cc:	d001      	beq.n	80050d2 <_dtoa_r+0x56a>
 80050ce:	469b      	mov	fp, r3
 80050d0:	e02a      	b.n	8005128 <_dtoa_r+0x5c0>
 80050d2:	460e      	mov	r6, r1
 80050d4:	e7f5      	b.n	80050c2 <_dtoa_r+0x55a>
 80050d6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80050da:	e7d4      	b.n	8005086 <_dtoa_r+0x51e>
 80050dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80050e0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80050e4:	9e04      	ldr	r6, [sp, #16]
 80050e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80050ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80050ee:	ee15 3a10 	vmov	r3, s10
 80050f2:	3330      	adds	r3, #48	; 0x30
 80050f4:	f806 3b01 	strb.w	r3, [r6], #1
 80050f8:	9b04      	ldr	r3, [sp, #16]
 80050fa:	1af3      	subs	r3, r6, r3
 80050fc:	4599      	cmp	r9, r3
 80050fe:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005102:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005106:	d133      	bne.n	8005170 <_dtoa_r+0x608>
 8005108:	ee37 7b07 	vadd.f64	d7, d7, d7
 800510c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005114:	dc18      	bgt.n	8005148 <_dtoa_r+0x5e0>
 8005116:	eeb4 7b46 	vcmp.f64	d7, d6
 800511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511e:	d103      	bne.n	8005128 <_dtoa_r+0x5c0>
 8005120:	ee15 3a10 	vmov	r3, s10
 8005124:	07db      	lsls	r3, r3, #31
 8005126:	d40f      	bmi.n	8005148 <_dtoa_r+0x5e0>
 8005128:	9901      	ldr	r1, [sp, #4]
 800512a:	4620      	mov	r0, r4
 800512c:	f000 fabd 	bl	80056aa <_Bfree>
 8005130:	2300      	movs	r3, #0
 8005132:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005134:	7033      	strb	r3, [r6, #0]
 8005136:	f10b 0301 	add.w	r3, fp, #1
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800513e:	2b00      	cmp	r3, #0
 8005140:	f43f ad5b 	beq.w	8004bfa <_dtoa_r+0x92>
 8005144:	601e      	str	r6, [r3, #0]
 8005146:	e558      	b.n	8004bfa <_dtoa_r+0x92>
 8005148:	465b      	mov	r3, fp
 800514a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800514e:	2939      	cmp	r1, #57	; 0x39
 8005150:	f106 32ff 	add.w	r2, r6, #4294967295
 8005154:	d106      	bne.n	8005164 <_dtoa_r+0x5fc>
 8005156:	9904      	ldr	r1, [sp, #16]
 8005158:	4291      	cmp	r1, r2
 800515a:	d107      	bne.n	800516c <_dtoa_r+0x604>
 800515c:	2230      	movs	r2, #48	; 0x30
 800515e:	700a      	strb	r2, [r1, #0]
 8005160:	3301      	adds	r3, #1
 8005162:	460a      	mov	r2, r1
 8005164:	7811      	ldrb	r1, [r2, #0]
 8005166:	3101      	adds	r1, #1
 8005168:	7011      	strb	r1, [r2, #0]
 800516a:	e7b0      	b.n	80050ce <_dtoa_r+0x566>
 800516c:	4616      	mov	r6, r2
 800516e:	e7ec      	b.n	800514a <_dtoa_r+0x5e2>
 8005170:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005174:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517c:	d1b3      	bne.n	80050e6 <_dtoa_r+0x57e>
 800517e:	e7d3      	b.n	8005128 <_dtoa_r+0x5c0>
 8005180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005182:	2a00      	cmp	r2, #0
 8005184:	f000 808d 	beq.w	80052a2 <_dtoa_r+0x73a>
 8005188:	9a08      	ldr	r2, [sp, #32]
 800518a:	2a01      	cmp	r2, #1
 800518c:	dc72      	bgt.n	8005274 <_dtoa_r+0x70c>
 800518e:	2f00      	cmp	r7, #0
 8005190:	d06c      	beq.n	800526c <_dtoa_r+0x704>
 8005192:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005196:	4645      	mov	r5, r8
 8005198:	4656      	mov	r6, sl
 800519a:	9a07      	ldr	r2, [sp, #28]
 800519c:	2101      	movs	r1, #1
 800519e:	441a      	add	r2, r3
 80051a0:	4620      	mov	r0, r4
 80051a2:	449a      	add	sl, r3
 80051a4:	9207      	str	r2, [sp, #28]
 80051a6:	f000 fb20 	bl	80057ea <__i2b>
 80051aa:	4607      	mov	r7, r0
 80051ac:	2e00      	cmp	r6, #0
 80051ae:	dd0b      	ble.n	80051c8 <_dtoa_r+0x660>
 80051b0:	9b07      	ldr	r3, [sp, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dd08      	ble.n	80051c8 <_dtoa_r+0x660>
 80051b6:	42b3      	cmp	r3, r6
 80051b8:	9a07      	ldr	r2, [sp, #28]
 80051ba:	bfa8      	it	ge
 80051bc:	4633      	movge	r3, r6
 80051be:	ebaa 0a03 	sub.w	sl, sl, r3
 80051c2:	1af6      	subs	r6, r6, r3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	9307      	str	r3, [sp, #28]
 80051c8:	f1b8 0f00 	cmp.w	r8, #0
 80051cc:	d01d      	beq.n	800520a <_dtoa_r+0x6a2>
 80051ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d06a      	beq.n	80052aa <_dtoa_r+0x742>
 80051d4:	b18d      	cbz	r5, 80051fa <_dtoa_r+0x692>
 80051d6:	4639      	mov	r1, r7
 80051d8:	462a      	mov	r2, r5
 80051da:	4620      	mov	r0, r4
 80051dc:	f000 fba4 	bl	8005928 <__pow5mult>
 80051e0:	9a01      	ldr	r2, [sp, #4]
 80051e2:	4601      	mov	r1, r0
 80051e4:	4607      	mov	r7, r0
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 fb08 	bl	80057fc <__multiply>
 80051ec:	9901      	ldr	r1, [sp, #4]
 80051ee:	900c      	str	r0, [sp, #48]	; 0x30
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 fa5a 	bl	80056aa <_Bfree>
 80051f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	ebb8 0205 	subs.w	r2, r8, r5
 80051fe:	d004      	beq.n	800520a <_dtoa_r+0x6a2>
 8005200:	9901      	ldr	r1, [sp, #4]
 8005202:	4620      	mov	r0, r4
 8005204:	f000 fb90 	bl	8005928 <__pow5mult>
 8005208:	9001      	str	r0, [sp, #4]
 800520a:	2101      	movs	r1, #1
 800520c:	4620      	mov	r0, r4
 800520e:	f000 faec 	bl	80057ea <__i2b>
 8005212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005214:	4605      	mov	r5, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 81ca 	beq.w	80055b0 <_dtoa_r+0xa48>
 800521c:	461a      	mov	r2, r3
 800521e:	4601      	mov	r1, r0
 8005220:	4620      	mov	r0, r4
 8005222:	f000 fb81 	bl	8005928 <__pow5mult>
 8005226:	9b08      	ldr	r3, [sp, #32]
 8005228:	2b01      	cmp	r3, #1
 800522a:	4605      	mov	r5, r0
 800522c:	dc44      	bgt.n	80052b8 <_dtoa_r+0x750>
 800522e:	9b02      	ldr	r3, [sp, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d13c      	bne.n	80052ae <_dtoa_r+0x746>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800523a:	2b00      	cmp	r3, #0
 800523c:	d137      	bne.n	80052ae <_dtoa_r+0x746>
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005244:	0d1b      	lsrs	r3, r3, #20
 8005246:	051b      	lsls	r3, r3, #20
 8005248:	2b00      	cmp	r3, #0
 800524a:	d033      	beq.n	80052b4 <_dtoa_r+0x74c>
 800524c:	9b07      	ldr	r3, [sp, #28]
 800524e:	3301      	adds	r3, #1
 8005250:	f10a 0a01 	add.w	sl, sl, #1
 8005254:	9307      	str	r3, [sp, #28]
 8005256:	f04f 0801 	mov.w	r8, #1
 800525a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800525c:	bb73      	cbnz	r3, 80052bc <_dtoa_r+0x754>
 800525e:	2001      	movs	r0, #1
 8005260:	e034      	b.n	80052cc <_dtoa_r+0x764>
 8005262:	bf00      	nop
 8005264:	08005fc0 	.word	0x08005fc0
 8005268:	08005f98 	.word	0x08005f98
 800526c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800526e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005272:	e790      	b.n	8005196 <_dtoa_r+0x62e>
 8005274:	f109 35ff 	add.w	r5, r9, #4294967295
 8005278:	45a8      	cmp	r8, r5
 800527a:	bfbf      	itttt	lt
 800527c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800527e:	eba5 0808 	sublt.w	r8, r5, r8
 8005282:	4443      	addlt	r3, r8
 8005284:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8005286:	bfb6      	itet	lt
 8005288:	46a8      	movlt	r8, r5
 800528a:	eba8 0505 	subge.w	r5, r8, r5
 800528e:	2500      	movlt	r5, #0
 8005290:	f1b9 0f00 	cmp.w	r9, #0
 8005294:	bfb9      	ittee	lt
 8005296:	ebaa 0609 	sublt.w	r6, sl, r9
 800529a:	2300      	movlt	r3, #0
 800529c:	4656      	movge	r6, sl
 800529e:	464b      	movge	r3, r9
 80052a0:	e77b      	b.n	800519a <_dtoa_r+0x632>
 80052a2:	4645      	mov	r5, r8
 80052a4:	4656      	mov	r6, sl
 80052a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80052a8:	e780      	b.n	80051ac <_dtoa_r+0x644>
 80052aa:	4642      	mov	r2, r8
 80052ac:	e7a8      	b.n	8005200 <_dtoa_r+0x698>
 80052ae:	f04f 0800 	mov.w	r8, #0
 80052b2:	e7d2      	b.n	800525a <_dtoa_r+0x6f2>
 80052b4:	4698      	mov	r8, r3
 80052b6:	e7d0      	b.n	800525a <_dtoa_r+0x6f2>
 80052b8:	f04f 0800 	mov.w	r8, #0
 80052bc:	692b      	ldr	r3, [r5, #16]
 80052be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80052c2:	6918      	ldr	r0, [r3, #16]
 80052c4:	f000 fa43 	bl	800574e <__hi0bits>
 80052c8:	f1c0 0020 	rsb	r0, r0, #32
 80052cc:	9b07      	ldr	r3, [sp, #28]
 80052ce:	4418      	add	r0, r3
 80052d0:	f010 001f 	ands.w	r0, r0, #31
 80052d4:	d047      	beq.n	8005366 <_dtoa_r+0x7fe>
 80052d6:	f1c0 0320 	rsb	r3, r0, #32
 80052da:	2b04      	cmp	r3, #4
 80052dc:	dd3b      	ble.n	8005356 <_dtoa_r+0x7ee>
 80052de:	9b07      	ldr	r3, [sp, #28]
 80052e0:	f1c0 001c 	rsb	r0, r0, #28
 80052e4:	4482      	add	sl, r0
 80052e6:	4406      	add	r6, r0
 80052e8:	4403      	add	r3, r0
 80052ea:	9307      	str	r3, [sp, #28]
 80052ec:	f1ba 0f00 	cmp.w	sl, #0
 80052f0:	dd05      	ble.n	80052fe <_dtoa_r+0x796>
 80052f2:	4652      	mov	r2, sl
 80052f4:	9901      	ldr	r1, [sp, #4]
 80052f6:	4620      	mov	r0, r4
 80052f8:	f000 fb64 	bl	80059c4 <__lshift>
 80052fc:	9001      	str	r0, [sp, #4]
 80052fe:	9b07      	ldr	r3, [sp, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	dd05      	ble.n	8005310 <_dtoa_r+0x7a8>
 8005304:	4629      	mov	r1, r5
 8005306:	461a      	mov	r2, r3
 8005308:	4620      	mov	r0, r4
 800530a:	f000 fb5b 	bl	80059c4 <__lshift>
 800530e:	4605      	mov	r5, r0
 8005310:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005312:	b353      	cbz	r3, 800536a <_dtoa_r+0x802>
 8005314:	4629      	mov	r1, r5
 8005316:	9801      	ldr	r0, [sp, #4]
 8005318:	f000 fba8 	bl	8005a6c <__mcmp>
 800531c:	2800      	cmp	r0, #0
 800531e:	da24      	bge.n	800536a <_dtoa_r+0x802>
 8005320:	2300      	movs	r3, #0
 8005322:	220a      	movs	r2, #10
 8005324:	9901      	ldr	r1, [sp, #4]
 8005326:	4620      	mov	r0, r4
 8005328:	f000 f9d6 	bl	80056d8 <__multadd>
 800532c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532e:	9001      	str	r0, [sp, #4]
 8005330:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8142 	beq.w	80055be <_dtoa_r+0xa56>
 800533a:	2300      	movs	r3, #0
 800533c:	4639      	mov	r1, r7
 800533e:	220a      	movs	r2, #10
 8005340:	4620      	mov	r0, r4
 8005342:	f000 f9c9 	bl	80056d8 <__multadd>
 8005346:	9b06      	ldr	r3, [sp, #24]
 8005348:	2b00      	cmp	r3, #0
 800534a:	4607      	mov	r7, r0
 800534c:	dc4b      	bgt.n	80053e6 <_dtoa_r+0x87e>
 800534e:	9b08      	ldr	r3, [sp, #32]
 8005350:	2b02      	cmp	r3, #2
 8005352:	dd48      	ble.n	80053e6 <_dtoa_r+0x87e>
 8005354:	e011      	b.n	800537a <_dtoa_r+0x812>
 8005356:	d0c9      	beq.n	80052ec <_dtoa_r+0x784>
 8005358:	9a07      	ldr	r2, [sp, #28]
 800535a:	331c      	adds	r3, #28
 800535c:	441a      	add	r2, r3
 800535e:	449a      	add	sl, r3
 8005360:	441e      	add	r6, r3
 8005362:	4613      	mov	r3, r2
 8005364:	e7c1      	b.n	80052ea <_dtoa_r+0x782>
 8005366:	4603      	mov	r3, r0
 8005368:	e7f6      	b.n	8005358 <_dtoa_r+0x7f0>
 800536a:	f1b9 0f00 	cmp.w	r9, #0
 800536e:	dc34      	bgt.n	80053da <_dtoa_r+0x872>
 8005370:	9b08      	ldr	r3, [sp, #32]
 8005372:	2b02      	cmp	r3, #2
 8005374:	dd31      	ble.n	80053da <_dtoa_r+0x872>
 8005376:	f8cd 9018 	str.w	r9, [sp, #24]
 800537a:	9b06      	ldr	r3, [sp, #24]
 800537c:	b963      	cbnz	r3, 8005398 <_dtoa_r+0x830>
 800537e:	4629      	mov	r1, r5
 8005380:	2205      	movs	r2, #5
 8005382:	4620      	mov	r0, r4
 8005384:	f000 f9a8 	bl	80056d8 <__multadd>
 8005388:	4601      	mov	r1, r0
 800538a:	4605      	mov	r5, r0
 800538c:	9801      	ldr	r0, [sp, #4]
 800538e:	f000 fb6d 	bl	8005a6c <__mcmp>
 8005392:	2800      	cmp	r0, #0
 8005394:	f73f adfc 	bgt.w	8004f90 <_dtoa_r+0x428>
 8005398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800539a:	9e04      	ldr	r6, [sp, #16]
 800539c:	ea6f 0b03 	mvn.w	fp, r3
 80053a0:	f04f 0900 	mov.w	r9, #0
 80053a4:	4629      	mov	r1, r5
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 f97f 	bl	80056aa <_Bfree>
 80053ac:	2f00      	cmp	r7, #0
 80053ae:	f43f aebb 	beq.w	8005128 <_dtoa_r+0x5c0>
 80053b2:	f1b9 0f00 	cmp.w	r9, #0
 80053b6:	d005      	beq.n	80053c4 <_dtoa_r+0x85c>
 80053b8:	45b9      	cmp	r9, r7
 80053ba:	d003      	beq.n	80053c4 <_dtoa_r+0x85c>
 80053bc:	4649      	mov	r1, r9
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 f973 	bl	80056aa <_Bfree>
 80053c4:	4639      	mov	r1, r7
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 f96f 	bl	80056aa <_Bfree>
 80053cc:	e6ac      	b.n	8005128 <_dtoa_r+0x5c0>
 80053ce:	2500      	movs	r5, #0
 80053d0:	462f      	mov	r7, r5
 80053d2:	e7e1      	b.n	8005398 <_dtoa_r+0x830>
 80053d4:	469b      	mov	fp, r3
 80053d6:	462f      	mov	r7, r5
 80053d8:	e5da      	b.n	8004f90 <_dtoa_r+0x428>
 80053da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053dc:	f8cd 9018 	str.w	r9, [sp, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 80f3 	beq.w	80055cc <_dtoa_r+0xa64>
 80053e6:	2e00      	cmp	r6, #0
 80053e8:	dd05      	ble.n	80053f6 <_dtoa_r+0x88e>
 80053ea:	4639      	mov	r1, r7
 80053ec:	4632      	mov	r2, r6
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 fae8 	bl	80059c4 <__lshift>
 80053f4:	4607      	mov	r7, r0
 80053f6:	f1b8 0f00 	cmp.w	r8, #0
 80053fa:	d04c      	beq.n	8005496 <_dtoa_r+0x92e>
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4620      	mov	r0, r4
 8005400:	f000 f91f 	bl	8005642 <_Balloc>
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	3202      	adds	r2, #2
 8005408:	4606      	mov	r6, r0
 800540a:	0092      	lsls	r2, r2, #2
 800540c:	f107 010c 	add.w	r1, r7, #12
 8005410:	300c      	adds	r0, #12
 8005412:	f000 f90b 	bl	800562c <memcpy>
 8005416:	2201      	movs	r2, #1
 8005418:	4631      	mov	r1, r6
 800541a:	4620      	mov	r0, r4
 800541c:	f000 fad2 	bl	80059c4 <__lshift>
 8005420:	9b02      	ldr	r3, [sp, #8]
 8005422:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	46b9      	mov	r9, r7
 800542c:	9307      	str	r3, [sp, #28]
 800542e:	4607      	mov	r7, r0
 8005430:	4629      	mov	r1, r5
 8005432:	9801      	ldr	r0, [sp, #4]
 8005434:	f7ff fb09 	bl	8004a4a <quorem>
 8005438:	4649      	mov	r1, r9
 800543a:	4606      	mov	r6, r0
 800543c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005440:	9801      	ldr	r0, [sp, #4]
 8005442:	f000 fb13 	bl	8005a6c <__mcmp>
 8005446:	463a      	mov	r2, r7
 8005448:	9002      	str	r0, [sp, #8]
 800544a:	4629      	mov	r1, r5
 800544c:	4620      	mov	r0, r4
 800544e:	f000 fb27 	bl	8005aa0 <__mdiff>
 8005452:	68c3      	ldr	r3, [r0, #12]
 8005454:	4602      	mov	r2, r0
 8005456:	bb03      	cbnz	r3, 800549a <_dtoa_r+0x932>
 8005458:	4601      	mov	r1, r0
 800545a:	9009      	str	r0, [sp, #36]	; 0x24
 800545c:	9801      	ldr	r0, [sp, #4]
 800545e:	f000 fb05 	bl	8005a6c <__mcmp>
 8005462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005464:	4603      	mov	r3, r0
 8005466:	4611      	mov	r1, r2
 8005468:	4620      	mov	r0, r4
 800546a:	9309      	str	r3, [sp, #36]	; 0x24
 800546c:	f000 f91d 	bl	80056aa <_Bfree>
 8005470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005472:	b9a3      	cbnz	r3, 800549e <_dtoa_r+0x936>
 8005474:	9a08      	ldr	r2, [sp, #32]
 8005476:	b992      	cbnz	r2, 800549e <_dtoa_r+0x936>
 8005478:	9a07      	ldr	r2, [sp, #28]
 800547a:	b982      	cbnz	r2, 800549e <_dtoa_r+0x936>
 800547c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005480:	d029      	beq.n	80054d6 <_dtoa_r+0x96e>
 8005482:	9b02      	ldr	r3, [sp, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	dd01      	ble.n	800548c <_dtoa_r+0x924>
 8005488:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800548c:	f10a 0601 	add.w	r6, sl, #1
 8005490:	f88a 8000 	strb.w	r8, [sl]
 8005494:	e786      	b.n	80053a4 <_dtoa_r+0x83c>
 8005496:	4638      	mov	r0, r7
 8005498:	e7c2      	b.n	8005420 <_dtoa_r+0x8b8>
 800549a:	2301      	movs	r3, #1
 800549c:	e7e3      	b.n	8005466 <_dtoa_r+0x8fe>
 800549e:	9a02      	ldr	r2, [sp, #8]
 80054a0:	2a00      	cmp	r2, #0
 80054a2:	db04      	blt.n	80054ae <_dtoa_r+0x946>
 80054a4:	d124      	bne.n	80054f0 <_dtoa_r+0x988>
 80054a6:	9a08      	ldr	r2, [sp, #32]
 80054a8:	bb12      	cbnz	r2, 80054f0 <_dtoa_r+0x988>
 80054aa:	9a07      	ldr	r2, [sp, #28]
 80054ac:	bb02      	cbnz	r2, 80054f0 <_dtoa_r+0x988>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	ddec      	ble.n	800548c <_dtoa_r+0x924>
 80054b2:	2201      	movs	r2, #1
 80054b4:	9901      	ldr	r1, [sp, #4]
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 fa84 	bl	80059c4 <__lshift>
 80054bc:	4629      	mov	r1, r5
 80054be:	9001      	str	r0, [sp, #4]
 80054c0:	f000 fad4 	bl	8005a6c <__mcmp>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	dc03      	bgt.n	80054d0 <_dtoa_r+0x968>
 80054c8:	d1e0      	bne.n	800548c <_dtoa_r+0x924>
 80054ca:	f018 0f01 	tst.w	r8, #1
 80054ce:	d0dd      	beq.n	800548c <_dtoa_r+0x924>
 80054d0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054d4:	d1d8      	bne.n	8005488 <_dtoa_r+0x920>
 80054d6:	2339      	movs	r3, #57	; 0x39
 80054d8:	f10a 0601 	add.w	r6, sl, #1
 80054dc:	f88a 3000 	strb.w	r3, [sl]
 80054e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054e4:	2b39      	cmp	r3, #57	; 0x39
 80054e6:	f106 32ff 	add.w	r2, r6, #4294967295
 80054ea:	d04c      	beq.n	8005586 <_dtoa_r+0xa1e>
 80054ec:	3301      	adds	r3, #1
 80054ee:	e051      	b.n	8005594 <_dtoa_r+0xa2c>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f10a 0601 	add.w	r6, sl, #1
 80054f6:	dd05      	ble.n	8005504 <_dtoa_r+0x99c>
 80054f8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054fc:	d0eb      	beq.n	80054d6 <_dtoa_r+0x96e>
 80054fe:	f108 0801 	add.w	r8, r8, #1
 8005502:	e7c5      	b.n	8005490 <_dtoa_r+0x928>
 8005504:	9b04      	ldr	r3, [sp, #16]
 8005506:	9a06      	ldr	r2, [sp, #24]
 8005508:	f806 8c01 	strb.w	r8, [r6, #-1]
 800550c:	1af3      	subs	r3, r6, r3
 800550e:	4293      	cmp	r3, r2
 8005510:	d021      	beq.n	8005556 <_dtoa_r+0x9ee>
 8005512:	2300      	movs	r3, #0
 8005514:	220a      	movs	r2, #10
 8005516:	9901      	ldr	r1, [sp, #4]
 8005518:	4620      	mov	r0, r4
 800551a:	f000 f8dd 	bl	80056d8 <__multadd>
 800551e:	45b9      	cmp	r9, r7
 8005520:	9001      	str	r0, [sp, #4]
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	f04f 020a 	mov.w	r2, #10
 800552a:	4649      	mov	r1, r9
 800552c:	4620      	mov	r0, r4
 800552e:	d105      	bne.n	800553c <_dtoa_r+0x9d4>
 8005530:	f000 f8d2 	bl	80056d8 <__multadd>
 8005534:	4681      	mov	r9, r0
 8005536:	4607      	mov	r7, r0
 8005538:	46b2      	mov	sl, r6
 800553a:	e779      	b.n	8005430 <_dtoa_r+0x8c8>
 800553c:	f000 f8cc 	bl	80056d8 <__multadd>
 8005540:	4639      	mov	r1, r7
 8005542:	4681      	mov	r9, r0
 8005544:	2300      	movs	r3, #0
 8005546:	220a      	movs	r2, #10
 8005548:	4620      	mov	r0, r4
 800554a:	f000 f8c5 	bl	80056d8 <__multadd>
 800554e:	4607      	mov	r7, r0
 8005550:	e7f2      	b.n	8005538 <_dtoa_r+0x9d0>
 8005552:	f04f 0900 	mov.w	r9, #0
 8005556:	2201      	movs	r2, #1
 8005558:	9901      	ldr	r1, [sp, #4]
 800555a:	4620      	mov	r0, r4
 800555c:	f000 fa32 	bl	80059c4 <__lshift>
 8005560:	4629      	mov	r1, r5
 8005562:	9001      	str	r0, [sp, #4]
 8005564:	f000 fa82 	bl	8005a6c <__mcmp>
 8005568:	2800      	cmp	r0, #0
 800556a:	dcb9      	bgt.n	80054e0 <_dtoa_r+0x978>
 800556c:	d102      	bne.n	8005574 <_dtoa_r+0xa0c>
 800556e:	f018 0f01 	tst.w	r8, #1
 8005572:	d1b5      	bne.n	80054e0 <_dtoa_r+0x978>
 8005574:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005578:	2b30      	cmp	r3, #48	; 0x30
 800557a:	f106 32ff 	add.w	r2, r6, #4294967295
 800557e:	f47f af11 	bne.w	80053a4 <_dtoa_r+0x83c>
 8005582:	4616      	mov	r6, r2
 8005584:	e7f6      	b.n	8005574 <_dtoa_r+0xa0c>
 8005586:	9b04      	ldr	r3, [sp, #16]
 8005588:	4293      	cmp	r3, r2
 800558a:	d105      	bne.n	8005598 <_dtoa_r+0xa30>
 800558c:	9a04      	ldr	r2, [sp, #16]
 800558e:	f10b 0b01 	add.w	fp, fp, #1
 8005592:	2331      	movs	r3, #49	; 0x31
 8005594:	7013      	strb	r3, [r2, #0]
 8005596:	e705      	b.n	80053a4 <_dtoa_r+0x83c>
 8005598:	4616      	mov	r6, r2
 800559a:	e7a1      	b.n	80054e0 <_dtoa_r+0x978>
 800559c:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <_dtoa_r+0xa90>)
 800559e:	f7ff bb48 	b.w	8004c32 <_dtoa_r+0xca>
 80055a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f47f ab23 	bne.w	8004bf0 <_dtoa_r+0x88>
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <_dtoa_r+0xa94>)
 80055ac:	f7ff bb41 	b.w	8004c32 <_dtoa_r+0xca>
 80055b0:	9b08      	ldr	r3, [sp, #32]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	f77f ae3b 	ble.w	800522e <_dtoa_r+0x6c6>
 80055b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80055bc:	e64f      	b.n	800525e <_dtoa_r+0x6f6>
 80055be:	9b06      	ldr	r3, [sp, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dc03      	bgt.n	80055cc <_dtoa_r+0xa64>
 80055c4:	9b08      	ldr	r3, [sp, #32]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	f73f aed7 	bgt.w	800537a <_dtoa_r+0x812>
 80055cc:	9e04      	ldr	r6, [sp, #16]
 80055ce:	9801      	ldr	r0, [sp, #4]
 80055d0:	4629      	mov	r1, r5
 80055d2:	f7ff fa3a 	bl	8004a4a <quorem>
 80055d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055da:	f806 8b01 	strb.w	r8, [r6], #1
 80055de:	9b04      	ldr	r3, [sp, #16]
 80055e0:	9a06      	ldr	r2, [sp, #24]
 80055e2:	1af3      	subs	r3, r6, r3
 80055e4:	429a      	cmp	r2, r3
 80055e6:	ddb4      	ble.n	8005552 <_dtoa_r+0x9ea>
 80055e8:	2300      	movs	r3, #0
 80055ea:	220a      	movs	r2, #10
 80055ec:	9901      	ldr	r1, [sp, #4]
 80055ee:	4620      	mov	r0, r4
 80055f0:	f000 f872 	bl	80056d8 <__multadd>
 80055f4:	9001      	str	r0, [sp, #4]
 80055f6:	e7ea      	b.n	80055ce <_dtoa_r+0xa66>
 80055f8:	08005f84 	.word	0x08005f84
 80055fc:	08005f86 	.word	0x08005f86

08005600 <_localeconv_r>:
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <_localeconv_r+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6a18      	ldr	r0, [r3, #32]
 8005606:	4b04      	ldr	r3, [pc, #16]	; (8005618 <_localeconv_r+0x18>)
 8005608:	2800      	cmp	r0, #0
 800560a:	bf08      	it	eq
 800560c:	4618      	moveq	r0, r3
 800560e:	30f0      	adds	r0, #240	; 0xf0
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000010 	.word	0x20000010
 8005618:	20000074 	.word	0x20000074

0800561c <malloc>:
 800561c:	4b02      	ldr	r3, [pc, #8]	; (8005628 <malloc+0xc>)
 800561e:	4601      	mov	r1, r0
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	f000 baf7 	b.w	8005c14 <_malloc_r>
 8005626:	bf00      	nop
 8005628:	20000010 	.word	0x20000010

0800562c <memcpy>:
 800562c:	b510      	push	{r4, lr}
 800562e:	1e43      	subs	r3, r0, #1
 8005630:	440a      	add	r2, r1
 8005632:	4291      	cmp	r1, r2
 8005634:	d100      	bne.n	8005638 <memcpy+0xc>
 8005636:	bd10      	pop	{r4, pc}
 8005638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800563c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005640:	e7f7      	b.n	8005632 <memcpy+0x6>

08005642 <_Balloc>:
 8005642:	b570      	push	{r4, r5, r6, lr}
 8005644:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005646:	4604      	mov	r4, r0
 8005648:	460e      	mov	r6, r1
 800564a:	b93d      	cbnz	r5, 800565c <_Balloc+0x1a>
 800564c:	2010      	movs	r0, #16
 800564e:	f7ff ffe5 	bl	800561c <malloc>
 8005652:	6260      	str	r0, [r4, #36]	; 0x24
 8005654:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005658:	6005      	str	r5, [r0, #0]
 800565a:	60c5      	str	r5, [r0, #12]
 800565c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800565e:	68eb      	ldr	r3, [r5, #12]
 8005660:	b183      	cbz	r3, 8005684 <_Balloc+0x42>
 8005662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800566a:	b9b8      	cbnz	r0, 800569c <_Balloc+0x5a>
 800566c:	2101      	movs	r1, #1
 800566e:	fa01 f506 	lsl.w	r5, r1, r6
 8005672:	1d6a      	adds	r2, r5, #5
 8005674:	0092      	lsls	r2, r2, #2
 8005676:	4620      	mov	r0, r4
 8005678:	f000 fabe 	bl	8005bf8 <_calloc_r>
 800567c:	b160      	cbz	r0, 8005698 <_Balloc+0x56>
 800567e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005682:	e00e      	b.n	80056a2 <_Balloc+0x60>
 8005684:	2221      	movs	r2, #33	; 0x21
 8005686:	2104      	movs	r1, #4
 8005688:	4620      	mov	r0, r4
 800568a:	f000 fab5 	bl	8005bf8 <_calloc_r>
 800568e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005690:	60e8      	str	r0, [r5, #12]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e4      	bne.n	8005662 <_Balloc+0x20>
 8005698:	2000      	movs	r0, #0
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	6802      	ldr	r2, [r0, #0]
 800569e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80056a2:	2300      	movs	r3, #0
 80056a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056a8:	e7f7      	b.n	800569a <_Balloc+0x58>

080056aa <_Bfree>:
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80056ae:	4606      	mov	r6, r0
 80056b0:	460d      	mov	r5, r1
 80056b2:	b93c      	cbnz	r4, 80056c4 <_Bfree+0x1a>
 80056b4:	2010      	movs	r0, #16
 80056b6:	f7ff ffb1 	bl	800561c <malloc>
 80056ba:	6270      	str	r0, [r6, #36]	; 0x24
 80056bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056c0:	6004      	str	r4, [r0, #0]
 80056c2:	60c4      	str	r4, [r0, #12]
 80056c4:	b13d      	cbz	r5, 80056d6 <_Bfree+0x2c>
 80056c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80056c8:	686a      	ldr	r2, [r5, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056d0:	6029      	str	r1, [r5, #0]
 80056d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056d6:	bd70      	pop	{r4, r5, r6, pc}

080056d8 <__multadd>:
 80056d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056dc:	690d      	ldr	r5, [r1, #16]
 80056de:	461f      	mov	r7, r3
 80056e0:	4606      	mov	r6, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	f101 0c14 	add.w	ip, r1, #20
 80056e8:	2300      	movs	r3, #0
 80056ea:	f8dc 0000 	ldr.w	r0, [ip]
 80056ee:	b281      	uxth	r1, r0
 80056f0:	fb02 7101 	mla	r1, r2, r1, r7
 80056f4:	0c0f      	lsrs	r7, r1, #16
 80056f6:	0c00      	lsrs	r0, r0, #16
 80056f8:	fb02 7000 	mla	r0, r2, r0, r7
 80056fc:	b289      	uxth	r1, r1
 80056fe:	3301      	adds	r3, #1
 8005700:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005704:	429d      	cmp	r5, r3
 8005706:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800570a:	f84c 1b04 	str.w	r1, [ip], #4
 800570e:	dcec      	bgt.n	80056ea <__multadd+0x12>
 8005710:	b1d7      	cbz	r7, 8005748 <__multadd+0x70>
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	42ab      	cmp	r3, r5
 8005716:	dc12      	bgt.n	800573e <__multadd+0x66>
 8005718:	6861      	ldr	r1, [r4, #4]
 800571a:	4630      	mov	r0, r6
 800571c:	3101      	adds	r1, #1
 800571e:	f7ff ff90 	bl	8005642 <_Balloc>
 8005722:	6922      	ldr	r2, [r4, #16]
 8005724:	3202      	adds	r2, #2
 8005726:	f104 010c 	add.w	r1, r4, #12
 800572a:	4680      	mov	r8, r0
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	300c      	adds	r0, #12
 8005730:	f7ff ff7c 	bl	800562c <memcpy>
 8005734:	4621      	mov	r1, r4
 8005736:	4630      	mov	r0, r6
 8005738:	f7ff ffb7 	bl	80056aa <_Bfree>
 800573c:	4644      	mov	r4, r8
 800573e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005742:	3501      	adds	r5, #1
 8005744:	615f      	str	r7, [r3, #20]
 8005746:	6125      	str	r5, [r4, #16]
 8005748:	4620      	mov	r0, r4
 800574a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800574e <__hi0bits>:
 800574e:	0c02      	lsrs	r2, r0, #16
 8005750:	0412      	lsls	r2, r2, #16
 8005752:	4603      	mov	r3, r0
 8005754:	b9b2      	cbnz	r2, 8005784 <__hi0bits+0x36>
 8005756:	0403      	lsls	r3, r0, #16
 8005758:	2010      	movs	r0, #16
 800575a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800575e:	bf04      	itt	eq
 8005760:	021b      	lsleq	r3, r3, #8
 8005762:	3008      	addeq	r0, #8
 8005764:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005768:	bf04      	itt	eq
 800576a:	011b      	lsleq	r3, r3, #4
 800576c:	3004      	addeq	r0, #4
 800576e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005772:	bf04      	itt	eq
 8005774:	009b      	lsleq	r3, r3, #2
 8005776:	3002      	addeq	r0, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	db06      	blt.n	800578a <__hi0bits+0x3c>
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	d503      	bpl.n	8005788 <__hi0bits+0x3a>
 8005780:	3001      	adds	r0, #1
 8005782:	4770      	bx	lr
 8005784:	2000      	movs	r0, #0
 8005786:	e7e8      	b.n	800575a <__hi0bits+0xc>
 8005788:	2020      	movs	r0, #32
 800578a:	4770      	bx	lr

0800578c <__lo0bits>:
 800578c:	6803      	ldr	r3, [r0, #0]
 800578e:	f013 0207 	ands.w	r2, r3, #7
 8005792:	4601      	mov	r1, r0
 8005794:	d00b      	beq.n	80057ae <__lo0bits+0x22>
 8005796:	07da      	lsls	r2, r3, #31
 8005798:	d423      	bmi.n	80057e2 <__lo0bits+0x56>
 800579a:	0798      	lsls	r0, r3, #30
 800579c:	bf49      	itett	mi
 800579e:	085b      	lsrmi	r3, r3, #1
 80057a0:	089b      	lsrpl	r3, r3, #2
 80057a2:	2001      	movmi	r0, #1
 80057a4:	600b      	strmi	r3, [r1, #0]
 80057a6:	bf5c      	itt	pl
 80057a8:	600b      	strpl	r3, [r1, #0]
 80057aa:	2002      	movpl	r0, #2
 80057ac:	4770      	bx	lr
 80057ae:	b298      	uxth	r0, r3
 80057b0:	b9a8      	cbnz	r0, 80057de <__lo0bits+0x52>
 80057b2:	0c1b      	lsrs	r3, r3, #16
 80057b4:	2010      	movs	r0, #16
 80057b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057ba:	bf04      	itt	eq
 80057bc:	0a1b      	lsreq	r3, r3, #8
 80057be:	3008      	addeq	r0, #8
 80057c0:	071a      	lsls	r2, r3, #28
 80057c2:	bf04      	itt	eq
 80057c4:	091b      	lsreq	r3, r3, #4
 80057c6:	3004      	addeq	r0, #4
 80057c8:	079a      	lsls	r2, r3, #30
 80057ca:	bf04      	itt	eq
 80057cc:	089b      	lsreq	r3, r3, #2
 80057ce:	3002      	addeq	r0, #2
 80057d0:	07da      	lsls	r2, r3, #31
 80057d2:	d402      	bmi.n	80057da <__lo0bits+0x4e>
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	d006      	beq.n	80057e6 <__lo0bits+0x5a>
 80057d8:	3001      	adds	r0, #1
 80057da:	600b      	str	r3, [r1, #0]
 80057dc:	4770      	bx	lr
 80057de:	4610      	mov	r0, r2
 80057e0:	e7e9      	b.n	80057b6 <__lo0bits+0x2a>
 80057e2:	2000      	movs	r0, #0
 80057e4:	4770      	bx	lr
 80057e6:	2020      	movs	r0, #32
 80057e8:	4770      	bx	lr

080057ea <__i2b>:
 80057ea:	b510      	push	{r4, lr}
 80057ec:	460c      	mov	r4, r1
 80057ee:	2101      	movs	r1, #1
 80057f0:	f7ff ff27 	bl	8005642 <_Balloc>
 80057f4:	2201      	movs	r2, #1
 80057f6:	6144      	str	r4, [r0, #20]
 80057f8:	6102      	str	r2, [r0, #16]
 80057fa:	bd10      	pop	{r4, pc}

080057fc <__multiply>:
 80057fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	4614      	mov	r4, r2
 8005802:	690a      	ldr	r2, [r1, #16]
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	bfb8      	it	lt
 800580a:	460b      	movlt	r3, r1
 800580c:	4688      	mov	r8, r1
 800580e:	bfbc      	itt	lt
 8005810:	46a0      	movlt	r8, r4
 8005812:	461c      	movlt	r4, r3
 8005814:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005818:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800581c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005820:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005824:	eb07 0609 	add.w	r6, r7, r9
 8005828:	42b3      	cmp	r3, r6
 800582a:	bfb8      	it	lt
 800582c:	3101      	addlt	r1, #1
 800582e:	f7ff ff08 	bl	8005642 <_Balloc>
 8005832:	f100 0514 	add.w	r5, r0, #20
 8005836:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800583a:	462b      	mov	r3, r5
 800583c:	2200      	movs	r2, #0
 800583e:	4573      	cmp	r3, lr
 8005840:	d316      	bcc.n	8005870 <__multiply+0x74>
 8005842:	f104 0214 	add.w	r2, r4, #20
 8005846:	f108 0114 	add.w	r1, r8, #20
 800584a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800584e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	9201      	str	r2, [sp, #4]
 8005858:	4293      	cmp	r3, r2
 800585a:	d80c      	bhi.n	8005876 <__multiply+0x7a>
 800585c:	2e00      	cmp	r6, #0
 800585e:	dd03      	ble.n	8005868 <__multiply+0x6c>
 8005860:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005864:	2b00      	cmp	r3, #0
 8005866:	d05d      	beq.n	8005924 <__multiply+0x128>
 8005868:	6106      	str	r6, [r0, #16]
 800586a:	b003      	add	sp, #12
 800586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005870:	f843 2b04 	str.w	r2, [r3], #4
 8005874:	e7e3      	b.n	800583e <__multiply+0x42>
 8005876:	f8b2 b000 	ldrh.w	fp, [r2]
 800587a:	f1bb 0f00 	cmp.w	fp, #0
 800587e:	d023      	beq.n	80058c8 <__multiply+0xcc>
 8005880:	4689      	mov	r9, r1
 8005882:	46ac      	mov	ip, r5
 8005884:	f04f 0800 	mov.w	r8, #0
 8005888:	f859 4b04 	ldr.w	r4, [r9], #4
 800588c:	f8dc a000 	ldr.w	sl, [ip]
 8005890:	b2a3      	uxth	r3, r4
 8005892:	fa1f fa8a 	uxth.w	sl, sl
 8005896:	fb0b a303 	mla	r3, fp, r3, sl
 800589a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800589e:	f8dc 4000 	ldr.w	r4, [ip]
 80058a2:	4443      	add	r3, r8
 80058a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058a8:	fb0b 840a 	mla	r4, fp, sl, r8
 80058ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80058b0:	46e2      	mov	sl, ip
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058b8:	454f      	cmp	r7, r9
 80058ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058be:	f84a 3b04 	str.w	r3, [sl], #4
 80058c2:	d82b      	bhi.n	800591c <__multiply+0x120>
 80058c4:	f8cc 8004 	str.w	r8, [ip, #4]
 80058c8:	9b01      	ldr	r3, [sp, #4]
 80058ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80058ce:	3204      	adds	r2, #4
 80058d0:	f1ba 0f00 	cmp.w	sl, #0
 80058d4:	d020      	beq.n	8005918 <__multiply+0x11c>
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	4689      	mov	r9, r1
 80058da:	46a8      	mov	r8, r5
 80058dc:	f04f 0b00 	mov.w	fp, #0
 80058e0:	f8b9 c000 	ldrh.w	ip, [r9]
 80058e4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80058e8:	fb0a 440c 	mla	r4, sl, ip, r4
 80058ec:	445c      	add	r4, fp
 80058ee:	46c4      	mov	ip, r8
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058f6:	f84c 3b04 	str.w	r3, [ip], #4
 80058fa:	f859 3b04 	ldr.w	r3, [r9], #4
 80058fe:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	fb0a b303 	mla	r3, sl, r3, fp
 8005908:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800590c:	454f      	cmp	r7, r9
 800590e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005912:	d805      	bhi.n	8005920 <__multiply+0x124>
 8005914:	f8c8 3004 	str.w	r3, [r8, #4]
 8005918:	3504      	adds	r5, #4
 800591a:	e79b      	b.n	8005854 <__multiply+0x58>
 800591c:	46d4      	mov	ip, sl
 800591e:	e7b3      	b.n	8005888 <__multiply+0x8c>
 8005920:	46e0      	mov	r8, ip
 8005922:	e7dd      	b.n	80058e0 <__multiply+0xe4>
 8005924:	3e01      	subs	r6, #1
 8005926:	e799      	b.n	800585c <__multiply+0x60>

08005928 <__pow5mult>:
 8005928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800592c:	4615      	mov	r5, r2
 800592e:	f012 0203 	ands.w	r2, r2, #3
 8005932:	4606      	mov	r6, r0
 8005934:	460f      	mov	r7, r1
 8005936:	d007      	beq.n	8005948 <__pow5mult+0x20>
 8005938:	3a01      	subs	r2, #1
 800593a:	4c21      	ldr	r4, [pc, #132]	; (80059c0 <__pow5mult+0x98>)
 800593c:	2300      	movs	r3, #0
 800593e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005942:	f7ff fec9 	bl	80056d8 <__multadd>
 8005946:	4607      	mov	r7, r0
 8005948:	10ad      	asrs	r5, r5, #2
 800594a:	d035      	beq.n	80059b8 <__pow5mult+0x90>
 800594c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800594e:	b93c      	cbnz	r4, 8005960 <__pow5mult+0x38>
 8005950:	2010      	movs	r0, #16
 8005952:	f7ff fe63 	bl	800561c <malloc>
 8005956:	6270      	str	r0, [r6, #36]	; 0x24
 8005958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800595c:	6004      	str	r4, [r0, #0]
 800595e:	60c4      	str	r4, [r0, #12]
 8005960:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005968:	b94c      	cbnz	r4, 800597e <__pow5mult+0x56>
 800596a:	f240 2171 	movw	r1, #625	; 0x271
 800596e:	4630      	mov	r0, r6
 8005970:	f7ff ff3b 	bl	80057ea <__i2b>
 8005974:	2300      	movs	r3, #0
 8005976:	f8c8 0008 	str.w	r0, [r8, #8]
 800597a:	4604      	mov	r4, r0
 800597c:	6003      	str	r3, [r0, #0]
 800597e:	f04f 0800 	mov.w	r8, #0
 8005982:	07eb      	lsls	r3, r5, #31
 8005984:	d50a      	bpl.n	800599c <__pow5mult+0x74>
 8005986:	4639      	mov	r1, r7
 8005988:	4622      	mov	r2, r4
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff ff36 	bl	80057fc <__multiply>
 8005990:	4639      	mov	r1, r7
 8005992:	4681      	mov	r9, r0
 8005994:	4630      	mov	r0, r6
 8005996:	f7ff fe88 	bl	80056aa <_Bfree>
 800599a:	464f      	mov	r7, r9
 800599c:	106d      	asrs	r5, r5, #1
 800599e:	d00b      	beq.n	80059b8 <__pow5mult+0x90>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	b938      	cbnz	r0, 80059b4 <__pow5mult+0x8c>
 80059a4:	4622      	mov	r2, r4
 80059a6:	4621      	mov	r1, r4
 80059a8:	4630      	mov	r0, r6
 80059aa:	f7ff ff27 	bl	80057fc <__multiply>
 80059ae:	6020      	str	r0, [r4, #0]
 80059b0:	f8c0 8000 	str.w	r8, [r0]
 80059b4:	4604      	mov	r4, r0
 80059b6:	e7e4      	b.n	8005982 <__pow5mult+0x5a>
 80059b8:	4638      	mov	r0, r7
 80059ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059be:	bf00      	nop
 80059c0:	08006088 	.word	0x08006088

080059c4 <__lshift>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	460c      	mov	r4, r1
 80059ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	6849      	ldr	r1, [r1, #4]
 80059d2:	eb0a 0903 	add.w	r9, sl, r3
 80059d6:	68a3      	ldr	r3, [r4, #8]
 80059d8:	4607      	mov	r7, r0
 80059da:	4616      	mov	r6, r2
 80059dc:	f109 0501 	add.w	r5, r9, #1
 80059e0:	42ab      	cmp	r3, r5
 80059e2:	db32      	blt.n	8005a4a <__lshift+0x86>
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7ff fe2c 	bl	8005642 <_Balloc>
 80059ea:	2300      	movs	r3, #0
 80059ec:	4680      	mov	r8, r0
 80059ee:	f100 0114 	add.w	r1, r0, #20
 80059f2:	461a      	mov	r2, r3
 80059f4:	4553      	cmp	r3, sl
 80059f6:	db2b      	blt.n	8005a50 <__lshift+0x8c>
 80059f8:	6920      	ldr	r0, [r4, #16]
 80059fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059fe:	f104 0314 	add.w	r3, r4, #20
 8005a02:	f016 021f 	ands.w	r2, r6, #31
 8005a06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a0a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a0e:	d025      	beq.n	8005a5c <__lshift+0x98>
 8005a10:	f1c2 0e20 	rsb	lr, r2, #32
 8005a14:	2000      	movs	r0, #0
 8005a16:	681e      	ldr	r6, [r3, #0]
 8005a18:	468a      	mov	sl, r1
 8005a1a:	4096      	lsls	r6, r2
 8005a1c:	4330      	orrs	r0, r6
 8005a1e:	f84a 0b04 	str.w	r0, [sl], #4
 8005a22:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a26:	459c      	cmp	ip, r3
 8005a28:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a2c:	d814      	bhi.n	8005a58 <__lshift+0x94>
 8005a2e:	6048      	str	r0, [r1, #4]
 8005a30:	b108      	cbz	r0, 8005a36 <__lshift+0x72>
 8005a32:	f109 0502 	add.w	r5, r9, #2
 8005a36:	3d01      	subs	r5, #1
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f8c8 5010 	str.w	r5, [r8, #16]
 8005a3e:	4621      	mov	r1, r4
 8005a40:	f7ff fe33 	bl	80056aa <_Bfree>
 8005a44:	4640      	mov	r0, r8
 8005a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4a:	3101      	adds	r1, #1
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	e7c7      	b.n	80059e0 <__lshift+0x1c>
 8005a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a54:	3301      	adds	r3, #1
 8005a56:	e7cd      	b.n	80059f4 <__lshift+0x30>
 8005a58:	4651      	mov	r1, sl
 8005a5a:	e7dc      	b.n	8005a16 <__lshift+0x52>
 8005a5c:	3904      	subs	r1, #4
 8005a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a62:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a66:	459c      	cmp	ip, r3
 8005a68:	d8f9      	bhi.n	8005a5e <__lshift+0x9a>
 8005a6a:	e7e4      	b.n	8005a36 <__lshift+0x72>

08005a6c <__mcmp>:
 8005a6c:	6903      	ldr	r3, [r0, #16]
 8005a6e:	690a      	ldr	r2, [r1, #16]
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	b530      	push	{r4, r5, lr}
 8005a74:	d10c      	bne.n	8005a90 <__mcmp+0x24>
 8005a76:	0092      	lsls	r2, r2, #2
 8005a78:	3014      	adds	r0, #20
 8005a7a:	3114      	adds	r1, #20
 8005a7c:	1884      	adds	r4, r0, r2
 8005a7e:	4411      	add	r1, r2
 8005a80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a88:	4295      	cmp	r5, r2
 8005a8a:	d003      	beq.n	8005a94 <__mcmp+0x28>
 8005a8c:	d305      	bcc.n	8005a9a <__mcmp+0x2e>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd30      	pop	{r4, r5, pc}
 8005a94:	42a0      	cmp	r0, r4
 8005a96:	d3f3      	bcc.n	8005a80 <__mcmp+0x14>
 8005a98:	e7fa      	b.n	8005a90 <__mcmp+0x24>
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	e7f7      	b.n	8005a90 <__mcmp+0x24>

08005aa0 <__mdiff>:
 8005aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	460d      	mov	r5, r1
 8005aa6:	4607      	mov	r7, r0
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4628      	mov	r0, r5
 8005aac:	4614      	mov	r4, r2
 8005aae:	f7ff ffdd 	bl	8005a6c <__mcmp>
 8005ab2:	1e06      	subs	r6, r0, #0
 8005ab4:	d108      	bne.n	8005ac8 <__mdiff+0x28>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f7ff fdc2 	bl	8005642 <_Balloc>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	bfa4      	itt	ge
 8005aca:	4623      	movge	r3, r4
 8005acc:	462c      	movge	r4, r5
 8005ace:	4638      	mov	r0, r7
 8005ad0:	6861      	ldr	r1, [r4, #4]
 8005ad2:	bfa6      	itte	ge
 8005ad4:	461d      	movge	r5, r3
 8005ad6:	2600      	movge	r6, #0
 8005ad8:	2601      	movlt	r6, #1
 8005ada:	f7ff fdb2 	bl	8005642 <_Balloc>
 8005ade:	692b      	ldr	r3, [r5, #16]
 8005ae0:	60c6      	str	r6, [r0, #12]
 8005ae2:	6926      	ldr	r6, [r4, #16]
 8005ae4:	f105 0914 	add.w	r9, r5, #20
 8005ae8:	f104 0214 	add.w	r2, r4, #20
 8005aec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005af0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005af4:	f100 0514 	add.w	r5, r0, #20
 8005af8:	f04f 0e00 	mov.w	lr, #0
 8005afc:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b00:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b04:	fa1e f18a 	uxtah	r1, lr, sl
 8005b08:	b2a3      	uxth	r3, r4
 8005b0a:	1ac9      	subs	r1, r1, r3
 8005b0c:	0c23      	lsrs	r3, r4, #16
 8005b0e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005b12:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b16:	b289      	uxth	r1, r1
 8005b18:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005b1c:	45c8      	cmp	r8, r9
 8005b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005b22:	4694      	mov	ip, r2
 8005b24:	f845 3b04 	str.w	r3, [r5], #4
 8005b28:	d8e8      	bhi.n	8005afc <__mdiff+0x5c>
 8005b2a:	45bc      	cmp	ip, r7
 8005b2c:	d304      	bcc.n	8005b38 <__mdiff+0x98>
 8005b2e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005b32:	b183      	cbz	r3, 8005b56 <__mdiff+0xb6>
 8005b34:	6106      	str	r6, [r0, #16]
 8005b36:	e7c5      	b.n	8005ac4 <__mdiff+0x24>
 8005b38:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005b3c:	fa1e f381 	uxtah	r3, lr, r1
 8005b40:	141a      	asrs	r2, r3, #16
 8005b42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b4c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005b50:	f845 3b04 	str.w	r3, [r5], #4
 8005b54:	e7e9      	b.n	8005b2a <__mdiff+0x8a>
 8005b56:	3e01      	subs	r6, #1
 8005b58:	e7e9      	b.n	8005b2e <__mdiff+0x8e>

08005b5a <__d2b>:
 8005b5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b5e:	460e      	mov	r6, r1
 8005b60:	2101      	movs	r1, #1
 8005b62:	ec59 8b10 	vmov	r8, r9, d0
 8005b66:	4615      	mov	r5, r2
 8005b68:	f7ff fd6b 	bl	8005642 <_Balloc>
 8005b6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b70:	4607      	mov	r7, r0
 8005b72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b76:	bb34      	cbnz	r4, 8005bc6 <__d2b+0x6c>
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	f1b8 0300 	subs.w	r3, r8, #0
 8005b7e:	d027      	beq.n	8005bd0 <__d2b+0x76>
 8005b80:	a802      	add	r0, sp, #8
 8005b82:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005b86:	f7ff fe01 	bl	800578c <__lo0bits>
 8005b8a:	9900      	ldr	r1, [sp, #0]
 8005b8c:	b1f0      	cbz	r0, 8005bcc <__d2b+0x72>
 8005b8e:	9a01      	ldr	r2, [sp, #4]
 8005b90:	f1c0 0320 	rsb	r3, r0, #32
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	40c2      	lsrs	r2, r0
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	9201      	str	r2, [sp, #4]
 8005ba0:	9b01      	ldr	r3, [sp, #4]
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bf14      	ite	ne
 8005ba8:	2102      	movne	r1, #2
 8005baa:	2101      	moveq	r1, #1
 8005bac:	6139      	str	r1, [r7, #16]
 8005bae:	b1c4      	cbz	r4, 8005be2 <__d2b+0x88>
 8005bb0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005bb4:	4404      	add	r4, r0
 8005bb6:	6034      	str	r4, [r6, #0]
 8005bb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005bbc:	6028      	str	r0, [r5, #0]
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	b003      	add	sp, #12
 8005bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bca:	e7d5      	b.n	8005b78 <__d2b+0x1e>
 8005bcc:	6179      	str	r1, [r7, #20]
 8005bce:	e7e7      	b.n	8005ba0 <__d2b+0x46>
 8005bd0:	a801      	add	r0, sp, #4
 8005bd2:	f7ff fddb 	bl	800578c <__lo0bits>
 8005bd6:	9b01      	ldr	r3, [sp, #4]
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	2101      	movs	r1, #1
 8005bdc:	6139      	str	r1, [r7, #16]
 8005bde:	3020      	adds	r0, #32
 8005be0:	e7e5      	b.n	8005bae <__d2b+0x54>
 8005be2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005be6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005bea:	6030      	str	r0, [r6, #0]
 8005bec:	6918      	ldr	r0, [r3, #16]
 8005bee:	f7ff fdae 	bl	800574e <__hi0bits>
 8005bf2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005bf6:	e7e1      	b.n	8005bbc <__d2b+0x62>

08005bf8 <_calloc_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	fb02 f401 	mul.w	r4, r2, r1
 8005bfe:	4621      	mov	r1, r4
 8005c00:	f000 f808 	bl	8005c14 <_malloc_r>
 8005c04:	4605      	mov	r5, r0
 8005c06:	b118      	cbz	r0, 8005c10 <_calloc_r+0x18>
 8005c08:	4622      	mov	r2, r4
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	f7fe fbc2 	bl	8004394 <memset>
 8005c10:	4628      	mov	r0, r5
 8005c12:	bd38      	pop	{r3, r4, r5, pc}

08005c14 <_malloc_r>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	1ccd      	adds	r5, r1, #3
 8005c18:	f025 0503 	bic.w	r5, r5, #3
 8005c1c:	3508      	adds	r5, #8
 8005c1e:	2d0c      	cmp	r5, #12
 8005c20:	bf38      	it	cc
 8005c22:	250c      	movcc	r5, #12
 8005c24:	2d00      	cmp	r5, #0
 8005c26:	4606      	mov	r6, r0
 8005c28:	db01      	blt.n	8005c2e <_malloc_r+0x1a>
 8005c2a:	42a9      	cmp	r1, r5
 8005c2c:	d903      	bls.n	8005c36 <_malloc_r+0x22>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	6033      	str	r3, [r6, #0]
 8005c32:	2000      	movs	r0, #0
 8005c34:	bd70      	pop	{r4, r5, r6, pc}
 8005c36:	f000 f869 	bl	8005d0c <__malloc_lock>
 8005c3a:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <_malloc_r+0xac>)
 8005c3c:	6814      	ldr	r4, [r2, #0]
 8005c3e:	4621      	mov	r1, r4
 8005c40:	b991      	cbnz	r1, 8005c68 <_malloc_r+0x54>
 8005c42:	4c20      	ldr	r4, [pc, #128]	; (8005cc4 <_malloc_r+0xb0>)
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	b91b      	cbnz	r3, 8005c50 <_malloc_r+0x3c>
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 f83d 	bl	8005cc8 <_sbrk_r>
 8005c4e:	6020      	str	r0, [r4, #0]
 8005c50:	4629      	mov	r1, r5
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 f838 	bl	8005cc8 <_sbrk_r>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d124      	bne.n	8005ca6 <_malloc_r+0x92>
 8005c5c:	230c      	movs	r3, #12
 8005c5e:	6033      	str	r3, [r6, #0]
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 f854 	bl	8005d0e <__malloc_unlock>
 8005c66:	e7e4      	b.n	8005c32 <_malloc_r+0x1e>
 8005c68:	680b      	ldr	r3, [r1, #0]
 8005c6a:	1b5b      	subs	r3, r3, r5
 8005c6c:	d418      	bmi.n	8005ca0 <_malloc_r+0x8c>
 8005c6e:	2b0b      	cmp	r3, #11
 8005c70:	d90f      	bls.n	8005c92 <_malloc_r+0x7e>
 8005c72:	600b      	str	r3, [r1, #0]
 8005c74:	50cd      	str	r5, [r1, r3]
 8005c76:	18cc      	adds	r4, r1, r3
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f000 f848 	bl	8005d0e <__malloc_unlock>
 8005c7e:	f104 000b 	add.w	r0, r4, #11
 8005c82:	1d23      	adds	r3, r4, #4
 8005c84:	f020 0007 	bic.w	r0, r0, #7
 8005c88:	1ac3      	subs	r3, r0, r3
 8005c8a:	d0d3      	beq.n	8005c34 <_malloc_r+0x20>
 8005c8c:	425a      	negs	r2, r3
 8005c8e:	50e2      	str	r2, [r4, r3]
 8005c90:	e7d0      	b.n	8005c34 <_malloc_r+0x20>
 8005c92:	428c      	cmp	r4, r1
 8005c94:	684b      	ldr	r3, [r1, #4]
 8005c96:	bf16      	itet	ne
 8005c98:	6063      	strne	r3, [r4, #4]
 8005c9a:	6013      	streq	r3, [r2, #0]
 8005c9c:	460c      	movne	r4, r1
 8005c9e:	e7eb      	b.n	8005c78 <_malloc_r+0x64>
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	6849      	ldr	r1, [r1, #4]
 8005ca4:	e7cc      	b.n	8005c40 <_malloc_r+0x2c>
 8005ca6:	1cc4      	adds	r4, r0, #3
 8005ca8:	f024 0403 	bic.w	r4, r4, #3
 8005cac:	42a0      	cmp	r0, r4
 8005cae:	d005      	beq.n	8005cbc <_malloc_r+0xa8>
 8005cb0:	1a21      	subs	r1, r4, r0
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f000 f808 	bl	8005cc8 <_sbrk_r>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d0cf      	beq.n	8005c5c <_malloc_r+0x48>
 8005cbc:	6025      	str	r5, [r4, #0]
 8005cbe:	e7db      	b.n	8005c78 <_malloc_r+0x64>
 8005cc0:	20000200 	.word	0x20000200
 8005cc4:	20000204 	.word	0x20000204

08005cc8 <_sbrk_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4c06      	ldr	r4, [pc, #24]	; (8005ce4 <_sbrk_r+0x1c>)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4605      	mov	r5, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	f7fb f9a8 	bl	8001028 <_sbrk>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_sbrk_r+0x1a>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_sbrk_r+0x1a>
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	20000720 	.word	0x20000720

08005ce8 <__ascii_mbtowc>:
 8005ce8:	b082      	sub	sp, #8
 8005cea:	b901      	cbnz	r1, 8005cee <__ascii_mbtowc+0x6>
 8005cec:	a901      	add	r1, sp, #4
 8005cee:	b142      	cbz	r2, 8005d02 <__ascii_mbtowc+0x1a>
 8005cf0:	b14b      	cbz	r3, 8005d06 <__ascii_mbtowc+0x1e>
 8005cf2:	7813      	ldrb	r3, [r2, #0]
 8005cf4:	600b      	str	r3, [r1, #0]
 8005cf6:	7812      	ldrb	r2, [r2, #0]
 8005cf8:	1c10      	adds	r0, r2, #0
 8005cfa:	bf18      	it	ne
 8005cfc:	2001      	movne	r0, #1
 8005cfe:	b002      	add	sp, #8
 8005d00:	4770      	bx	lr
 8005d02:	4610      	mov	r0, r2
 8005d04:	e7fb      	b.n	8005cfe <__ascii_mbtowc+0x16>
 8005d06:	f06f 0001 	mvn.w	r0, #1
 8005d0a:	e7f8      	b.n	8005cfe <__ascii_mbtowc+0x16>

08005d0c <__malloc_lock>:
 8005d0c:	4770      	bx	lr

08005d0e <__malloc_unlock>:
 8005d0e:	4770      	bx	lr

08005d10 <__ascii_wctomb>:
 8005d10:	b149      	cbz	r1, 8005d26 <__ascii_wctomb+0x16>
 8005d12:	2aff      	cmp	r2, #255	; 0xff
 8005d14:	bf85      	ittet	hi
 8005d16:	238a      	movhi	r3, #138	; 0x8a
 8005d18:	6003      	strhi	r3, [r0, #0]
 8005d1a:	700a      	strbls	r2, [r1, #0]
 8005d1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005d20:	bf98      	it	ls
 8005d22:	2001      	movls	r0, #1
 8005d24:	4770      	bx	lr
 8005d26:	4608      	mov	r0, r1
 8005d28:	4770      	bx	lr
	...

08005d2c <_init>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	bf00      	nop
 8005d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d32:	bc08      	pop	{r3}
 8005d34:	469e      	mov	lr, r3
 8005d36:	4770      	bx	lr

08005d38 <_fini>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	bf00      	nop
 8005d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3e:	bc08      	pop	{r3}
 8005d40:	469e      	mov	lr, r3
 8005d42:	4770      	bx	lr
